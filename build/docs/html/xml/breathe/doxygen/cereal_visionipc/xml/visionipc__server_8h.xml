<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.17">
  <compounddef id="visionipc__server_8h" kind="file" language="C++">
    <compoundname>visionipc_server.h</compoundname>
    <includes local="no">vector</includes>
    <includes local="no">string</includes>
    <includes local="no">thread</includes>
    <includes local="no">atomic</includes>
    <includes local="no">map</includes>
    <includes local="yes">cereal/messaging/messaging.h</includes>
    <includes local="yes">cereal/visionipc/visionipc.h</includes>
    <includes refid="visionbuf_8h" local="yes">cereal/visionipc/visionbuf.h</includes>
    <incdepgraph>
      <node id="5">
        <label>atomic</label>
      </node>
      <node id="3">
        <label>string</label>
      </node>
      <node id="6">
        <label>map</label>
      </node>
      <node id="10">
        <label>CL/cl.h</label>
      </node>
      <node id="7">
        <label>cereal/messaging/messaging.h</label>
      </node>
      <node id="2">
        <label>vector</label>
      </node>
      <node id="8">
        <label>cereal/visionipc/visionipc.h</label>
      </node>
      <node id="9">
        <label>cereal/visionipc/visionbuf.h</label>
        <link refid="visionbuf_8h_source"/>
        <childnode refid="8" relation="include">
        </childnode>
        <childnode refid="10" relation="include">
        </childnode>
      </node>
      <node id="4">
        <label>thread</label>
      </node>
      <node id="1">
        <label>/tmp/openpilot/cereal/visionipc/visionipc_server.h</label>
        <link refid="visionipc__server_8h"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="6" relation="include">
        </childnode>
        <childnode refid="7" relation="include">
        </childnode>
        <childnode refid="8" relation="include">
        </childnode>
        <childnode refid="9" relation="include">
        </childnode>
      </node>
    </incdepgraph>
    <innerclass refid="class_vision_ipc_server" prot="public">VisionIpcServer</innerclass>
      <sectiondef kind="func">
      <memberdef kind="function" id="visionipc__server_8h_1a9d1253f3939cca13f0df64c3ef72e3b7" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::string</type>
        <definition>std::string get_endpoint_name</definition>
        <argsstring>(std::string name, VisionStreamType type)</argsstring>
        <name>get_endpoint_name</name>
        <param>
          <type>std::string</type>
          <declname>name</declname>
        </param>
        <param>
          <type>VisionStreamType</type>
          <declname>type</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/tmp/openpilot/cereal/visionipc/visionipc_server.h" line="12" column="13" declfile="/tmp/openpilot/cereal/visionipc/visionipc_server.h" declline="12" declcolumn="13"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="preprocessor">#pragma<sp/>once</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;vector&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;string&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;thread&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;atomic&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;map&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7"><highlight class="normal"></highlight></codeline>
<codeline lineno="8"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;cereal/messaging/messaging.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="9"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;cereal/visionipc/visionipc.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="10"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;cereal/visionipc/visionbuf.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="11"><highlight class="normal"></highlight></codeline>
<codeline lineno="12"><highlight class="normal">std::string<sp/>get_endpoint_name(std::string<sp/>name,<sp/>VisionStreamType<sp/>type);</highlight></codeline>
<codeline lineno="13"><highlight class="normal"></highlight></codeline>
<codeline lineno="14" refid="class_vision_ipc_server" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal"><ref refid="class_vision_ipc_server" kindref="compound">VisionIpcServer</ref><sp/>{</highlight></codeline>
<codeline lineno="15"><highlight class="normal"><sp/></highlight><highlight class="keyword">private</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="16"><highlight class="normal"><sp/><sp/>cl_device_id<sp/>device_id<sp/>=<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="17"><highlight class="normal"><sp/><sp/>cl_context<sp/>ctx<sp/>=<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="18"><highlight class="normal"><sp/><sp/>uint64_t<sp/>server_id;</highlight></codeline>
<codeline lineno="19"><highlight class="normal"></highlight></codeline>
<codeline lineno="20"><highlight class="normal"><sp/><sp/>std::atomic&lt;bool&gt;<sp/>should_exit<sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="21"><highlight class="normal"><sp/><sp/>std::string<sp/>name;</highlight></codeline>
<codeline lineno="22"><highlight class="normal"><sp/><sp/>std::thread<sp/>listener_thread;</highlight></codeline>
<codeline lineno="23"><highlight class="normal"></highlight></codeline>
<codeline lineno="24"><highlight class="normal"><sp/><sp/>std::map&lt;VisionStreamType,<sp/>std::atomic&lt;size_t&gt;<sp/>&gt;<sp/>cur_idx;</highlight></codeline>
<codeline lineno="25"><highlight class="normal"><sp/><sp/>std::map&lt;VisionStreamType,<sp/>std::vector&lt;VisionBuf*&gt;<sp/>&gt;<sp/>buffers;</highlight></codeline>
<codeline lineno="26"><highlight class="normal"></highlight></codeline>
<codeline lineno="27"><highlight class="normal"><sp/><sp/>Context<sp/>*<sp/>msg_ctx;</highlight></codeline>
<codeline lineno="28"><highlight class="normal"><sp/><sp/>std::map&lt;VisionStreamType,<sp/>PubSocket*&gt;<sp/>sockets;</highlight></codeline>
<codeline lineno="29"><highlight class="normal"></highlight></codeline>
<codeline lineno="30"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>listener(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="31"><highlight class="normal"></highlight></codeline>
<codeline lineno="32"><highlight class="normal"><sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="33"><highlight class="normal"><sp/><sp/><ref refid="class_vision_ipc_server" kindref="compound">VisionIpcServer</ref>(std::string<sp/>name,<sp/>cl_device_id<sp/>device_id=</highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">,<sp/>cl_context<sp/>ctx=</highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="34"><highlight class="normal"><sp/><sp/>~<ref refid="class_vision_ipc_server" kindref="compound">VisionIpcServer</ref>();</highlight></codeline>
<codeline lineno="35"><highlight class="normal"></highlight></codeline>
<codeline lineno="36"><highlight class="normal"><sp/><sp/><ref refid="class_vision_buf" kindref="compound">VisionBuf</ref><sp/>*<sp/>get_buffer(VisionStreamType<sp/>type);</highlight></codeline>
<codeline lineno="37"><highlight class="normal"></highlight></codeline>
<codeline lineno="38"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>create_buffers(VisionStreamType<sp/>type,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>num_buffers,<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>rgb,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>width,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>height);</highlight></codeline>
<codeline lineno="39"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>create_buffers_with_sizes(VisionStreamType<sp/>type,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>num_buffers,<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>rgb,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>width,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>height,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>size,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>stride,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>uv_offset);</highlight></codeline>
<codeline lineno="40"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>send(<ref refid="class_vision_buf" kindref="compound">VisionBuf</ref><sp/>*<sp/>buf,<sp/>VisionIpcBufExtra<sp/>*<sp/>extra,<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>sync=</highlight><highlight class="keyword">true</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="41"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>start_listener();</highlight></codeline>
<codeline lineno="42"><highlight class="normal">};</highlight></codeline>
    </programlisting>
    <location file="/tmp/openpilot/cereal/visionipc/visionipc_server.h"/>
  </compounddef>
</doxygen>
