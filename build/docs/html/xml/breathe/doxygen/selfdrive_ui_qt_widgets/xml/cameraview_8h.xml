<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.17">
  <compounddef id="cameraview_8h" kind="file" language="C++">
    <compoundname>cameraview.h</compoundname>
    <includes local="no">deque</includes>
    <includes local="no">map</includes>
    <includes local="no">memory</includes>
    <includes local="no">mutex</includes>
    <includes local="no">set</includes>
    <includes local="no">string</includes>
    <includes local="no">utility</includes>
    <includes local="no">QOpenGLFunctions</includes>
    <includes local="no">QOpenGLShaderProgram</includes>
    <includes local="no">QOpenGLWidget</includes>
    <includes local="no">QThread</includes>
    <includes local="yes">cereal/visionipc/visionipc_client.h</includes>
    <includes local="yes">system/camerad/cameras/camera_common.h</includes>
    <includes local="yes">selfdrive/ui/ui.h</includes>
    <incdepgraph>
      <node id="14">
        <label>system/camerad/cameras/camera_common.h</label>
      </node>
      <node id="11">
        <label>QOpenGLWidget</label>
      </node>
      <node id="12">
        <label>QThread</label>
      </node>
      <node id="7">
        <label>string</label>
      </node>
      <node id="3">
        <label>map</label>
      </node>
      <node id="10">
        <label>QOpenGLShaderProgram</label>
      </node>
      <node id="15">
        <label>selfdrive/ui/ui.h</label>
      </node>
      <node id="8">
        <label>utility</label>
      </node>
      <node id="9">
        <label>QOpenGLFunctions</label>
      </node>
      <node id="13">
        <label>cereal/visionipc/visionipc_client.h</label>
      </node>
      <node id="2">
        <label>deque</label>
      </node>
      <node id="5">
        <label>mutex</label>
      </node>
      <node id="6">
        <label>set</label>
      </node>
      <node id="1">
        <label>/tmp/openpilot/selfdrive/ui/qt/widgets/cameraview.h</label>
        <link refid="cameraview_8h"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="6" relation="include">
        </childnode>
        <childnode refid="7" relation="include">
        </childnode>
        <childnode refid="8" relation="include">
        </childnode>
        <childnode refid="9" relation="include">
        </childnode>
        <childnode refid="10" relation="include">
        </childnode>
        <childnode refid="11" relation="include">
        </childnode>
        <childnode refid="12" relation="include">
        </childnode>
        <childnode refid="13" relation="include">
        </childnode>
        <childnode refid="14" relation="include">
        </childnode>
        <childnode refid="15" relation="include">
        </childnode>
      </node>
      <node id="4">
        <label>memory</label>
      </node>
    </incdepgraph>
    <innerclass refid="class_camera_widget" prot="public">CameraWidget</innerclass>
      <sectiondef kind="var">
      <memberdef kind="variable" id="cameraview_8h_1a1278c21bc7313e2fe71a7b5641be859a" prot="public" static="no" mutable="no">
        <type>const int</type>
        <definition>const int FRAME_BUFFER_SIZE</definition>
        <argsstring></argsstring>
        <name>FRAME_BUFFER_SIZE</name>
        <initializer>= 5</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/tmp/openpilot/selfdrive/ui/qt/widgets/cameraview.h" line="29" column="11" bodyfile="/tmp/openpilot/selfdrive/ui/qt/widgets/cameraview.h" bodystart="29" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="func">
      <memberdef kind="function" id="cameraview_8h_1a677d3672edc3056e33f607d8438c51f2" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>Q_DECLARE_METATYPE</definition>
        <argsstring>(std::set&lt; VisionStreamType &gt;)</argsstring>
        <name>Q_DECLARE_METATYPE</name>
        <param>
          <type>std::set&lt; VisionStreamType &gt;</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/tmp/openpilot/selfdrive/ui/qt/widgets/cameraview.h" line="104" column="1" declfile="/tmp/openpilot/selfdrive/ui/qt/widgets/cameraview.h" declline="104" declcolumn="1"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="preprocessor">#pragma<sp/>once</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2"><highlight class="normal"></highlight></codeline>
<codeline lineno="3"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;deque&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;map&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;memory&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;mutex&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;set&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="8"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;string&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="9"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;utility&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="10"><highlight class="normal"></highlight></codeline>
<codeline lineno="11"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;QOpenGLFunctions&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="12"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;QOpenGLShaderProgram&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="13"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;QOpenGLWidget&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="14"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;QThread&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="15"><highlight class="normal"></highlight></codeline>
<codeline lineno="16"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>QCOM2</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="17"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>EGL_EGLEXT_PROTOTYPES</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="18"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>EGL_NO_X11</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="19"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>GL_TEXTURE_EXTERNAL_OES<sp/>0x8D65</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="20"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;EGL/egl.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="21"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;EGL/eglext.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="22"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;drm/drm_fourcc.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="23"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="24"><highlight class="normal"></highlight></codeline>
<codeline lineno="25"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;cereal/visionipc/visionipc_client.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="26"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;system/camerad/cameras/camera_common.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="27"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;selfdrive/ui/ui.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="28"><highlight class="normal"></highlight></codeline>
<codeline lineno="29"><highlight class="normal"></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>FRAME_BUFFER_SIZE<sp/>=<sp/>5;</highlight></codeline>
<codeline lineno="30"><highlight class="normal">static_assert(FRAME_BUFFER_SIZE<sp/>&lt;=<sp/>YUV_BUFFER_COUNT);</highlight></codeline>
<codeline lineno="31"><highlight class="normal"></highlight></codeline>
<codeline lineno="32" refid="class_camera_widget" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal"><ref refid="class_camera_widget" kindref="compound">CameraWidget</ref><sp/>:<sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal"><sp/>QOpenGLWidget,<sp/></highlight><highlight class="keyword">protected</highlight><highlight class="normal"><sp/>QOpenGLFunctions<sp/>{</highlight></codeline>
<codeline lineno="33"><highlight class="normal"><sp/><sp/>Q_OBJECT</highlight></codeline>
<codeline lineno="34"><highlight class="normal"></highlight></codeline>
<codeline lineno="35"><highlight class="normal"></highlight><highlight class="keyword">public</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="36"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/>QOpenGLWidget::QOpenGLWidget;</highlight></codeline>
<codeline lineno="37"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">explicit</highlight><highlight class="normal"><sp/><ref refid="class_camera_widget" kindref="compound">CameraWidget</ref>(std::string<sp/>stream_name,<sp/>VisionStreamType<sp/>stream_type,<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>zoom,<sp/>QWidget*<sp/>parent<sp/>=<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="38"><highlight class="normal"><sp/><sp/>~<ref refid="class_camera_widget" kindref="compound">CameraWidget</ref>();</highlight></codeline>
<codeline lineno="39"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>setBackgroundColor(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>QColor<sp/>&amp;color)<sp/>{<sp/>bg<sp/>=<sp/>color;<sp/>}</highlight></codeline>
<codeline lineno="40"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>setFrameId(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>frame_id)<sp/>{<sp/>draw_frame_id<sp/>=<sp/>frame_id;<sp/>}</highlight></codeline>
<codeline lineno="41"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>setStreamType(VisionStreamType<sp/>type)<sp/>{<sp/>requested_stream_type<sp/>=<sp/>type;<sp/>}</highlight></codeline>
<codeline lineno="42"><highlight class="normal"><sp/><sp/>VisionStreamType<sp/>getStreamType()<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>active_stream_type;<sp/>}</highlight></codeline>
<codeline lineno="43"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>stopVipcThread();</highlight></codeline>
<codeline lineno="44"><highlight class="normal"></highlight></codeline>
<codeline lineno="45"><highlight class="normal">signals:</highlight></codeline>
<codeline lineno="46"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>clicked();</highlight></codeline>
<codeline lineno="47"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>vipcThreadConnected(VisionIpcClient<sp/>*);</highlight></codeline>
<codeline lineno="48"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>vipcThreadFrameReceived();</highlight></codeline>
<codeline lineno="49"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>vipcAvailableStreamsUpdated(std::set&lt;VisionStreamType&gt;);</highlight></codeline>
<codeline lineno="50"><highlight class="normal"></highlight></codeline>
<codeline lineno="51"><highlight class="normal"></highlight><highlight class="keyword">protected</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="52"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>paintGL()<sp/></highlight><highlight class="keyword">override</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="53"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>initializeGL()<sp/></highlight><highlight class="keyword">override</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="54"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>resizeGL(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>w,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>h)</highlight><highlight class="keyword"><sp/>override<sp/></highlight><highlight class="normal">{<sp/>updateFrameMat();<sp/>}</highlight></codeline>
<codeline lineno="55"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>showEvent(QShowEvent<sp/>*event)<sp/></highlight><highlight class="keyword">override</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="56"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>mouseReleaseEvent(QMouseEvent<sp/>*event)</highlight><highlight class="keyword"><sp/>override<sp/></highlight><highlight class="normal">{<sp/>emit<sp/>clicked();<sp/>}</highlight></codeline>
<codeline lineno="57"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">virtual</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>updateFrameMat();</highlight></codeline>
<codeline lineno="58"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>updateCalibration(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>mat3<sp/>&amp;calib);</highlight></codeline>
<codeline lineno="59"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>vipcThread();</highlight></codeline>
<codeline lineno="60"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>clearFrames();</highlight></codeline>
<codeline lineno="61"><highlight class="normal"></highlight></codeline>
<codeline lineno="62"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>glWidth();</highlight></codeline>
<codeline lineno="63"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>glHeight();</highlight></codeline>
<codeline lineno="64"><highlight class="normal"></highlight></codeline>
<codeline lineno="65"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>zoomed_view;</highlight></codeline>
<codeline lineno="66"><highlight class="normal"><sp/><sp/>GLuint<sp/>frame_vao,<sp/>frame_vbo,<sp/>frame_ibo;</highlight></codeline>
<codeline lineno="67"><highlight class="normal"><sp/><sp/>GLuint<sp/>textures[2];</highlight></codeline>
<codeline lineno="68"><highlight class="normal"><sp/><sp/>mat4<sp/>frame_mat<sp/>=<sp/>{};</highlight></codeline>
<codeline lineno="69"><highlight class="normal"><sp/><sp/>std::unique_ptr&lt;QOpenGLShaderProgram&gt;<sp/>program;</highlight></codeline>
<codeline lineno="70"><highlight class="normal"><sp/><sp/>QColor<sp/>bg<sp/>=<sp/>QColor(</highlight><highlight class="stringliteral">&quot;#000000&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="71"><highlight class="normal"></highlight></codeline>
<codeline lineno="72"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>QCOM2</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="73"><highlight class="normal"><sp/><sp/>EGLDisplay<sp/>egl_display;</highlight></codeline>
<codeline lineno="74"><highlight class="normal"><sp/><sp/>std::map&lt;int,<sp/>EGLImageKHR&gt;<sp/>egl_images;</highlight></codeline>
<codeline lineno="75"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="76"><highlight class="normal"></highlight></codeline>
<codeline lineno="77"><highlight class="normal"><sp/><sp/>std::string<sp/>stream_name;</highlight></codeline>
<codeline lineno="78"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>stream_width<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="79"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>stream_height<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="80"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>stream_stride<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="81"><highlight class="normal"><sp/><sp/>std::atomic&lt;VisionStreamType&gt;<sp/>active_stream_type;</highlight></codeline>
<codeline lineno="82"><highlight class="normal"><sp/><sp/>std::atomic&lt;VisionStreamType&gt;<sp/>requested_stream_type;</highlight></codeline>
<codeline lineno="83"><highlight class="normal"><sp/><sp/>std::set&lt;VisionStreamType&gt;<sp/>available_streams;</highlight></codeline>
<codeline lineno="84"><highlight class="normal"><sp/><sp/>QThread<sp/>*vipc_thread<sp/>=<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="85"><highlight class="normal"></highlight></codeline>
<codeline lineno="86"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Calibration</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="87"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>x_offset<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="88"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>y_offset<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="89"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>zoom<sp/>=<sp/>1.0;</highlight></codeline>
<codeline lineno="90"><highlight class="normal"><sp/><sp/>mat3<sp/>calibration<sp/>=<sp/>DEFAULT_CALIBRATION;</highlight></codeline>
<codeline lineno="91"><highlight class="normal"><sp/><sp/>mat3<sp/>intrinsic_matrix<sp/>=<sp/>FCAM_INTRINSIC_MATRIX;</highlight></codeline>
<codeline lineno="92"><highlight class="normal"></highlight></codeline>
<codeline lineno="93"><highlight class="normal"><sp/><sp/>std::recursive_mutex<sp/>frame_lock;</highlight></codeline>
<codeline lineno="94"><highlight class="normal"><sp/><sp/>std::deque&lt;std::pair&lt;uint32_t,<sp/>VisionBuf*&gt;&gt;<sp/>frames;</highlight></codeline>
<codeline lineno="95"><highlight class="normal"><sp/><sp/>uint32_t<sp/>draw_frame_id<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="96"><highlight class="normal"><sp/><sp/>uint32_t<sp/>prev_frame_id<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="97"><highlight class="normal"></highlight></codeline>
<codeline lineno="98"><highlight class="normal"></highlight><highlight class="keyword">protected</highlight><highlight class="normal"><sp/>slots:</highlight></codeline>
<codeline lineno="99"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>vipcConnected(VisionIpcClient<sp/>*vipc_client);</highlight></codeline>
<codeline lineno="100"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>vipcFrameReceived();</highlight></codeline>
<codeline lineno="101"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>availableStreamsUpdated(std::set&lt;VisionStreamType&gt;<sp/>streams);</highlight></codeline>
<codeline lineno="102"><highlight class="normal">};</highlight></codeline>
<codeline lineno="103"><highlight class="normal"></highlight></codeline>
<codeline lineno="104"><highlight class="normal">Q_DECLARE_METATYPE(std::set&lt;VisionStreamType&gt;);</highlight></codeline>
    </programlisting>
    <location file="/tmp/openpilot/selfdrive/ui/qt/widgets/cameraview.h"/>
  </compounddef>
</doxygen>
