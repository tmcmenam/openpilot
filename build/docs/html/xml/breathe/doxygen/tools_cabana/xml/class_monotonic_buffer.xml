<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.17">
  <compounddef id="class_monotonic_buffer" kind="class" language="C++" prot="public">
    <compoundname>MonotonicBuffer</compoundname>
      <sectiondef kind="private-attrib">
      <memberdef kind="variable" id="class_monotonic_buffer_1a9aae9b7ad42a99f31139177706e350fb" prot="private" static="no" mutable="no">
        <type>void *</type>
        <definition>void* MonotonicBuffer::current_buf</definition>
        <argsstring></argsstring>
        <name>current_buf</name>
        <initializer>= nullptr</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/tmp/openpilot/tools/cabana/util.h" line="173" column="8" bodyfile="/tmp/openpilot/tools/cabana/util.h" bodystart="173" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_monotonic_buffer_1a387ee300b65d2ae17bdae6a58c85aa0e" prot="private" static="no" mutable="no">
        <type>size_t</type>
        <definition>size_t MonotonicBuffer::next_buffer_size</definition>
        <argsstring></argsstring>
        <name>next_buffer_size</name>
        <initializer>= 0</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/tmp/openpilot/tools/cabana/util.h" line="174" column="10" bodyfile="/tmp/openpilot/tools/cabana/util.h" bodystart="174" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_monotonic_buffer_1a2859f87fb14b53d17a67b9a841706e6d" prot="private" static="no" mutable="no">
        <type>size_t</type>
        <definition>size_t MonotonicBuffer::available</definition>
        <argsstring></argsstring>
        <name>available</name>
        <initializer>= 0</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/tmp/openpilot/tools/cabana/util.h" line="175" column="10" bodyfile="/tmp/openpilot/tools/cabana/util.h" bodystart="175" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_monotonic_buffer_1a2cee619be03c1064dfeb70259daecf05" prot="private" static="no" mutable="no">
        <type>std::deque&lt; void * &gt;</type>
        <definition>std::deque&lt;void *&gt; MonotonicBuffer::buffers</definition>
        <argsstring></argsstring>
        <name>buffers</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/tmp/openpilot/tools/cabana/util.h" line="176" column="14" bodyfile="/tmp/openpilot/tools/cabana/util.h" bodystart="176" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="private-static-attrib">
      <memberdef kind="variable" id="class_monotonic_buffer_1a266ff736bffa675a596de3a2af77c0c2" prot="private" static="yes" constexpr="yes" mutable="no">
        <type>constexpr float</type>
        <definition>constexpr float MonotonicBuffer::growth_factor</definition>
        <argsstring></argsstring>
        <name>growth_factor</name>
        <initializer>= 1.5</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/tmp/openpilot/tools/cabana/util.h" line="177" column="26" bodyfile="/tmp/openpilot/tools/cabana/util.h" bodystart="177" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="class_monotonic_buffer_1affd3b2ea3f4177e076d229e99dc75542" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type></type>
        <definition>MonotonicBuffer::MonotonicBuffer</definition>
        <argsstring>(size_t initial_size)</argsstring>
        <name>MonotonicBuffer</name>
        <param>
          <type>size_t</type>
          <declname>initial_size</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/tmp/openpilot/tools/cabana/util.h" line="167" column="3" bodyfile="/tmp/openpilot/tools/cabana/util.h" bodystart="167" bodyend="167"/>
      </memberdef>
      <memberdef kind="function" id="class_monotonic_buffer_1a3c14e6082270e91f92eac521be687570" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>MonotonicBuffer::~MonotonicBuffer</definition>
        <argsstring>()</argsstring>
        <name>~MonotonicBuffer</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/tmp/openpilot/tools/cabana/util.h" line="168" column="3"/>
      </memberdef>
      <memberdef kind="function" id="class_monotonic_buffer_1a1662d60706b7dce799b4474541207673" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void *</type>
        <definition>void* MonotonicBuffer::allocate</definition>
        <argsstring>(size_t bytes, size_t alignment=16ul)</argsstring>
        <name>allocate</name>
        <param>
          <type>size_t</type>
          <declname>bytes</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>alignment</declname>
          <defval>16ul</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/tmp/openpilot/tools/cabana/util.h" line="169" column="8"/>
      </memberdef>
      <memberdef kind="function" id="class_monotonic_buffer_1ad1844a603f989a28f74271b6a0b5f813" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void MonotonicBuffer::deallocate</definition>
        <argsstring>(void *p)</argsstring>
        <name>deallocate</name>
        <param>
          <type>void *</type>
          <declname>p</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/tmp/openpilot/tools/cabana/util.h" line="170" column="8" bodyfile="/tmp/openpilot/tools/cabana/util.h" bodystart="170" bodyend="170"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <location file="/tmp/openpilot/tools/cabana/util.h" line="165" column="22" bodyfile="/tmp/openpilot/tools/cabana/util.h" bodystart="165" bodyend="178"/>
    <listofallmembers>
      <member refid="class_monotonic_buffer_1a1662d60706b7dce799b4474541207673" prot="public" virt="non-virtual"><scope>MonotonicBuffer</scope><name>allocate</name></member>
      <member refid="class_monotonic_buffer_1a2859f87fb14b53d17a67b9a841706e6d" prot="private" virt="non-virtual"><scope>MonotonicBuffer</scope><name>available</name></member>
      <member refid="class_monotonic_buffer_1a2cee619be03c1064dfeb70259daecf05" prot="private" virt="non-virtual"><scope>MonotonicBuffer</scope><name>buffers</name></member>
      <member refid="class_monotonic_buffer_1a9aae9b7ad42a99f31139177706e350fb" prot="private" virt="non-virtual"><scope>MonotonicBuffer</scope><name>current_buf</name></member>
      <member refid="class_monotonic_buffer_1ad1844a603f989a28f74271b6a0b5f813" prot="public" virt="non-virtual"><scope>MonotonicBuffer</scope><name>deallocate</name></member>
      <member refid="class_monotonic_buffer_1a266ff736bffa675a596de3a2af77c0c2" prot="private" virt="non-virtual"><scope>MonotonicBuffer</scope><name>growth_factor</name></member>
      <member refid="class_monotonic_buffer_1affd3b2ea3f4177e076d229e99dc75542" prot="public" virt="non-virtual"><scope>MonotonicBuffer</scope><name>MonotonicBuffer</name></member>
      <member refid="class_monotonic_buffer_1a387ee300b65d2ae17bdae6a58c85aa0e" prot="private" virt="non-virtual"><scope>MonotonicBuffer</scope><name>next_buffer_size</name></member>
      <member refid="class_monotonic_buffer_1a3c14e6082270e91f92eac521be687570" prot="public" virt="non-virtual"><scope>MonotonicBuffer</scope><name>~MonotonicBuffer</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
