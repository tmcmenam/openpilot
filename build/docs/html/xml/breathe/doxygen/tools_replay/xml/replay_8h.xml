<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.17">
  <compounddef id="replay_8h" kind="file" language="C++">
    <compoundname>replay.h</compoundname>
    <includes local="no">algorithm</includes>
    <includes local="no">map</includes>
    <includes local="no">memory</includes>
    <includes local="no">optional</includes>
    <includes local="no">set</includes>
    <includes local="no">string</includes>
    <includes local="no">tuple</includes>
    <includes local="no">vector</includes>
    <includes local="no">utility</includes>
    <includes local="no">QThread</includes>
    <includes refid="camera_8h" local="yes">tools/replay/camera.h</includes>
    <includes refid="route_8h" local="yes">tools/replay/route.h</includes>
    <includedby refid="consoleui_8h" local="yes">/tmp/openpilot/tools/replay/consoleui.h</includedby>
    <incdepgraph>
      <node id="21">
        <label>libavformat/avformat.h</label>
      </node>
      <node id="19">
        <label>atomic</label>
      </node>
      <node id="29">
        <label>functional</label>
      </node>
      <node id="25">
        <label>tools/replay/route.h</label>
        <link refid="route_8h_source"/>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="6" relation="include">
        </childnode>
        <childnode refid="7" relation="include">
        </childnode>
        <childnode refid="26" relation="include">
        </childnode>
        <childnode refid="27" relation="include">
        </childnode>
        <childnode refid="16" relation="include">
        </childnode>
        <childnode refid="22" relation="include">
        </childnode>
        <childnode refid="28" relation="include">
        </childnode>
      </node>
      <node id="15">
        <label>common/queue.h</label>
      </node>
      <node id="22">
        <label>tools/replay/logreader.h</label>
        <link refid="logreader_8h_source"/>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="6" relation="include">
        </childnode>
        <childnode refid="7" relation="include">
        </childnode>
        <childnode refid="9" relation="include">
        </childnode>
        <childnode refid="23" relation="include">
        </childnode>
        <childnode refid="24" relation="include">
        </childnode>
        <childnode refid="18" relation="include">
        </childnode>
      </node>
      <node id="24">
        <label>system/camerad/cameras/camera_common.h</label>
      </node>
      <node id="26">
        <label>QDateTime</label>
      </node>
      <node id="28">
        <label>tools/replay/util.h</label>
        <link refid="util_8h_source"/>
        <childnode refid="19" relation="include">
        </childnode>
        <childnode refid="29" relation="include">
        </childnode>
        <childnode refid="7" relation="include">
        </childnode>
      </node>
      <node id="1">
        <label>/tmp/openpilot/tools/replay/replay.h</label>
        <link refid="replay_8h"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="6" relation="include">
        </childnode>
        <childnode refid="7" relation="include">
        </childnode>
        <childnode refid="8" relation="include">
        </childnode>
        <childnode refid="9" relation="include">
        </childnode>
        <childnode refid="10" relation="include">
        </childnode>
        <childnode refid="11" relation="include">
        </childnode>
        <childnode refid="12" relation="include">
        </childnode>
        <childnode refid="25" relation="include">
        </childnode>
      </node>
      <node id="11">
        <label>QThread</label>
      </node>
      <node id="14">
        <label>cereal/visionipc/visionipc_server.h</label>
      </node>
      <node id="7">
        <label>string</label>
      </node>
      <node id="3">
        <label>map</label>
      </node>
      <node id="18">
        <label>tools/replay/filereader.h</label>
        <link refid="filereader_8h_source"/>
        <childnode refid="19" relation="include">
        </childnode>
        <childnode refid="7" relation="include">
        </childnode>
      </node>
      <node id="8">
        <label>tuple</label>
      </node>
      <node id="5">
        <label>optional</label>
      </node>
      <node id="13">
        <label>unistd.h</label>
      </node>
      <node id="9">
        <label>vector</label>
      </node>
      <node id="27">
        <label>QFutureSynchronizer</label>
      </node>
      <node id="17">
        <label>cereal/visionipc/visionbuf.h</label>
      </node>
      <node id="10">
        <label>utility</label>
      </node>
      <node id="20">
        <label>libavcodec/avcodec.h</label>
      </node>
      <node id="16">
        <label>tools/replay/framereader.h</label>
        <link refid="framereader_8h_source"/>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="7" relation="include">
        </childnode>
        <childnode refid="9" relation="include">
        </childnode>
        <childnode refid="17" relation="include">
        </childnode>
        <childnode refid="18" relation="include">
        </childnode>
        <childnode refid="20" relation="include">
        </childnode>
        <childnode refid="21" relation="include">
        </childnode>
      </node>
      <node id="12">
        <label>tools/replay/camera.h</label>
        <link refid="camera_8h_source"/>
        <childnode refid="13" relation="include">
        </childnode>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="8" relation="include">
        </childnode>
        <childnode refid="10" relation="include">
        </childnode>
        <childnode refid="14" relation="include">
        </childnode>
        <childnode refid="15" relation="include">
        </childnode>
        <childnode refid="16" relation="include">
        </childnode>
        <childnode refid="22" relation="include">
        </childnode>
      </node>
      <node id="6">
        <label>set</label>
      </node>
      <node id="2">
        <label>algorithm</label>
      </node>
      <node id="23">
        <label>cereal/gen/cpp/log.capnp.h</label>
      </node>
      <node id="4">
        <label>memory</label>
      </node>
    </incdepgraph>
    <invincdepgraph>
      <node id="1">
        <label>/tmp/openpilot/tools/replay/replay.h</label>
        <link refid="replay_8h"/>
        <childnode refid="2" relation="include">
        </childnode>
      </node>
      <node id="2">
        <label>/tmp/openpilot/tools/replay/consoleui.h</label>
        <link refid="consoleui_8h_source"/>
      </node>
    </invincdepgraph>
    <innerclass refid="class_replay" prot="public">Replay</innerclass>
      <sectiondef kind="enum">
      <memberdef kind="enum" id="replay_8h_1ad4b75b5ae6eb60026ab78168acf4fd69" prot="public" static="no" strong="no">
        <type></type>
        <name>REPLAY_FLAGS</name>
        <enumvalue id="replay_8h_1ad4b75b5ae6eb60026ab78168acf4fd69ade5b2165065fe5c064abc2ff1300d173" prot="public">
          <name>REPLAY_FLAG_NONE</name>
          <initializer>= 0x0000</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="replay_8h_1ad4b75b5ae6eb60026ab78168acf4fd69a6e9fa1e237a3b8f1f6df3833c9eeb16d" prot="public">
          <name>REPLAY_FLAG_DCAM</name>
          <initializer>= 0x0002</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="replay_8h_1ad4b75b5ae6eb60026ab78168acf4fd69a216726fcca0879e099e535bf2950d2f3" prot="public">
          <name>REPLAY_FLAG_ECAM</name>
          <initializer>= 0x0004</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="replay_8h_1ad4b75b5ae6eb60026ab78168acf4fd69a8ec3f0ef491bb2605070d00a5c7c32db" prot="public">
          <name>REPLAY_FLAG_NO_LOOP</name>
          <initializer>= 0x0010</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="replay_8h_1ad4b75b5ae6eb60026ab78168acf4fd69a0e402bd7189b3189be059c8f489e7590" prot="public">
          <name>REPLAY_FLAG_NO_FILE_CACHE</name>
          <initializer>= 0x0020</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="replay_8h_1ad4b75b5ae6eb60026ab78168acf4fd69af4bed7bed41ed3b8801d7003b8850852" prot="public">
          <name>REPLAY_FLAG_QCAMERA</name>
          <initializer>= 0x0040</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="replay_8h_1ad4b75b5ae6eb60026ab78168acf4fd69ae01197918ff7222cfa9af2cc2152e194" prot="public">
          <name>REPLAY_FLAG_NO_HW_DECODER</name>
          <initializer>= 0x0100</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="replay_8h_1ad4b75b5ae6eb60026ab78168acf4fd69aedeea1c97f3bb106b026d1e561d0e56b" prot="public">
          <name>REPLAY_FLAG_FULL_SPEED</name>
          <initializer>= 0x0200</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="replay_8h_1ad4b75b5ae6eb60026ab78168acf4fd69ab3c1494e58ca528827855ce42acefff0" prot="public">
          <name>REPLAY_FLAG_NO_VIPC</name>
          <initializer>= 0x0400</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="replay_8h_1ad4b75b5ae6eb60026ab78168acf4fd69a393c38932c3a2b6ab1f155763ca98dbc" prot="public">
          <name>REPLAY_FLAG_ALL_SERVICES</name>
          <initializer>= 0x0800</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/tmp/openpilot/tools/replay/replay.h" line="23" column="18" bodyfile="/tmp/openpilot/tools/replay/replay.h" bodystart="23" bodyend="34"/>
      </memberdef>
      <memberdef kind="enum" id="replay_8h_1aac223127447069f40193d15ee0b2b4ea" prot="public" static="no" strong="yes">
        <type></type>
        <name>FindFlag</name>
        <enumvalue id="replay_8h_1aac223127447069f40193d15ee0b2b4eaaf97a20b2a5c6daf01970221c59c0d269" prot="public">
          <name>nextEngagement</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="replay_8h_1aac223127447069f40193d15ee0b2b4eaaa9de4da5e1c1e837c387dbf6ed475930" prot="public">
          <name>nextDisEngagement</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="replay_8h_1aac223127447069f40193d15ee0b2b4eaa4776655af72214b3b0919bc465640a9b" prot="public">
          <name>nextUserFlag</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="replay_8h_1aac223127447069f40193d15ee0b2b4eaabdfc1818ef17597e705ccf23e28fc854" prot="public">
          <name>nextInfo</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="replay_8h_1aac223127447069f40193d15ee0b2b4eaa5000a4a26134aef9dc0eccbe71f35590" prot="public">
          <name>nextWarning</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="replay_8h_1aac223127447069f40193d15ee0b2b4eaadf42b1e6f162ea629969845e9ede5d35" prot="public">
          <name>nextCritical</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/tmp/openpilot/tools/replay/replay.h" line="36" column="20" bodyfile="/tmp/openpilot/tools/replay/replay.h" bodystart="36" bodyend="43"/>
      </memberdef>
      <memberdef kind="enum" id="replay_8h_1a20a9a407b4026c965dc2626feede3650" prot="public" static="no" strong="yes">
        <type></type>
        <name>TimelineType</name>
        <enumvalue id="replay_8h_1a20a9a407b4026c965dc2626feede3650a6adf97f83acf6453d4a6a4b1070f3754" prot="public">
          <name>None</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="replay_8h_1a20a9a407b4026c965dc2626feede3650acc8ff50881a92c6da502af83e5736dfa" prot="public">
          <name>Engaged</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="replay_8h_1a20a9a407b4026c965dc2626feede3650a086e0d7ee63195adf868412676efe191" prot="public">
          <name>AlertInfo</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="replay_8h_1a20a9a407b4026c965dc2626feede3650a9024a0ce00cea599258d4d2e6f83e6ed" prot="public">
          <name>AlertWarning</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="replay_8h_1a20a9a407b4026c965dc2626feede3650a784baa87cd25bfbc165c1c2edcd00e03" prot="public">
          <name>AlertCritical</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="replay_8h_1a20a9a407b4026c965dc2626feede3650a6c4ec0bffa42824db387e8732ba6ca03" prot="public">
          <name>UserFlag</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/tmp/openpilot/tools/replay/replay.h" line="45" column="24" bodyfile="/tmp/openpilot/tools/replay/replay.h" bodystart="45" bodyend="45"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="typedef">
      <memberdef kind="typedef" id="replay_8h_1a247b7f39f3afd21ddbb69de523393d51" prot="public" static="no">
        <type>bool(*</type>
        <definition>typedef bool(* replayEventFilter) (const Event *, void *)</definition>
        <argsstring>)(const Event *, void *)</argsstring>
        <name>replayEventFilter</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/tmp/openpilot/tools/replay/replay.h" line="46" column="9" bodyfile="/tmp/openpilot/tools/replay/replay.h" bodystart="46" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="var">
      <memberdef kind="variable" id="replay_8h_1af3df048524fb0d1a966c71e729846c48" prot="public" static="no" mutable="no">
        <type>const QString</type>
        <definition>const QString DEMO_ROUTE</definition>
        <argsstring></argsstring>
        <name>DEMO_ROUTE</name>
        <initializer>= &quot;a2a0ccea32023010|2023-07-27--13-01-19&quot;</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/tmp/openpilot/tools/replay/replay.h" line="18" column="15" bodyfile="/tmp/openpilot/tools/replay/replay.h" bodystart="18" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="replay_8h_1a24208f368dc5e7aeee1e953d44b19ebb" prot="public" static="no" constexpr="yes" mutable="no">
        <type>constexpr int</type>
        <definition>constexpr int MIN_SEGMENTS_CACHE</definition>
        <argsstring></argsstring>
        <name>MIN_SEGMENTS_CACHE</name>
        <initializer>= 5</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/tmp/openpilot/tools/replay/replay.h" line="21" column="15" bodyfile="/tmp/openpilot/tools/replay/replay.h" bodystart="21" bodyend="-1"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="preprocessor">#pragma<sp/>once</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2"><highlight class="normal"></highlight></codeline>
<codeline lineno="3"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;algorithm&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;map&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;memory&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;optional&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;set&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="8"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;string&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="9"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;tuple&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="10"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;vector&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="11"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;utility&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="12"><highlight class="normal"></highlight></codeline>
<codeline lineno="13"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;QThread&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="14"><highlight class="normal"></highlight></codeline>
<codeline lineno="15"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;tools/replay/camera.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="16"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;tools/replay/route.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="17"><highlight class="normal"></highlight></codeline>
<codeline lineno="18"><highlight class="normal"></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>QString<sp/>DEMO_ROUTE<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;a2a0ccea32023010|2023-07-27--13-01-19&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="19"><highlight class="normal"></highlight></codeline>
<codeline lineno="20"><highlight class="normal"></highlight><highlight class="comment">//<sp/>one<sp/>segment<sp/>uses<sp/>about<sp/>100M<sp/>of<sp/>memory</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="21"><highlight class="normal">constexpr<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>MIN_SEGMENTS_CACHE<sp/>=<sp/>5;</highlight></codeline>
<codeline lineno="22"><highlight class="normal"></highlight></codeline>
<codeline lineno="23"><highlight class="normal"></highlight><highlight class="keyword">enum</highlight><highlight class="normal"><sp/>REPLAY_FLAGS<sp/>{</highlight></codeline>
<codeline lineno="24"><highlight class="normal"><sp/><sp/>REPLAY_FLAG_NONE<sp/>=<sp/>0x0000,</highlight></codeline>
<codeline lineno="25"><highlight class="normal"><sp/><sp/>REPLAY_FLAG_DCAM<sp/>=<sp/>0x0002,</highlight></codeline>
<codeline lineno="26"><highlight class="normal"><sp/><sp/>REPLAY_FLAG_ECAM<sp/>=<sp/>0x0004,</highlight></codeline>
<codeline lineno="27"><highlight class="normal"><sp/><sp/>REPLAY_FLAG_NO_LOOP<sp/>=<sp/>0x0010,</highlight></codeline>
<codeline lineno="28"><highlight class="normal"><sp/><sp/>REPLAY_FLAG_NO_FILE_CACHE<sp/>=<sp/>0x0020,</highlight></codeline>
<codeline lineno="29"><highlight class="normal"><sp/><sp/>REPLAY_FLAG_QCAMERA<sp/>=<sp/>0x0040,</highlight></codeline>
<codeline lineno="30"><highlight class="normal"><sp/><sp/>REPLAY_FLAG_NO_HW_DECODER<sp/>=<sp/>0x0100,</highlight></codeline>
<codeline lineno="31"><highlight class="normal"><sp/><sp/>REPLAY_FLAG_FULL_SPEED<sp/>=<sp/>0x0200,</highlight></codeline>
<codeline lineno="32"><highlight class="normal"><sp/><sp/>REPLAY_FLAG_NO_VIPC<sp/>=<sp/>0x0400,</highlight></codeline>
<codeline lineno="33"><highlight class="normal"><sp/><sp/>REPLAY_FLAG_ALL_SERVICES<sp/>=<sp/>0x0800,</highlight></codeline>
<codeline lineno="34"><highlight class="normal">};</highlight></codeline>
<codeline lineno="35"><highlight class="normal"></highlight></codeline>
<codeline lineno="36"><highlight class="normal"></highlight><highlight class="keyword">enum<sp/>class</highlight><highlight class="normal"><sp/>FindFlag<sp/>{</highlight></codeline>
<codeline lineno="37"><highlight class="normal"><sp/><sp/>nextEngagement,</highlight></codeline>
<codeline lineno="38"><highlight class="normal"><sp/><sp/>nextDisEngagement,</highlight></codeline>
<codeline lineno="39"><highlight class="normal"><sp/><sp/>nextUserFlag,</highlight></codeline>
<codeline lineno="40"><highlight class="normal"><sp/><sp/>nextInfo,</highlight></codeline>
<codeline lineno="41"><highlight class="normal"><sp/><sp/>nextWarning,</highlight></codeline>
<codeline lineno="42"><highlight class="normal"><sp/><sp/>nextCritical</highlight></codeline>
<codeline lineno="43"><highlight class="normal">};</highlight></codeline>
<codeline lineno="44"><highlight class="normal"></highlight></codeline>
<codeline lineno="45"><highlight class="normal"></highlight><highlight class="keyword">enum<sp/>class</highlight><highlight class="normal"><sp/>TimelineType<sp/>{<sp/>None,<sp/>Engaged,<sp/>AlertInfo,<sp/>AlertWarning,<sp/>AlertCritical,<sp/>UserFlag<sp/>};</highlight></codeline>
<codeline lineno="46"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/>bool<sp/>(*replayEventFilter)(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="class_event" kindref="compound">Event</ref><sp/>*,<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*);</highlight></codeline>
<codeline lineno="47"><highlight class="normal"></highlight></codeline>
<codeline lineno="48" refid="class_replay" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal"><ref refid="class_replay" kindref="compound">Replay</ref><sp/>:<sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal"><sp/>QObject<sp/>{</highlight></codeline>
<codeline lineno="49"><highlight class="normal"><sp/><sp/>Q_OBJECT</highlight></codeline>
<codeline lineno="50"><highlight class="normal"></highlight></codeline>
<codeline lineno="51"><highlight class="normal"></highlight><highlight class="keyword">public</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="52"><highlight class="normal"><sp/><sp/><ref refid="class_replay" kindref="compound">Replay</ref>(QString<sp/>route,<sp/>QStringList<sp/>allow,<sp/>QStringList<sp/>block,<sp/>QStringList<sp/>base_blacklist,<sp/>SubMaster<sp/>*sm<sp/>=<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="53"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>uint32_t<sp/>flags<sp/>=<sp/>REPLAY_FLAG_NONE,<sp/>QString<sp/>data_dir<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal">,<sp/>QObject<sp/>*parent<sp/>=<sp/>0);</highlight></codeline>
<codeline lineno="54"><highlight class="normal"><sp/><sp/>~<ref refid="class_replay" kindref="compound">Replay</ref>();</highlight></codeline>
<codeline lineno="55"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>load();</highlight></codeline>
<codeline lineno="56"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>start(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>seconds<sp/>=<sp/>0);</highlight></codeline>
<codeline lineno="57"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>stop();</highlight></codeline>
<codeline lineno="58"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>pause(</highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>pause);</highlight></codeline>
<codeline lineno="59"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>seekToFlag(FindFlag<sp/>flag);</highlight></codeline>
<codeline lineno="60"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>seekTo(</highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>seconds,<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>relative);</highlight></codeline>
<codeline lineno="61"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>isPaused()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>paused_;<sp/>}</highlight></codeline>
<codeline lineno="62"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>the<sp/>filter<sp/>is<sp/>called<sp/>in<sp/>streaming<sp/>thread.try<sp/>to<sp/>return<sp/>quickly<sp/>from<sp/>it<sp/>to<sp/>avoid<sp/>blocking<sp/>streaming.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="63"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>the<sp/>filter<sp/>function<sp/>must<sp/>return<sp/>true<sp/>if<sp/>the<sp/>event<sp/>should<sp/>be<sp/>filtered.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="64"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>otherwise<sp/>it<sp/>must<sp/>return<sp/>false.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="65"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>installEventFilter(replayEventFilter<sp/>filter,<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*opaque)<sp/>{</highlight></codeline>
<codeline lineno="66"><highlight class="normal"><sp/><sp/><sp/><sp/>filter_opaque<sp/>=<sp/>opaque;</highlight></codeline>
<codeline lineno="67"><highlight class="normal"><sp/><sp/><sp/><sp/>event_filter<sp/>=<sp/>filter;</highlight></codeline>
<codeline lineno="68"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="69"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>segmentCacheLimit()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>segment_cache_limit;<sp/>}</highlight></codeline>
<codeline lineno="70"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>setSegmentCacheLimit(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>n)<sp/>{<sp/>segment_cache_limit<sp/>=<sp/>std::max(MIN_SEGMENTS_CACHE,<sp/>n);<sp/>}</highlight></codeline>
<codeline lineno="71"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>hasFlag(REPLAY_FLAGS<sp/>flag)</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>flags_<sp/>&amp;<sp/>flag;<sp/>}</highlight></codeline>
<codeline lineno="72"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>addFlag(REPLAY_FLAGS<sp/>flag)<sp/>{<sp/>flags_<sp/>|=<sp/>flag;<sp/>}</highlight></codeline>
<codeline lineno="73"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>removeFlag(REPLAY_FLAGS<sp/>flag)<sp/>{<sp/>flags_<sp/>&amp;=<sp/>~flag;<sp/>}</highlight></codeline>
<codeline lineno="74"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="class_route" kindref="compound">Route</ref>*<sp/>route()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>route_.get();<sp/>}</highlight></codeline>
<codeline lineno="75"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>currentSeconds()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>double(cur_mono_time_<sp/>-<sp/>route_start_ts_)<sp/>/<sp/>1e9;<sp/>}</highlight></codeline>
<codeline lineno="76"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/>QDateTime<sp/>currentDateTime()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>route_-&gt;datetime().addSecs(currentSeconds());<sp/>}</highlight></codeline>
<codeline lineno="77"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/>uint64_t<sp/>routeStartTime()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>route_start_ts_;<sp/>}</highlight></codeline>
<codeline lineno="78"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>toSeconds(uint64_t<sp/>mono_time)</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(mono_time<sp/>-<sp/>route_start_ts_)<sp/>/<sp/>1e9;<sp/>}</highlight></codeline>
<codeline lineno="79"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>totalSeconds()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(!segments_.empty())<sp/>?<sp/>(segments_.rbegin()-&gt;first<sp/>+<sp/>1)<sp/>*<sp/>60<sp/>:<sp/>0;<sp/>}</highlight></codeline>
<codeline lineno="80"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>setSpeed(</highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>speed)<sp/>{<sp/>speed_<sp/>=<sp/>speed;<sp/>}</highlight></codeline>
<codeline lineno="81"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>getSpeed()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>speed_;<sp/>}</highlight></codeline>
<codeline lineno="82"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::vector&lt;Event<sp/>*&gt;<sp/>*events()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>events_.get();<sp/>}</highlight></codeline>
<codeline lineno="83"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::map&lt;int,<sp/>std::unique_ptr&lt;Segment&gt;&gt;<sp/>&amp;segments()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>segments_;<sp/>}</highlight></codeline>
<codeline lineno="84"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string<sp/>&amp;carFingerprint()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>car_fingerprint_;<sp/>}</highlight></codeline>
<codeline lineno="85"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::vector&lt;std::tuple&lt;double,<sp/>double,<sp/>TimelineType&gt;&gt;<sp/>getTimeline()<sp/>{</highlight></codeline>
<codeline lineno="86"><highlight class="normal"><sp/><sp/><sp/><sp/>std::lock_guard<sp/>lk(timeline_lock);</highlight></codeline>
<codeline lineno="87"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>timeline;</highlight></codeline>
<codeline lineno="88"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="89"><highlight class="normal"></highlight></codeline>
<codeline lineno="90"><highlight class="normal">signals:</highlight></codeline>
<codeline lineno="91"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>streamStarted();</highlight></codeline>
<codeline lineno="92"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>segmentsMerged();</highlight></codeline>
<codeline lineno="93"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>seekedTo(</highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>sec);</highlight></codeline>
<codeline lineno="94"><highlight class="normal"></highlight></codeline>
<codeline lineno="95"><highlight class="normal"></highlight><highlight class="keyword">protected</highlight><highlight class="normal"><sp/>slots:</highlight></codeline>
<codeline lineno="96"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>segmentLoadFinished(</highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>success);</highlight></codeline>
<codeline lineno="97"><highlight class="normal"></highlight></codeline>
<codeline lineno="98"><highlight class="normal"></highlight><highlight class="keyword">protected</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="99"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/>std::map&lt;int,<sp/>std::unique_ptr&lt;Segment&gt;&gt;<sp/>SegmentMap;</highlight></codeline>
<codeline lineno="100"><highlight class="normal"><sp/><sp/>std::optional&lt;uint64_t&gt;<sp/>find(FindFlag<sp/>flag);</highlight></codeline>
<codeline lineno="101"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>startStream(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="class_segment" kindref="compound">Segment</ref><sp/>*cur_segment);</highlight></codeline>
<codeline lineno="102"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>stream();</highlight></codeline>
<codeline lineno="103"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>setCurrentSegment(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>n);</highlight></codeline>
<codeline lineno="104"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>queueSegment();</highlight></codeline>
<codeline lineno="105"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>mergeSegments(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>SegmentMap::iterator<sp/>&amp;begin,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>SegmentMap::iterator<sp/>&amp;end);</highlight></codeline>
<codeline lineno="106"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>updateEvents(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::function&lt;</highlight><highlight class="keywordtype">bool</highlight><highlight class="normal">()&gt;&amp;<sp/>lambda);</highlight></codeline>
<codeline lineno="107"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>publishMessage(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="class_event" kindref="compound">Event</ref><sp/>*e);</highlight></codeline>
<codeline lineno="108"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>publishFrame(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="class_event" kindref="compound">Event</ref><sp/>*e);</highlight></codeline>
<codeline lineno="109"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>buildTimeline();</highlight></codeline>
<codeline lineno="110"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>isSegmentMerged(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>n)<sp/>{</highlight></codeline>
<codeline lineno="111"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>std::find(segments_merged_.begin(),<sp/>segments_merged_.end(),<sp/>n)<sp/>!=<sp/>segments_merged_.end();</highlight></codeline>
<codeline lineno="112"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="113"><highlight class="normal"></highlight></codeline>
<codeline lineno="114"><highlight class="normal"><sp/><sp/>QThread<sp/>*stream_thread_<sp/>=<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="115"><highlight class="normal"></highlight></codeline>
<codeline lineno="116"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>logs</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="117"><highlight class="normal"><sp/><sp/>std::mutex<sp/>stream_lock_;</highlight></codeline>
<codeline lineno="118"><highlight class="normal"><sp/><sp/>std::condition_variable<sp/>stream_cv_;</highlight></codeline>
<codeline lineno="119"><highlight class="normal"><sp/><sp/>std::atomic&lt;bool&gt;<sp/>updating_events_<sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="120"><highlight class="normal"><sp/><sp/>std::atomic&lt;int&gt;<sp/>current_segment_<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="121"><highlight class="normal"><sp/><sp/>SegmentMap<sp/>segments_;</highlight></codeline>
<codeline lineno="122"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>the<sp/>following<sp/>variables<sp/>must<sp/>be<sp/>protected<sp/>with<sp/>stream_lock_</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="123"><highlight class="normal"><sp/><sp/>std::atomic&lt;bool&gt;<sp/>exit_<sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="124"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>paused_<sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="125"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>events_updated_<sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="126"><highlight class="normal"><sp/><sp/>uint64_t<sp/>route_start_ts_<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="127"><highlight class="normal"><sp/><sp/>std::atomic&lt;uint64_t&gt;<sp/>cur_mono_time_<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="128"><highlight class="normal"><sp/><sp/>std::unique_ptr&lt;std::vector&lt;Event<sp/>*&gt;&gt;<sp/>events_;</highlight></codeline>
<codeline lineno="129"><highlight class="normal"><sp/><sp/>std::unique_ptr&lt;std::vector&lt;Event<sp/>*&gt;&gt;<sp/>new_events_;</highlight></codeline>
<codeline lineno="130"><highlight class="normal"><sp/><sp/>std::vector&lt;int&gt;<sp/>segments_merged_;</highlight></codeline>
<codeline lineno="131"><highlight class="normal"></highlight></codeline>
<codeline lineno="132"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>messaging</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="133"><highlight class="normal"><sp/><sp/>SubMaster<sp/>*sm<sp/>=<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="134"><highlight class="normal"><sp/><sp/>std::unique_ptr&lt;PubMaster&gt;<sp/>pm;</highlight></codeline>
<codeline lineno="135"><highlight class="normal"><sp/><sp/>std::vector&lt;const<sp/>char*&gt;<sp/>sockets_;</highlight></codeline>
<codeline lineno="136"><highlight class="normal"><sp/><sp/>std::unique_ptr&lt;Route&gt;<sp/>route_;</highlight></codeline>
<codeline lineno="137"><highlight class="normal"><sp/><sp/>std::unique_ptr&lt;CameraServer&gt;<sp/>camera_server_;</highlight></codeline>
<codeline lineno="138"><highlight class="normal"><sp/><sp/>std::atomic&lt;uint32_t&gt;<sp/>flags_<sp/>=<sp/>REPLAY_FLAG_NONE;</highlight></codeline>
<codeline lineno="139"><highlight class="normal"></highlight></codeline>
<codeline lineno="140"><highlight class="normal"><sp/><sp/>std::mutex<sp/>timeline_lock;</highlight></codeline>
<codeline lineno="141"><highlight class="normal"><sp/><sp/>QFuture&lt;void&gt;<sp/>timeline_future;</highlight></codeline>
<codeline lineno="142"><highlight class="normal"><sp/><sp/>std::vector&lt;std::tuple&lt;double,<sp/>double,<sp/>TimelineType&gt;&gt;<sp/>timeline;</highlight></codeline>
<codeline lineno="143"><highlight class="normal"><sp/><sp/>std::set&lt;cereal::Event::Which&gt;<sp/>allow_list;</highlight></codeline>
<codeline lineno="144"><highlight class="normal"><sp/><sp/>std::string<sp/>car_fingerprint_;</highlight></codeline>
<codeline lineno="145"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>speed_<sp/>=<sp/>1.0;</highlight></codeline>
<codeline lineno="146"><highlight class="normal"><sp/><sp/>replayEventFilter<sp/>event_filter<sp/>=<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="147"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*filter_opaque<sp/>=<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="148"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>segment_cache_limit<sp/>=<sp/>MIN_SEGMENTS_CACHE;</highlight></codeline>
<codeline lineno="149"><highlight class="normal">};</highlight></codeline>
    </programlisting>
    <location file="/tmp/openpilot/tools/replay/replay.h"/>
  </compounddef>
</doxygen>
