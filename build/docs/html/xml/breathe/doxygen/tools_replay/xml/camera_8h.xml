<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.17">
  <compounddef id="camera_8h" kind="file" language="C++">
    <compoundname>camera.h</compoundname>
    <includes local="no">unistd.h</includes>
    <includes local="no">memory</includes>
    <includes local="no">tuple</includes>
    <includes local="no">utility</includes>
    <includes local="yes">cereal/visionipc/visionipc_server.h</includes>
    <includes local="yes">common/queue.h</includes>
    <includes refid="framereader_8h" local="yes">tools/replay/framereader.h</includes>
    <includes refid="logreader_8h" local="yes">tools/replay/logreader.h</includes>
    <includedby refid="replay_8h" local="yes">/tmp/openpilot/tools/replay/replay.h</includedby>
    <incdepgraph>
      <node id="15">
        <label>libavformat/avformat.h</label>
      </node>
      <node id="13">
        <label>atomic</label>
      </node>
      <node id="7">
        <label>common/queue.h</label>
      </node>
      <node id="16">
        <label>tools/replay/logreader.h</label>
        <link refid="logreader_8h_source"/>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="17" relation="include">
        </childnode>
        <childnode refid="9" relation="include">
        </childnode>
        <childnode refid="10" relation="include">
        </childnode>
        <childnode refid="18" relation="include">
        </childnode>
        <childnode refid="19" relation="include">
        </childnode>
        <childnode refid="12" relation="include">
        </childnode>
      </node>
      <node id="19">
        <label>system/camerad/cameras/camera_common.h</label>
      </node>
      <node id="6">
        <label>cereal/visionipc/visionipc_server.h</label>
      </node>
      <node id="9">
        <label>string</label>
      </node>
      <node id="12">
        <label>tools/replay/filereader.h</label>
        <link refid="filereader_8h_source"/>
        <childnode refid="13" relation="include">
        </childnode>
        <childnode refid="9" relation="include">
        </childnode>
      </node>
      <node id="4">
        <label>tuple</label>
      </node>
      <node id="2">
        <label>unistd.h</label>
      </node>
      <node id="10">
        <label>vector</label>
      </node>
      <node id="11">
        <label>cereal/visionipc/visionbuf.h</label>
      </node>
      <node id="5">
        <label>utility</label>
      </node>
      <node id="14">
        <label>libavcodec/avcodec.h</label>
      </node>
      <node id="8">
        <label>tools/replay/framereader.h</label>
        <link refid="framereader_8h_source"/>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="9" relation="include">
        </childnode>
        <childnode refid="10" relation="include">
        </childnode>
        <childnode refid="11" relation="include">
        </childnode>
        <childnode refid="12" relation="include">
        </childnode>
        <childnode refid="14" relation="include">
        </childnode>
        <childnode refid="15" relation="include">
        </childnode>
      </node>
      <node id="1">
        <label>/tmp/openpilot/tools/replay/camera.h</label>
        <link refid="camera_8h"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="6" relation="include">
        </childnode>
        <childnode refid="7" relation="include">
        </childnode>
        <childnode refid="8" relation="include">
        </childnode>
        <childnode refid="16" relation="include">
        </childnode>
      </node>
      <node id="17">
        <label>set</label>
      </node>
      <node id="18">
        <label>cereal/gen/cpp/log.capnp.h</label>
      </node>
      <node id="3">
        <label>memory</label>
      </node>
    </incdepgraph>
    <invincdepgraph>
      <node id="2">
        <label>/tmp/openpilot/tools/replay/replay.h</label>
        <link refid="replay_8h_source"/>
        <childnode refid="3" relation="include">
        </childnode>
      </node>
      <node id="3">
        <label>/tmp/openpilot/tools/replay/consoleui.h</label>
        <link refid="consoleui_8h_source"/>
      </node>
      <node id="1">
        <label>/tmp/openpilot/tools/replay/camera.h</label>
        <link refid="camera_8h"/>
        <childnode refid="2" relation="include">
        </childnode>
      </node>
    </invincdepgraph>
    <innerclass refid="class_camera_server" prot="public">CameraServer</innerclass>
    <innerclass refid="struct_camera_server_1_1_camera" prot="protected">CameraServer::Camera</innerclass>
      <sectiondef kind="func">
      <memberdef kind="function" id="camera_8h_1a4d5ea041a944b504abe0d7b1a78ccaa9" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::tuple&lt; size_t, size_t, size_t &gt;</type>
        <definition>std::tuple&lt;size_t, size_t, size_t&gt; get_nv12_info</definition>
        <argsstring>(int width, int height)</argsstring>
        <name>get_nv12_info</name>
        <param>
          <type>int</type>
          <declname>width</declname>
        </param>
        <param>
          <type>int</type>
          <declname>height</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/tmp/openpilot/tools/replay/camera.h" line="14" column="12" declfile="/tmp/openpilot/tools/replay/camera.h" declline="14" declcolumn="12"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="preprocessor">#pragma<sp/>once</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2"><highlight class="normal"></highlight></codeline>
<codeline lineno="3"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;unistd.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4"><highlight class="normal"></highlight></codeline>
<codeline lineno="5"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;memory&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;tuple&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;utility&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="8"><highlight class="normal"></highlight></codeline>
<codeline lineno="9"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;cereal/visionipc/visionipc_server.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="10"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;common/queue.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="11"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;tools/replay/framereader.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="12"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;tools/replay/logreader.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="13"><highlight class="normal"></highlight></codeline>
<codeline lineno="14"><highlight class="normal">std::tuple&lt;size_t,<sp/>size_t,<sp/>size_t&gt;<sp/>get_nv12_info(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>width,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>height);</highlight></codeline>
<codeline lineno="15"><highlight class="normal"></highlight></codeline>
<codeline lineno="16" refid="class_camera_server" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal"><ref refid="class_camera_server" kindref="compound">CameraServer</ref><sp/>{</highlight></codeline>
<codeline lineno="17"><highlight class="normal"></highlight><highlight class="keyword">public</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="18"><highlight class="normal"><sp/><sp/><ref refid="class_camera_server" kindref="compound">CameraServer</ref>(std::pair&lt;int,<sp/>int&gt;<sp/>camera_size[MAX_CAMERAS]<sp/>=<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="19"><highlight class="normal"><sp/><sp/>~<ref refid="class_camera_server" kindref="compound">CameraServer</ref>();</highlight></codeline>
<codeline lineno="20"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>pushFrame(CameraType<sp/>type,<sp/><ref refid="class_frame_reader" kindref="compound">FrameReader</ref>*<sp/>fr,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>cereal::EncodeIndex::Reader&amp;<sp/>eidx);</highlight></codeline>
<codeline lineno="21"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>waitForSent();</highlight></codeline>
<codeline lineno="22"><highlight class="normal"></highlight></codeline>
<codeline lineno="23"><highlight class="normal"></highlight><highlight class="keyword">protected</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="24" refid="struct_camera_server_1_1_camera" refkind="compound"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="struct_camera_server_1_1_camera" kindref="compound">Camera</ref><sp/>{</highlight></codeline>
<codeline lineno="25"><highlight class="normal"><sp/><sp/><sp/><sp/>CameraType<sp/>type;</highlight></codeline>
<codeline lineno="26"><highlight class="normal"><sp/><sp/><sp/><sp/>VisionStreamType<sp/>stream_type;</highlight></codeline>
<codeline lineno="27"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>width;</highlight></codeline>
<codeline lineno="28"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>height;</highlight></codeline>
<codeline lineno="29"><highlight class="normal"><sp/><sp/><sp/><sp/>std::thread<sp/>thread;</highlight></codeline>
<codeline lineno="30"><highlight class="normal"><sp/><sp/><sp/><sp/>SafeQueue&lt;std::pair&lt;FrameReader*,<sp/>const<sp/>cereal::EncodeIndex::Reader&gt;&gt;<sp/>queue;</highlight></codeline>
<codeline lineno="31"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>cached_id<sp/>=<sp/>-1;</highlight></codeline>
<codeline lineno="32"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>cached_seg<sp/>=<sp/>-1;</highlight></codeline>
<codeline lineno="33"><highlight class="normal"><sp/><sp/><sp/><sp/>VisionBuf<sp/>*<sp/>cached_buf;</highlight></codeline>
<codeline lineno="34"><highlight class="normal"><sp/><sp/>};</highlight></codeline>
<codeline lineno="35"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>startVipcServer();</highlight></codeline>
<codeline lineno="36"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>cameraThread(<ref refid="struct_camera_server_1_1_camera" kindref="compound">Camera</ref><sp/>&amp;cam);</highlight></codeline>
<codeline lineno="37"><highlight class="normal"></highlight></codeline>
<codeline lineno="38"><highlight class="normal"><sp/><sp/><ref refid="struct_camera_server_1_1_camera" kindref="compound">Camera</ref><sp/>cameras_[MAX_CAMERAS]<sp/>=<sp/>{</highlight></codeline>
<codeline lineno="39"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{.type<sp/>=<sp/>RoadCam,<sp/>.stream_type<sp/>=<sp/>VISION_STREAM_ROAD},</highlight></codeline>
<codeline lineno="40"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{.type<sp/>=<sp/>DriverCam,<sp/>.stream_type<sp/>=<sp/>VISION_STREAM_DRIVER},</highlight></codeline>
<codeline lineno="41"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{.type<sp/>=<sp/>WideRoadCam,<sp/>.stream_type<sp/>=<sp/>VISION_STREAM_WIDE_ROAD},</highlight></codeline>
<codeline lineno="42"><highlight class="normal"><sp/><sp/>};</highlight></codeline>
<codeline lineno="43"><highlight class="normal"><sp/><sp/>std::atomic&lt;int&gt;<sp/>publishing_<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="44"><highlight class="normal"><sp/><sp/>std::unique_ptr&lt;VisionIpcServer&gt;<sp/>vipc_server_;</highlight></codeline>
<codeline lineno="45"><highlight class="normal">};</highlight></codeline>
    </programlisting>
    <location file="/tmp/openpilot/tools/replay/camera.h"/>
  </compounddef>
</doxygen>
