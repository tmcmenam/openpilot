<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.17">
  <compounddef id="util_8h" kind="file" language="C++">
    <compoundname>util.h</compoundname>
    <includes local="no">atomic</includes>
    <includes local="no">functional</includes>
    <includes local="no">string</includes>
    <includedby refid="route_8h" local="yes">/tmp/openpilot/tools/replay/route.h</includedby>
    <incdepgraph>
      <node id="2">
        <label>atomic</label>
      </node>
      <node id="3">
        <label>functional</label>
      </node>
      <node id="1">
        <label>/tmp/openpilot/tools/replay/util.h</label>
        <link refid="util_8h"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="4" relation="include">
        </childnode>
      </node>
      <node id="4">
        <label>string</label>
      </node>
    </incdepgraph>
    <invincdepgraph>
      <node id="2">
        <label>/tmp/openpilot/tools/replay/route.h</label>
        <link refid="route_8h_source"/>
        <childnode refid="3" relation="include">
        </childnode>
      </node>
      <node id="1">
        <label>/tmp/openpilot/tools/replay/util.h</label>
        <link refid="util_8h"/>
        <childnode refid="2" relation="include">
        </childnode>
      </node>
      <node id="3">
        <label>/tmp/openpilot/tools/replay/replay.h</label>
        <link refid="replay_8h_source"/>
        <childnode refid="4" relation="include">
        </childnode>
      </node>
      <node id="4">
        <label>/tmp/openpilot/tools/replay/consoleui.h</label>
        <link refid="consoleui_8h_source"/>
      </node>
    </invincdepgraph>
      <sectiondef kind="define">
      <memberdef kind="define" id="util_8h_1a613693a574e6c3687af020f04704db39" prot="public" static="no">
        <name>rInfo</name>
        <param><defname>fmt</defname></param>
        <param><defname>...</defname></param>
        <initializer>::logMessage(ReplyMsgType::Info, fmt,  ## __VA_ARGS__)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/tmp/openpilot/tools/replay/util.h" line="18" column="9" bodyfile="/tmp/openpilot/tools/replay/util.h" bodystart="18" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="util_8h_1a7d85de15637d1cfa3b2118e4e6b43bdc" prot="public" static="no">
        <name>rDebug</name>
        <param><defname>fmt</defname></param>
        <param><defname>...</defname></param>
        <initializer>::logMessage(ReplyMsgType::Debug, fmt,  ## __VA_ARGS__)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/tmp/openpilot/tools/replay/util.h" line="19" column="9" bodyfile="/tmp/openpilot/tools/replay/util.h" bodystart="19" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="util_8h_1aa0aad4720eb59fb6e37cef4acb22058b" prot="public" static="no">
        <name>rWarning</name>
        <param><defname>fmt</defname></param>
        <param><defname>...</defname></param>
        <initializer>::logMessage(ReplyMsgType::Warning, fmt,  ## __VA_ARGS__)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/tmp/openpilot/tools/replay/util.h" line="20" column="9" bodyfile="/tmp/openpilot/tools/replay/util.h" bodystart="20" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="util_8h_1ae79015d8374cea8c3f10cfe99607f2f2" prot="public" static="no">
        <name>rError</name>
        <param><defname>fmt</defname></param>
        <param><defname>...</defname></param>
        <initializer>::logMessage(ReplyMsgType::Critical , fmt,  ## __VA_ARGS__)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/tmp/openpilot/tools/replay/util.h" line="21" column="9" bodyfile="/tmp/openpilot/tools/replay/util.h" bodystart="21" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="enum">
      <memberdef kind="enum" id="util_8h_1ade2bf8f2eab26843ed4d1f9420929e83" prot="public" static="no" strong="yes">
        <type></type>
        <name>ReplyMsgType</name>
        <enumvalue id="util_8h_1ade2bf8f2eab26843ed4d1f9420929e83a4059b0251f66a18cb56f544728796875" prot="public">
          <name>Info</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="util_8h_1ade2bf8f2eab26843ed4d1f9420929e83aa603905470e2a5b8c13e96b579ef0dba" prot="public">
          <name>Debug</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="util_8h_1ade2bf8f2eab26843ed4d1f9420929e83a0eaadb4fcb48a0a0ed7bc9868be9fbaa" prot="public">
          <name>Warning</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="util_8h_1ade2bf8f2eab26843ed4d1f9420929e83a278d01e5af56273bae1bb99a98b370cd" prot="public">
          <name>Critical</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/tmp/openpilot/tools/replay/util.h" line="7" column="24" bodyfile="/tmp/openpilot/tools/replay/util.h" bodystart="7" bodyend="12"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="typedef">
      <memberdef kind="typedef" id="util_8h_1aa4b714574d4d1eac22495363be0063d2" prot="public" static="no">
        <type>std::function&lt; void(ReplyMsgType type, const std::string msg)&gt;</type>
        <definition>typedef std::function&lt;void(ReplyMsgType type, const std::string msg)&gt; ReplayMessageHandler</definition>
        <argsstring></argsstring>
        <name>ReplayMessageHandler</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/tmp/openpilot/tools/replay/util.h" line="14" column="23" bodyfile="/tmp/openpilot/tools/replay/util.h" bodystart="14" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="util_8h_1a81c2ebb208adc8ce0e999b30e5b78289" prot="public" static="no">
        <type>std::function&lt; void(uint64_t cur, uint64_t total, bool success)&gt;</type>
        <definition>typedef std::function&lt;void(uint64_t cur, uint64_t total, bool success)&gt; DownloadProgressHandler</definition>
        <argsstring></argsstring>
        <name>DownloadProgressHandler</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/tmp/openpilot/tools/replay/util.h" line="31" column="23" bodyfile="/tmp/openpilot/tools/replay/util.h" bodystart="31" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="func">
      <memberdef kind="function" id="util_8h_1afb46944b9cce2f1720a56cb6317f1fd2" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void installMessageHandler</definition>
        <argsstring>(ReplayMessageHandler)</argsstring>
        <name>installMessageHandler</name>
        <param>
          <type>ReplayMessageHandler</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/tmp/openpilot/tools/replay/util.h" line="15" column="6" declfile="/tmp/openpilot/tools/replay/util.h" declline="15" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="util_8h_1ab23254c5baa2c4bd435ab22b461fb95e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void logMessage</definition>
        <argsstring>(ReplyMsgType type, const char *fmt,...)</argsstring>
        <name>logMessage</name>
        <param>
          <type>ReplyMsgType</type>
          <declname>type</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>fmt</declname>
        </param>
        <param>
          <type>...</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/tmp/openpilot/tools/replay/util.h" line="16" column="6" declfile="/tmp/openpilot/tools/replay/util.h" declline="16" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="util_8h_1ab5831cf37681f7fdc032960a380fdcd1" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::string</type>
        <definition>std::string sha256</definition>
        <argsstring>(const std::string &amp;str)</argsstring>
        <name>sha256</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>str</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/tmp/openpilot/tools/replay/util.h" line="23" column="13" declfile="/tmp/openpilot/tools/replay/util.h" declline="23" declcolumn="13"/>
      </memberdef>
      <memberdef kind="function" id="util_8h_1a23c2149311c6361a7eb304fc59012120" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void precise_nano_sleep</definition>
        <argsstring>(long sleep_ns)</argsstring>
        <name>precise_nano_sleep</name>
        <param>
          <type>long</type>
          <declname>sleep_ns</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/tmp/openpilot/tools/replay/util.h" line="24" column="6" declfile="/tmp/openpilot/tools/replay/util.h" declline="24" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="util_8h_1abd508d2596ca8f110d7593e477e645c3" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::string</type>
        <definition>std::string decompressBZ2</definition>
        <argsstring>(const std::string &amp;in, std::atomic&lt; bool &gt; *abort=nullptr)</argsstring>
        <name>decompressBZ2</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>in</declname>
        </param>
        <param>
          <type>std::atomic&lt; bool &gt; *</type>
          <declname>abort</declname>
          <defval>nullptr</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/tmp/openpilot/tools/replay/util.h" line="25" column="13" declfile="/tmp/openpilot/tools/replay/util.h" declline="25" declcolumn="13"/>
      </memberdef>
      <memberdef kind="function" id="util_8h_1a6b8063cdc5397aa3c071c641924e0439" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::string</type>
        <definition>std::string decompressBZ2</definition>
        <argsstring>(const std::byte *in, size_t in_size, std::atomic&lt; bool &gt; *abort=nullptr)</argsstring>
        <name>decompressBZ2</name>
        <param>
          <type>const std::byte *</type>
          <declname>in</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>in_size</declname>
        </param>
        <param>
          <type>std::atomic&lt; bool &gt; *</type>
          <declname>abort</declname>
          <defval>nullptr</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/tmp/openpilot/tools/replay/util.h" line="26" column="13" declfile="/tmp/openpilot/tools/replay/util.h" declline="26" declcolumn="13"/>
      </memberdef>
      <memberdef kind="function" id="util_8h_1a6ac0cbbdae4c1f01d6382178a99a8b7b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::string</type>
        <definition>std::string getUrlWithoutQuery</definition>
        <argsstring>(const std::string &amp;url)</argsstring>
        <name>getUrlWithoutQuery</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>url</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/tmp/openpilot/tools/replay/util.h" line="27" column="13" declfile="/tmp/openpilot/tools/replay/util.h" declline="27" declcolumn="13"/>
      </memberdef>
      <memberdef kind="function" id="util_8h_1a3bdf24170a5de0dee1e524b6da5c21dd" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>size_t</type>
        <definition>size_t getRemoteFileSize</definition>
        <argsstring>(const std::string &amp;url, std::atomic&lt; bool &gt; *abort=nullptr)</argsstring>
        <name>getRemoteFileSize</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>url</declname>
        </param>
        <param>
          <type>std::atomic&lt; bool &gt; *</type>
          <declname>abort</declname>
          <defval>nullptr</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/tmp/openpilot/tools/replay/util.h" line="28" column="8" declfile="/tmp/openpilot/tools/replay/util.h" declline="28" declcolumn="8"/>
      </memberdef>
      <memberdef kind="function" id="util_8h_1a2ad41cbc1abcafdcbbd24b64a2a7cb3e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::string</type>
        <definition>std::string httpGet</definition>
        <argsstring>(const std::string &amp;url, size_t chunk_size=0, std::atomic&lt; bool &gt; *abort=nullptr)</argsstring>
        <name>httpGet</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>url</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>chunk_size</declname>
          <defval>0</defval>
        </param>
        <param>
          <type>std::atomic&lt; bool &gt; *</type>
          <declname>abort</declname>
          <defval>nullptr</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/tmp/openpilot/tools/replay/util.h" line="29" column="13" declfile="/tmp/openpilot/tools/replay/util.h" declline="29" declcolumn="13"/>
      </memberdef>
      <memberdef kind="function" id="util_8h_1a89c85dd5c9ec0fe74f0300399eb22e49" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void installDownloadProgressHandler</definition>
        <argsstring>(DownloadProgressHandler)</argsstring>
        <name>installDownloadProgressHandler</name>
        <param>
          <type>DownloadProgressHandler</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/tmp/openpilot/tools/replay/util.h" line="32" column="6" declfile="/tmp/openpilot/tools/replay/util.h" declline="32" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="util_8h_1a7dd156aea552f6606839c501c8239007" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool httpDownload</definition>
        <argsstring>(const std::string &amp;url, const std::string &amp;file, size_t chunk_size=0, std::atomic&lt; bool &gt; *abort=nullptr)</argsstring>
        <name>httpDownload</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>url</declname>
        </param>
        <param>
          <type>const std::string &amp;</type>
          <declname>file</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>chunk_size</declname>
          <defval>0</defval>
        </param>
        <param>
          <type>std::atomic&lt; bool &gt; *</type>
          <declname>abort</declname>
          <defval>nullptr</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/tmp/openpilot/tools/replay/util.h" line="33" column="6" declfile="/tmp/openpilot/tools/replay/util.h" declline="33" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="util_8h_1a9f3f6e4f78bb00af07d7188737fea9d5" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::string</type>
        <definition>std::string formattedDataSize</definition>
        <argsstring>(size_t size)</argsstring>
        <name>formattedDataSize</name>
        <param>
          <type>size_t</type>
          <declname>size</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/tmp/openpilot/tools/replay/util.h" line="34" column="13" declfile="/tmp/openpilot/tools/replay/util.h" declline="34" declcolumn="13"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="preprocessor">#pragma<sp/>once</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2"><highlight class="normal"></highlight></codeline>
<codeline lineno="3"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;atomic&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;functional&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;string&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6"><highlight class="normal"></highlight></codeline>
<codeline lineno="7"><highlight class="normal"></highlight><highlight class="keyword">enum<sp/>class</highlight><highlight class="normal"><sp/>ReplyMsgType<sp/>{</highlight></codeline>
<codeline lineno="8"><highlight class="normal"><sp/><sp/>Info,</highlight></codeline>
<codeline lineno="9"><highlight class="normal"><sp/><sp/>Debug,</highlight></codeline>
<codeline lineno="10"><highlight class="normal"><sp/><sp/>Warning,</highlight></codeline>
<codeline lineno="11"><highlight class="normal"><sp/><sp/>Critical</highlight></codeline>
<codeline lineno="12"><highlight class="normal">};</highlight></codeline>
<codeline lineno="13"><highlight class="normal"></highlight></codeline>
<codeline lineno="14"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/>std::function&lt;void(ReplyMsgType<sp/>type,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string<sp/>msg)&gt;<sp/>ReplayMessageHandler;</highlight></codeline>
<codeline lineno="15"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>installMessageHandler(ReplayMessageHandler);</highlight></codeline>
<codeline lineno="16"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>logMessage(ReplyMsgType<sp/>type,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>fmt,<sp/>...);</highlight></codeline>
<codeline lineno="17"><highlight class="normal"></highlight></codeline>
<codeline lineno="18"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>rInfo(fmt,<sp/>...)<sp/>::logMessage(ReplyMsgType::Info,<sp/>fmt,<sp/><sp/>##<sp/>__VA_ARGS__)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="19"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>rDebug(fmt,<sp/>...)<sp/>::logMessage(ReplyMsgType::Debug,<sp/>fmt,<sp/><sp/>##<sp/>__VA_ARGS__)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="20"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>rWarning(fmt,<sp/>...)<sp/>::logMessage(ReplyMsgType::Warning,<sp/>fmt,<sp/><sp/>##<sp/>__VA_ARGS__)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="21"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>rError(fmt,<sp/>...)<sp/>::logMessage(ReplyMsgType::Critical<sp/>,<sp/>fmt,<sp/><sp/>##<sp/>__VA_ARGS__)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="22"><highlight class="normal"></highlight></codeline>
<codeline lineno="23"><highlight class="normal">std::string<sp/>sha256(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string<sp/>&amp;str);</highlight></codeline>
<codeline lineno="24"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>precise_nano_sleep(</highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>sleep_ns);</highlight></codeline>
<codeline lineno="25"><highlight class="normal">std::string<sp/>decompressBZ2(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string<sp/>&amp;in,<sp/>std::atomic&lt;bool&gt;<sp/>*abort<sp/>=<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="26"><highlight class="normal">std::string<sp/>decompressBZ2(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::byte<sp/>*in,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>in_size,<sp/>std::atomic&lt;bool&gt;<sp/>*abort<sp/>=<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="27"><highlight class="normal">std::string<sp/>getUrlWithoutQuery(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string<sp/>&amp;url);</highlight></codeline>
<codeline lineno="28"><highlight class="normal"></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>getRemoteFileSize(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string<sp/>&amp;url,<sp/>std::atomic&lt;bool&gt;<sp/>*abort<sp/>=<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="29"><highlight class="normal">std::string<sp/>httpGet(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string<sp/>&amp;url,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>chunk_size<sp/>=<sp/>0,<sp/>std::atomic&lt;bool&gt;<sp/>*abort<sp/>=<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="30"><highlight class="normal"></highlight></codeline>
<codeline lineno="31"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/>std::function&lt;void(uint64_t<sp/>cur,<sp/>uint64_t<sp/>total,<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>success)&gt;<sp/>DownloadProgressHandler;</highlight></codeline>
<codeline lineno="32"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>installDownloadProgressHandler(DownloadProgressHandler);</highlight></codeline>
<codeline lineno="33"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>httpDownload(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string<sp/>&amp;url,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string<sp/>&amp;file,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>chunk_size<sp/>=<sp/>0,<sp/>std::atomic&lt;bool&gt;<sp/>*abort<sp/>=<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="34"><highlight class="normal">std::string<sp/>formattedDataSize(</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>size);</highlight></codeline>
    </programlisting>
    <location file="/tmp/openpilot/tools/replay/util.h"/>
  </compounddef>
</doxygen>
