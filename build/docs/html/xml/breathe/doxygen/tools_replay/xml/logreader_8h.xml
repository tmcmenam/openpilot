<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.17">
  <compounddef id="logreader_8h" kind="file" language="C++">
    <compoundname>logreader.h</compoundname>
    <includes local="no">memory</includes>
    <includes local="no">set</includes>
    <includes local="no">string</includes>
    <includes local="no">vector</includes>
    <includes local="yes">cereal/gen/cpp/log.capnp.h</includes>
    <includes local="yes">system/camerad/cameras/camera_common.h</includes>
    <includes refid="filereader_8h" local="yes">tools/replay/filereader.h</includes>
    <includedby refid="route_8h" local="yes">/tmp/openpilot/tools/replay/route.h</includedby>
    <includedby refid="camera_8h" local="yes">/tmp/openpilot/tools/replay/camera.h</includedby>
    <incdepgraph>
      <node id="9">
        <label>atomic</label>
      </node>
      <node id="1">
        <label>/tmp/openpilot/tools/replay/logreader.h</label>
        <link refid="logreader_8h"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="6" relation="include">
        </childnode>
        <childnode refid="7" relation="include">
        </childnode>
        <childnode refid="8" relation="include">
        </childnode>
      </node>
      <node id="7">
        <label>system/camerad/cameras/camera_common.h</label>
      </node>
      <node id="4">
        <label>string</label>
      </node>
      <node id="8">
        <label>tools/replay/filereader.h</label>
        <link refid="filereader_8h_source"/>
        <childnode refid="9" relation="include">
        </childnode>
        <childnode refid="4" relation="include">
        </childnode>
      </node>
      <node id="5">
        <label>vector</label>
      </node>
      <node id="3">
        <label>set</label>
      </node>
      <node id="6">
        <label>cereal/gen/cpp/log.capnp.h</label>
      </node>
      <node id="2">
        <label>memory</label>
      </node>
    </incdepgraph>
    <invincdepgraph>
      <node id="2">
        <label>/tmp/openpilot/tools/replay/route.h</label>
        <link refid="route_8h_source"/>
        <childnode refid="3" relation="include">
        </childnode>
      </node>
      <node id="1">
        <label>/tmp/openpilot/tools/replay/logreader.h</label>
        <link refid="logreader_8h"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="5" relation="include">
        </childnode>
      </node>
      <node id="3">
        <label>/tmp/openpilot/tools/replay/replay.h</label>
        <link refid="replay_8h_source"/>
        <childnode refid="4" relation="include">
        </childnode>
      </node>
      <node id="4">
        <label>/tmp/openpilot/tools/replay/consoleui.h</label>
        <link refid="consoleui_8h_source"/>
      </node>
      <node id="5">
        <label>/tmp/openpilot/tools/replay/camera.h</label>
        <link refid="camera_8h_source"/>
        <childnode refid="3" relation="include">
        </childnode>
      </node>
    </invincdepgraph>
    <innerclass refid="class_event" prot="public">Event</innerclass>
    <innerclass refid="struct_event_1_1less_than" prot="public">Event::lessThan</innerclass>
    <innerclass refid="class_log_reader" prot="public">LogReader</innerclass>
      <sectiondef kind="var">
      <memberdef kind="variable" id="logreader_8h_1a425a15f599553b17fb6cbb9e68c2e00a" prot="public" static="no" mutable="no">
        <type>const CameraType</type>
        <definition>const CameraType ALL_CAMERAS[]</definition>
        <argsstring>[]</argsstring>
        <name>ALL_CAMERAS</name>
        <initializer>= {RoadCam, DriverCam, WideRoadCam}</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/tmp/openpilot/tools/replay/logreader.h" line="17" column="18" bodyfile="/tmp/openpilot/tools/replay/logreader.h" bodystart="17" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="logreader_8h_1a52b1cc17e8b58429bd59ffc2cdff6fe7" prot="public" static="no" mutable="no">
        <type>const int</type>
        <definition>const int MAX_CAMERAS</definition>
        <argsstring></argsstring>
        <name>MAX_CAMERAS</name>
        <initializer>= std::size(ALL_CAMERAS)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/tmp/openpilot/tools/replay/logreader.h" line="18" column="11" bodyfile="/tmp/openpilot/tools/replay/logreader.h" bodystart="18" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="logreader_8h_1afdb4212cbddf5072872ce2bf888ef85c" prot="public" static="no" mutable="no">
        <type>const int</type>
        <definition>const int DEFAULT_EVENT_MEMORY_POOL_BLOCK_SIZE</definition>
        <argsstring></argsstring>
        <name>DEFAULT_EVENT_MEMORY_POOL_BLOCK_SIZE</name>
        <initializer>= 65000</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/tmp/openpilot/tools/replay/logreader.h" line="19" column="11" bodyfile="/tmp/openpilot/tools/replay/logreader.h" bodystart="19" bodyend="-1"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="preprocessor">#pragma<sp/>once</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2"><highlight class="normal"></highlight></codeline>
<codeline lineno="3"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>__has_include(&lt;memory_resource&gt;)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>HAS_MEMORY_RESOURCE<sp/>1</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;memory_resource&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7"><highlight class="normal"></highlight></codeline>
<codeline lineno="8"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;memory&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="9"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;set&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="10"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;string&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="11"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;vector&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="12"><highlight class="normal"></highlight></codeline>
<codeline lineno="13"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;cereal/gen/cpp/log.capnp.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="14"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;system/camerad/cameras/camera_common.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="15"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;tools/replay/filereader.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="16"><highlight class="normal"></highlight></codeline>
<codeline lineno="17"><highlight class="normal"></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>CameraType<sp/>ALL_CAMERAS[]<sp/>=<sp/>{RoadCam,<sp/>DriverCam,<sp/>WideRoadCam};</highlight></codeline>
<codeline lineno="18"><highlight class="normal"></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>MAX_CAMERAS<sp/>=<sp/>std::size(ALL_CAMERAS);</highlight></codeline>
<codeline lineno="19"><highlight class="normal"></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>DEFAULT_EVENT_MEMORY_POOL_BLOCK_SIZE<sp/>=<sp/>65000;</highlight></codeline>
<codeline lineno="20"><highlight class="normal"></highlight></codeline>
<codeline lineno="21" refid="class_event" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal"><ref refid="class_event" kindref="compound">Event</ref><sp/>{</highlight></codeline>
<codeline lineno="22"><highlight class="normal"></highlight><highlight class="keyword">public</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="23"><highlight class="normal"><sp/><sp/><ref refid="class_event" kindref="compound">Event</ref>(cereal::Event::Which<sp/>which,<sp/>uint64_t<sp/>mono_time)<sp/>:<sp/>reader(kj::ArrayPtr&lt;capnp::word&gt;{})<sp/>{</highlight></codeline>
<codeline lineno="24"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>construct<sp/>a<sp/>dummy<sp/>Event<sp/>for<sp/>binary<sp/>search,<sp/>e.g<sp/>std::upper_bound</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="25"><highlight class="normal"><sp/><sp/><sp/><sp/>this-&gt;which<sp/>=<sp/>which;</highlight></codeline>
<codeline lineno="26"><highlight class="normal"><sp/><sp/><sp/><sp/>this-&gt;mono_time<sp/>=<sp/>mono_time;</highlight></codeline>
<codeline lineno="27"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="28"><highlight class="normal"><sp/><sp/><ref refid="class_event" kindref="compound">Event</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>kj::ArrayPtr&lt;const<sp/>capnp::word&gt;<sp/>&amp;amsg,<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>frame<sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="29"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/>kj::ArrayPtr&lt;const<sp/>capnp::byte&gt;<sp/>bytes()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>words.asBytes();<sp/>}</highlight></codeline>
<codeline lineno="30"><highlight class="normal"></highlight></codeline>
<codeline lineno="31" refid="struct_event_1_1less_than" refkind="compound"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="struct_event_1_1less_than" kindref="compound">lessThan</ref><sp/>{</highlight></codeline>
<codeline lineno="32"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>operator()(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="class_event" kindref="compound">Event</ref><sp/>*l,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="class_event" kindref="compound">Event</ref><sp/>*r)<sp/>{</highlight></codeline>
<codeline lineno="33"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>l-&gt;mono_time<sp/>&lt;<sp/>r-&gt;mono_time<sp/>||<sp/>(l-&gt;mono_time<sp/>==<sp/>r-&gt;mono_time<sp/>&amp;&amp;<sp/>l-&gt;which<sp/>&lt;<sp/>r-&gt;which);</highlight></codeline>
<codeline lineno="34"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="35"><highlight class="normal"><sp/><sp/>};</highlight></codeline>
<codeline lineno="36"><highlight class="normal"></highlight></codeline>
<codeline lineno="37"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>HAS_MEMORY_RESOURCE</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="38"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*</highlight><highlight class="keyword">operator</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>size,<sp/>std::pmr::monotonic_buffer_resource<sp/>*mbr)<sp/>{</highlight></codeline>
<codeline lineno="39"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>mbr-&gt;allocate(size);</highlight></codeline>
<codeline lineno="40"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="41"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">operator</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">delete</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*ptr)<sp/>{</highlight></codeline>
<codeline lineno="42"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>No-op.<sp/>memory<sp/>used<sp/>by<sp/>EventMemoryPool<sp/>increases<sp/>monotonically<sp/>until<sp/>the<sp/>logReader<sp/>is<sp/>destroyed.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="43"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="44"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="45"><highlight class="normal"></highlight></codeline>
<codeline lineno="46"><highlight class="normal"><sp/><sp/>uint64_t<sp/>mono_time;</highlight></codeline>
<codeline lineno="47"><highlight class="normal"><sp/><sp/>cereal::Event::Which<sp/>which;</highlight></codeline>
<codeline lineno="48"><highlight class="normal"><sp/><sp/>cereal::Event::Reader<sp/>event;</highlight></codeline>
<codeline lineno="49"><highlight class="normal"><sp/><sp/>capnp::FlatArrayMessageReader<sp/>reader;</highlight></codeline>
<codeline lineno="50"><highlight class="normal"><sp/><sp/>kj::ArrayPtr&lt;const<sp/>capnp::word&gt;<sp/>words;</highlight></codeline>
<codeline lineno="51"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>frame;</highlight></codeline>
<codeline lineno="52"><highlight class="normal">};</highlight></codeline>
<codeline lineno="53"><highlight class="normal"></highlight></codeline>
<codeline lineno="54" refid="class_log_reader" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal"><ref refid="class_log_reader" kindref="compound">LogReader</ref><sp/>{</highlight></codeline>
<codeline lineno="55"><highlight class="normal"></highlight><highlight class="keyword">public</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="56"><highlight class="normal"><sp/><sp/><ref refid="class_log_reader" kindref="compound">LogReader</ref>(</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>memory_pool_block_size<sp/>=<sp/>DEFAULT_EVENT_MEMORY_POOL_BLOCK_SIZE);</highlight></codeline>
<codeline lineno="57"><highlight class="normal"><sp/><sp/>~<ref refid="class_log_reader" kindref="compound">LogReader</ref>();</highlight></codeline>
<codeline lineno="58"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>load(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string<sp/>&amp;url,<sp/>std::atomic&lt;bool&gt;<sp/>*abort<sp/>=<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::set&lt;cereal::Event::Which&gt;<sp/>&amp;allow<sp/>=<sp/>{},</highlight></codeline>
<codeline lineno="59"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>local_cache<sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>chunk_size<sp/>=<sp/>-1,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>retries<sp/>=<sp/>0);</highlight></codeline>
<codeline lineno="60"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>load(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::byte<sp/>*data,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>size,<sp/>std::atomic&lt;bool&gt;<sp/>*abort<sp/>=<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="61"><highlight class="normal"><sp/><sp/>std::vector&lt;Event*&gt;<sp/>events;</highlight></codeline>
<codeline lineno="62"><highlight class="normal"></highlight></codeline>
<codeline lineno="63"><highlight class="normal"></highlight><highlight class="keyword">private</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="64"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>parse(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::set&lt;cereal::Event::Which&gt;<sp/>&amp;allow,<sp/>std::atomic&lt;bool&gt;<sp/>*abort);</highlight></codeline>
<codeline lineno="65"><highlight class="normal"><sp/><sp/>std::string<sp/>raw_;</highlight></codeline>
<codeline lineno="66"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>HAS_MEMORY_RESOURCE</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="67"><highlight class="normal"><sp/><sp/>std::unique_ptr&lt;std::pmr::monotonic_buffer_resource&gt;<sp/>mbr_;</highlight></codeline>
<codeline lineno="68"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="69"><highlight class="normal">};</highlight></codeline>
    </programlisting>
    <location file="/tmp/openpilot/tools/replay/logreader.h"/>
  </compounddef>
</doxygen>
