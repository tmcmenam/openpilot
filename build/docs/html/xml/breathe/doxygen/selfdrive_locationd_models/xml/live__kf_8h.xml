<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.17">
  <compounddef id="live__kf_8h" kind="file" language="C++">
    <compoundname>live_kf.h</compoundname>
    <includes local="no">string</includes>
    <includes local="no">cmath</includes>
    <includes local="no">memory</includes>
    <includes local="no">unordered_map</includes>
    <includes local="no">vector</includes>
    <includes local="no">eigen3/Eigen/Core</includes>
    <includes local="no">eigen3/Eigen/Dense</includes>
    <includes local="yes">generated/live_kf_constants.h</includes>
    <includes local="yes">rednose/helpers/ekf_sym.h</includes>
    <incdepgraph>
      <node id="3">
        <label>cmath</label>
      </node>
      <node id="8">
        <label>eigen3/Eigen/Dense</label>
      </node>
      <node id="2">
        <label>string</label>
      </node>
      <node id="9">
        <label>generated/live_kf_constants.h</label>
      </node>
      <node id="1">
        <label>/tmp/openpilot/selfdrive/locationd/models/live_kf.h</label>
        <link refid="live__kf_8h"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="6" relation="include">
        </childnode>
        <childnode refid="7" relation="include">
        </childnode>
        <childnode refid="8" relation="include">
        </childnode>
        <childnode refid="9" relation="include">
        </childnode>
        <childnode refid="10" relation="include">
        </childnode>
      </node>
      <node id="6">
        <label>vector</label>
      </node>
      <node id="5">
        <label>unordered_map</label>
      </node>
      <node id="7">
        <label>eigen3/Eigen/Core</label>
      </node>
      <node id="4">
        <label>memory</label>
      </node>
      <node id="10">
        <label>rednose/helpers/ekf_sym.h</label>
      </node>
    </incdepgraph>
    <innerclass refid="class_live_kalman" prot="public">LiveKalman</innerclass>
    <innernamespace refid="namespace_e_k_f_s">EKFS</innernamespace>
      <sectiondef kind="define">
      <memberdef kind="define" id="live__kf_8h_1a8cf1f7fbbfb1b78d4474269ff4413dc7" prot="public" static="no">
        <name>EARTH_GM</name>
        <initializer>3.986005e14</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/tmp/openpilot/selfdrive/locationd/models/live_kf.h" line="15" column="9" bodyfile="/tmp/openpilot/selfdrive/locationd/models/live_kf.h" bodystart="15" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="func">
      <memberdef kind="function" id="live__kf_8h_1afe6840ce5b6ec12b7427621e16a73b0c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>Eigen::Map&lt; Eigen::VectorXd &gt;</type>
        <definition>Eigen::Map&lt;Eigen::VectorXd&gt; get_mapvec</definition>
        <argsstring>(const Eigen::VectorXd &amp;vec)</argsstring>
        <name>get_mapvec</name>
        <param>
          <type>const Eigen::VectorXd &amp;</type>
          <declname>vec</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/tmp/openpilot/selfdrive/locationd/models/live_kf.h" line="19" column="12" declfile="/tmp/openpilot/selfdrive/locationd/models/live_kf.h" declline="19" declcolumn="12"/>
      </memberdef>
      <memberdef kind="function" id="live__kf_8h_1a472d3ef5809c4e04879621082041d3bf" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>Eigen::Map&lt; MatrixXdr &gt;</type>
        <definition>Eigen::Map&lt;MatrixXdr&gt; get_mapmat</definition>
        <argsstring>(const MatrixXdr &amp;mat)</argsstring>
        <name>get_mapmat</name>
        <param>
          <type>const MatrixXdr &amp;</type>
          <declname>mat</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/tmp/openpilot/selfdrive/locationd/models/live_kf.h" line="20" column="12" declfile="/tmp/openpilot/selfdrive/locationd/models/live_kf.h" declline="20" declcolumn="12"/>
      </memberdef>
      <memberdef kind="function" id="live__kf_8h_1a657aacf249134ba674a458472c0236ce" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::vector&lt; Eigen::Map&lt; Eigen::VectorXd &gt; &gt;</type>
        <definition>std::vector&lt;Eigen::Map&lt;Eigen::VectorXd&gt; &gt; get_vec_mapvec</definition>
        <argsstring>(const std::vector&lt; Eigen::VectorXd &gt; &amp;vec_vec)</argsstring>
        <name>get_vec_mapvec</name>
        <param>
          <type>const std::vector&lt; Eigen::VectorXd &gt; &amp;</type>
          <declname>vec_vec</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/tmp/openpilot/selfdrive/locationd/models/live_kf.h" line="21" column="13" declfile="/tmp/openpilot/selfdrive/locationd/models/live_kf.h" declline="21" declcolumn="13"/>
      </memberdef>
      <memberdef kind="function" id="live__kf_8h_1affce32801d4636f3d9e2f30f7096d34e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::vector&lt; Eigen::Map&lt; MatrixXdr &gt; &gt;</type>
        <definition>std::vector&lt;Eigen::Map&lt;MatrixXdr&gt; &gt; get_vec_mapmat</definition>
        <argsstring>(const std::vector&lt; MatrixXdr &gt; &amp;mat_vec)</argsstring>
        <name>get_vec_mapmat</name>
        <param>
          <type>const std::vector&lt; MatrixXdr &gt; &amp;</type>
          <declname>mat_vec</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/tmp/openpilot/selfdrive/locationd/models/live_kf.h" line="22" column="13" declfile="/tmp/openpilot/selfdrive/locationd/models/live_kf.h" declline="22" declcolumn="13"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="preprocessor">#pragma<sp/>once</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2"><highlight class="normal"></highlight></codeline>
<codeline lineno="3"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;string&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;cmath&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;memory&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;unordered_map&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;vector&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="8"><highlight class="normal"></highlight></codeline>
<codeline lineno="9"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;eigen3/Eigen/Core&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="10"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;eigen3/Eigen/Dense&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="11"><highlight class="normal"></highlight></codeline>
<codeline lineno="12"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;generated/live_kf_constants.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="13"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;rednose/helpers/ekf_sym.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="14"><highlight class="normal"></highlight></codeline>
<codeline lineno="15"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>EARTH_GM<sp/>3.986005e14<sp/><sp/>//<sp/>m^3/s^2<sp/>(gravitational<sp/>constant<sp/>*<sp/>mass<sp/>of<sp/>earth)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="16"><highlight class="normal"></highlight></codeline>
<codeline lineno="17"><highlight class="normal"></highlight><highlight class="keyword">using<sp/>namespace<sp/></highlight><highlight class="normal">EKFS;</highlight></codeline>
<codeline lineno="18"><highlight class="normal"></highlight></codeline>
<codeline lineno="19"><highlight class="normal">Eigen::Map&lt;Eigen::VectorXd&gt;<sp/>get_mapvec(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Eigen::VectorXd<sp/>&amp;vec);</highlight></codeline>
<codeline lineno="20"><highlight class="normal">Eigen::Map&lt;MatrixXdr&gt;<sp/>get_mapmat(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>MatrixXdr<sp/>&amp;mat);</highlight></codeline>
<codeline lineno="21"><highlight class="normal">std::vector&lt;Eigen::Map&lt;Eigen::VectorXd&gt;&gt;<sp/>get_vec_mapvec(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::vector&lt;Eigen::VectorXd&gt;<sp/>&amp;vec_vec);</highlight></codeline>
<codeline lineno="22"><highlight class="normal">std::vector&lt;Eigen::Map&lt;MatrixXdr&gt;&gt;<sp/>get_vec_mapmat(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::vector&lt;MatrixXdr&gt;<sp/>&amp;mat_vec);</highlight></codeline>
<codeline lineno="23"><highlight class="normal"></highlight></codeline>
<codeline lineno="24" refid="class_live_kalman" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal"><ref refid="class_live_kalman" kindref="compound">LiveKalman</ref><sp/>{</highlight></codeline>
<codeline lineno="25"><highlight class="normal"></highlight><highlight class="keyword">public</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="26"><highlight class="normal"><sp/><sp/><ref refid="class_live_kalman" kindref="compound">LiveKalman</ref>();</highlight></codeline>
<codeline lineno="27"><highlight class="normal"></highlight></codeline>
<codeline lineno="28"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>init_state(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Eigen::VectorXd<sp/>&amp;state,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Eigen::VectorXd<sp/>&amp;covs_diag,<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>filter_time);</highlight></codeline>
<codeline lineno="29"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>init_state(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Eigen::VectorXd<sp/>&amp;state,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>MatrixXdr<sp/>&amp;covs,<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>filter_time);</highlight></codeline>
<codeline lineno="30"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>init_state(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Eigen::VectorXd<sp/>&amp;state,<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>filter_time);</highlight></codeline>
<codeline lineno="31"><highlight class="normal"></highlight></codeline>
<codeline lineno="32"><highlight class="normal"><sp/><sp/>Eigen::VectorXd<sp/>get_x();</highlight></codeline>
<codeline lineno="33"><highlight class="normal"><sp/><sp/>MatrixXdr<sp/>get_P();</highlight></codeline>
<codeline lineno="34"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>get_filter_time();</highlight></codeline>
<codeline lineno="35"><highlight class="normal"><sp/><sp/>std::vector&lt;MatrixXdr&gt;<sp/>get_R(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>kind,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>n);</highlight></codeline>
<codeline lineno="36"><highlight class="normal"></highlight></codeline>
<codeline lineno="37"><highlight class="normal"><sp/><sp/>std::optional&lt;Estimate&gt;<sp/>predict_and_observe(</highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>t,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>kind,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::vector&lt;Eigen::VectorXd&gt;<sp/>&amp;meas,<sp/>std::vector&lt;MatrixXdr&gt;<sp/>R<sp/>=<sp/>{});</highlight></codeline>
<codeline lineno="38"><highlight class="normal"><sp/><sp/>std::optional&lt;Estimate&gt;<sp/>predict_and_update_odo_speed(std::vector&lt;Eigen::VectorXd&gt;<sp/>speed,<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>t,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>kind);</highlight></codeline>
<codeline lineno="39"><highlight class="normal"><sp/><sp/>std::optional&lt;Estimate&gt;<sp/>predict_and_update_odo_trans(std::vector&lt;Eigen::VectorXd&gt;<sp/>trans,<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>t,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>kind);</highlight></codeline>
<codeline lineno="40"><highlight class="normal"><sp/><sp/>std::optional&lt;Estimate&gt;<sp/>predict_and_update_odo_rot(std::vector&lt;Eigen::VectorXd&gt;<sp/>rot,<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>t,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>kind);</highlight></codeline>
<codeline lineno="41"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>predict(</highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>t);</highlight></codeline>
<codeline lineno="42"><highlight class="normal"></highlight></codeline>
<codeline lineno="43"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Eigen::VectorXd<sp/>&amp;get_initial_x();</highlight></codeline>
<codeline lineno="44"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>MatrixXdr<sp/>&amp;get_initial_P();</highlight></codeline>
<codeline lineno="45"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>MatrixXdr<sp/>&amp;get_fake_gps_pos_cov();</highlight></codeline>
<codeline lineno="46"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>MatrixXdr<sp/>&amp;get_fake_gps_vel_cov();</highlight></codeline>
<codeline lineno="47"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>MatrixXdr<sp/>&amp;get_reset_orientation_P();</highlight></codeline>
<codeline lineno="48"><highlight class="normal"></highlight></codeline>
<codeline lineno="49"><highlight class="normal"><sp/><sp/>MatrixXdr<sp/>H(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Eigen::VectorXd<sp/>&amp;in);</highlight></codeline>
<codeline lineno="50"><highlight class="normal"></highlight></codeline>
<codeline lineno="51"><highlight class="normal"></highlight><highlight class="keyword">private</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="52"><highlight class="normal"><sp/><sp/>std::string<sp/>name<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;live&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="53"><highlight class="normal"></highlight></codeline>
<codeline lineno="54"><highlight class="normal"><sp/><sp/>std::shared_ptr&lt;EKFSym&gt;<sp/>filter;</highlight></codeline>
<codeline lineno="55"><highlight class="normal"></highlight></codeline>
<codeline lineno="56"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>dim_state;</highlight></codeline>
<codeline lineno="57"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>dim_state_err;</highlight></codeline>
<codeline lineno="58"><highlight class="normal"></highlight></codeline>
<codeline lineno="59"><highlight class="normal"><sp/><sp/>Eigen::VectorXd<sp/>initial_x;</highlight></codeline>
<codeline lineno="60"><highlight class="normal"><sp/><sp/>MatrixXdr<sp/>initial_P;</highlight></codeline>
<codeline lineno="61"><highlight class="normal"><sp/><sp/>MatrixXdr<sp/>fake_gps_pos_cov;</highlight></codeline>
<codeline lineno="62"><highlight class="normal"><sp/><sp/>MatrixXdr<sp/>fake_gps_vel_cov;</highlight></codeline>
<codeline lineno="63"><highlight class="normal"><sp/><sp/>MatrixXdr<sp/>reset_orientation_P;</highlight></codeline>
<codeline lineno="64"><highlight class="normal"><sp/><sp/>MatrixXdr<sp/>Q;<sp/><sp/></highlight><highlight class="comment">//<sp/>process<sp/>noise</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="65"><highlight class="normal"><sp/><sp/>std::unordered_map&lt;int,<sp/>MatrixXdr&gt;<sp/>obs_noise;</highlight></codeline>
<codeline lineno="66"><highlight class="normal">};</highlight></codeline>
    </programlisting>
    <location file="/tmp/openpilot/selfdrive/locationd/models/live_kf.h"/>
  </compounddef>
</doxygen>
