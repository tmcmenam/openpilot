<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.17">
  <compounddef id="clutil_8h" kind="file" language="C++">
    <compoundname>clutil.h</compoundname>
    <includes local="no">CL/cl.h</includes>
    <includes local="no">string</includes>
    <incdepgraph>
      <node id="3">
        <label>string</label>
      </node>
      <node id="2">
        <label>CL/cl.h</label>
      </node>
      <node id="1">
        <label>/tmp/openpilot/common/clutil.h</label>
        <link refid="clutil_8h"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="3" relation="include">
        </childnode>
      </node>
    </incdepgraph>
      <sectiondef kind="define">
      <memberdef kind="define" id="clutil_8h_1a51b29a5a85a090727e2f7624ed2e316b" prot="public" static="no">
        <name>CL_CHECK</name>
        <param><defname>_expr</defname></param>
        <initializer>  do {                           \
    assert(CL_SUCCESS == (_expr)); \
  } while (0)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/tmp/openpilot/common/clutil.h" line="11" column="9" bodyfile="/tmp/openpilot/common/clutil.h" bodystart="11" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="clutil_8h_1ab4058ed9c5d33aa8278ea9ec75272337" prot="public" static="no">
        <name>CL_CHECK_ERR</name>
        <param><defname>_expr</defname></param>
        <initializer>  ({                                  \
    cl_int err = CL_INVALID_VALUE;    \
    __typeof__(_expr) _ret = _expr;   \
    assert(_ret&amp;&amp; err == CL_SUCCESS); \
    _ret;                             \
  })</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/tmp/openpilot/common/clutil.h" line="16" column="9" bodyfile="/tmp/openpilot/common/clutil.h" bodystart="16" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="func">
      <memberdef kind="function" id="clutil_8h_1a03255691cfd2c18d09a1def973a1169b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>cl_device_id</type>
        <definition>cl_device_id cl_get_device_id</definition>
        <argsstring>(cl_device_type device_type)</argsstring>
        <name>cl_get_device_id</name>
        <param>
          <type>cl_device_type</type>
          <declname>device_type</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/tmp/openpilot/common/clutil.h" line="24" column="14" declfile="/tmp/openpilot/common/clutil.h" declline="24" declcolumn="14"/>
      </memberdef>
      <memberdef kind="function" id="clutil_8h_1ac436b95f79d0b525de95ed380b7d58aa" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>cl_context</type>
        <definition>cl_context cl_create_context</definition>
        <argsstring>(cl_device_id device_id)</argsstring>
        <name>cl_create_context</name>
        <param>
          <type>cl_device_id</type>
          <declname>device_id</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/tmp/openpilot/common/clutil.h" line="25" column="12" declfile="/tmp/openpilot/common/clutil.h" declline="25" declcolumn="12"/>
      </memberdef>
      <memberdef kind="function" id="clutil_8h_1aec1981659b85860abe5b616ddddc43dd" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>cl_program</type>
        <definition>cl_program cl_program_from_source</definition>
        <argsstring>(cl_context ctx, cl_device_id device_id, const std::string &amp;src, const char *args=nullptr)</argsstring>
        <name>cl_program_from_source</name>
        <param>
          <type>cl_context</type>
          <declname>ctx</declname>
        </param>
        <param>
          <type>cl_device_id</type>
          <declname>device_id</declname>
        </param>
        <param>
          <type>const std::string &amp;</type>
          <declname>src</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>args</declname>
          <defval>nullptr</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/tmp/openpilot/common/clutil.h" line="26" column="12" declfile="/tmp/openpilot/common/clutil.h" declline="26" declcolumn="12"/>
      </memberdef>
      <memberdef kind="function" id="clutil_8h_1a391311f7b76bf91c3d4fed98a169fd20" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>cl_program</type>
        <definition>cl_program cl_program_from_binary</definition>
        <argsstring>(cl_context ctx, cl_device_id device_id, const uint8_t *binary, size_t length, const char *args=nullptr)</argsstring>
        <name>cl_program_from_binary</name>
        <param>
          <type>cl_context</type>
          <declname>ctx</declname>
        </param>
        <param>
          <type>cl_device_id</type>
          <declname>device_id</declname>
        </param>
        <param>
          <type>const uint8_t *</type>
          <declname>binary</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>length</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>args</declname>
          <defval>nullptr</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/tmp/openpilot/common/clutil.h" line="27" column="12" declfile="/tmp/openpilot/common/clutil.h" declline="27" declcolumn="12"/>
      </memberdef>
      <memberdef kind="function" id="clutil_8h_1a7ba5842f8c688ed870cc85c026a344ad" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>cl_program</type>
        <definition>cl_program cl_program_from_file</definition>
        <argsstring>(cl_context ctx, cl_device_id device_id, const char *path, const char *args)</argsstring>
        <name>cl_program_from_file</name>
        <param>
          <type>cl_context</type>
          <declname>ctx</declname>
        </param>
        <param>
          <type>cl_device_id</type>
          <declname>device_id</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>path</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>args</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/tmp/openpilot/common/clutil.h" line="28" column="12" declfile="/tmp/openpilot/common/clutil.h" declline="28" declcolumn="12"/>
      </memberdef>
      <memberdef kind="function" id="clutil_8h_1a4178c667d583d28b4d698290910e6fce" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>const char *</type>
        <definition>const char* cl_get_error_string</definition>
        <argsstring>(int err)</argsstring>
        <name>cl_get_error_string</name>
        <param>
          <type>int</type>
          <declname>err</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/tmp/openpilot/common/clutil.h" line="29" column="12" declfile="/tmp/openpilot/common/clutil.h" declline="29" declcolumn="12"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="preprocessor">#pragma<sp/>once</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2"><highlight class="normal"></highlight></codeline>
<codeline lineno="3"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>__APPLE__</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;OpenCL/cl.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;CL/cl.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="8"><highlight class="normal"></highlight></codeline>
<codeline lineno="9"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;string&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="10"><highlight class="normal"></highlight></codeline>
<codeline lineno="11"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>CL_CHECK(_expr)<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="12"><highlight class="preprocessor"><sp/><sp/>do<sp/>{<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="13"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>assert(CL_SUCCESS<sp/>==<sp/>(_expr));<sp/>\</highlight></codeline>
<codeline lineno="14"><highlight class="preprocessor"><sp/><sp/>}<sp/>while<sp/>(0)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="15"><highlight class="normal"></highlight></codeline>
<codeline lineno="16"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>CL_CHECK_ERR(_expr)<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="17"><highlight class="preprocessor"><sp/><sp/>({<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="18"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>cl_int<sp/>err<sp/>=<sp/>CL_INVALID_VALUE;<sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="19"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>__typeof__(_expr)<sp/>_ret<sp/>=<sp/>_expr;<sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="20"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>assert(_ret&amp;&amp;<sp/>err<sp/>==<sp/>CL_SUCCESS);<sp/>\</highlight></codeline>
<codeline lineno="21"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>_ret;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="22"><highlight class="preprocessor"><sp/><sp/>})</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="23"><highlight class="normal"></highlight></codeline>
<codeline lineno="24"><highlight class="normal">cl_device_id<sp/>cl_get_device_id(cl_device_type<sp/>device_type);</highlight></codeline>
<codeline lineno="25"><highlight class="normal">cl_context<sp/>cl_create_context(cl_device_id<sp/>device_id);</highlight></codeline>
<codeline lineno="26"><highlight class="normal">cl_program<sp/>cl_program_from_source(cl_context<sp/>ctx,<sp/>cl_device_id<sp/>device_id,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string&amp;<sp/>src,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>args<sp/>=<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="27"><highlight class="normal">cl_program<sp/>cl_program_from_binary(cl_context<sp/>ctx,<sp/>cl_device_id<sp/>device_id,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>uint8_t*<sp/>binary,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>length,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>args<sp/>=<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="28"><highlight class="normal">cl_program<sp/>cl_program_from_file(cl_context<sp/>ctx,<sp/>cl_device_id<sp/>device_id,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>path,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>args);</highlight></codeline>
<codeline lineno="29"><highlight class="normal"></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>cl_get_error_string(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>err);</highlight></codeline>
    </programlisting>
    <location file="/tmp/openpilot/common/clutil.h"/>
  </compounddef>
</doxygen>
