<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.17">
  <compounddef id="namespaceutil" kind="namespace" language="C++">
    <compoundname>util</compoundname>
      <sectiondef kind="func">
      <memberdef kind="function" id="util_8h_1a9f26b7567cde93c32bff1695ca0090b1" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void util::set_thread_name</definition>
        <argsstring>(const char *name)</argsstring>
        <name>set_thread_name</name>
        <param>
          <type>const char *</type>
          <declname>name</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/tmp/openpilot/common/util.h" line="44" column="6" declfile="/tmp/openpilot/common/util.h" declline="44" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="util_8h_1aa1f982fac2d881cfe1922781f061d088" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int util::set_realtime_priority</definition>
        <argsstring>(int level)</argsstring>
        <name>set_realtime_priority</name>
        <param>
          <type>int</type>
          <declname>level</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/tmp/openpilot/common/util.h" line="45" column="5" declfile="/tmp/openpilot/common/util.h" declline="45" declcolumn="5"/>
      </memberdef>
      <memberdef kind="function" id="util_8h_1a9af139da62043b6cc544c16417d5d714" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int util::set_core_affinity</definition>
        <argsstring>(std::vector&lt; int &gt; cores)</argsstring>
        <name>set_core_affinity</name>
        <param>
          <type>std::vector&lt; int &gt;</type>
          <declname>cores</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/tmp/openpilot/common/util.h" line="46" column="5" declfile="/tmp/openpilot/common/util.h" declline="46" declcolumn="5"/>
      </memberdef>
      <memberdef kind="function" id="util_8h_1adbfb00c33e911498cc33af700d6ce317" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int util::set_file_descriptor_limit</definition>
        <argsstring>(uint64_t limit)</argsstring>
        <name>set_file_descriptor_limit</name>
        <param>
          <type>uint64_t</type>
          <declname>limit</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/tmp/openpilot/common/util.h" line="47" column="5" declfile="/tmp/openpilot/common/util.h" declline="47" declcolumn="5"/>
      </memberdef>
      <memberdef kind="function" id="util_8h_1a798e44c100313b9917e9f273ef830b96" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>struct tm</type>
        <definition>struct tm util::get_time</definition>
        <argsstring>()</argsstring>
        <name>get_time</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/tmp/openpilot/common/util.h" line="47" column="5" declfile="/tmp/openpilot/common/util.h" declline="47" declcolumn="5"/>
      </memberdef>
      <memberdef kind="function" id="util_8h_1ae54af6f90871c2b313a0d8b19c386c62" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool util::time_valid</definition>
        <argsstring>(struct tm sys_time)</argsstring>
        <name>time_valid</name>
        <param>
          <type>struct tm</type>
          <declname>sys_time</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/tmp/openpilot/common/util.h" line="51" column="6" declfile="/tmp/openpilot/common/util.h" declline="51" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="util_8h_1a4e1ae69cdbf7408ed58cedf60df2842e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type>T</type>
        <definition>T util::map_val</definition>
        <argsstring>(T x, T a1, T a2, T b1, T b2)</argsstring>
        <name>map_val</name>
        <param>
          <type>T</type>
          <declname>x</declname>
        </param>
        <param>
          <type>T</type>
          <declname>a1</declname>
        </param>
        <param>
          <type>T</type>
          <declname>a2</declname>
        </param>
        <param>
          <type>T</type>
          <declname>b1</declname>
        </param>
        <param>
          <type>T</type>
          <declname>b2</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/tmp/openpilot/common/util.h" line="57" column="3" bodyfile="/tmp/openpilot/common/util.h" bodystart="57" bodyend="62"/>
      </memberdef>
      <memberdef kind="function" id="util_8h_1a5a9919cfa1e4f70dd7306bf2b3803256" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename...</type>
            <declname>Args</declname>
            <defname>Args</defname>
          </param>
        </templateparamlist>
        <type>std::string</type>
        <definition>std::string util::string_format</definition>
        <argsstring>(const std::string &amp;format, Args... args)</argsstring>
        <name>string_format</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>format</declname>
        </param>
        <param>
          <type>Args...</type>
          <declname>args</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/tmp/openpilot/common/util.h" line="67" column="13" bodyfile="/tmp/openpilot/common/util.h" bodystart="67" bodyend="72"/>
      </memberdef>
      <memberdef kind="function" id="util_8h_1a74d9b57c09e55701d0480f073eb49d88" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::string</type>
        <definition>std::string util::getenv</definition>
        <argsstring>(const char *key, std::string default_val=&quot;&quot;)</argsstring>
        <name>getenv</name>
        <param>
          <type>const char *</type>
          <declname>key</declname>
        </param>
        <param>
          <type>std::string</type>
          <declname>default_val</declname>
          <defval>&quot;&quot;</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/tmp/openpilot/common/util.h" line="74" column="13" declfile="/tmp/openpilot/common/util.h" declline="74" declcolumn="13"/>
      </memberdef>
      <memberdef kind="function" id="util_8h_1a5a16e60f1b443b704cac98cb3e514d5e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int util::getenv</definition>
        <argsstring>(const char *key, int default_val)</argsstring>
        <name>getenv</name>
        <param>
          <type>const char *</type>
          <declname>key</declname>
        </param>
        <param>
          <type>int</type>
          <declname>default_val</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/tmp/openpilot/common/util.h" line="75" column="5" declfile="/tmp/openpilot/common/util.h" declline="75" declcolumn="5"/>
      </memberdef>
      <memberdef kind="function" id="util_8h_1af19e1b9035562194fb9a789431537172" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>float</type>
        <definition>float util::getenv</definition>
        <argsstring>(const char *key, float default_val)</argsstring>
        <name>getenv</name>
        <param>
          <type>const char *</type>
          <declname>key</declname>
        </param>
        <param>
          <type>float</type>
          <declname>default_val</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/tmp/openpilot/common/util.h" line="76" column="7" declfile="/tmp/openpilot/common/util.h" declline="76" declcolumn="7"/>
      </memberdef>
      <memberdef kind="function" id="util_8h_1a3b25498aa8b46e2d60750b299af992f5" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::string</type>
        <definition>std::string util::hexdump</definition>
        <argsstring>(const uint8_t *in, const size_t size)</argsstring>
        <name>hexdump</name>
        <param>
          <type>const uint8_t *</type>
          <declname>in</declname>
        </param>
        <param>
          <type>const size_t</type>
          <declname>size</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/tmp/openpilot/common/util.h" line="78" column="13" declfile="/tmp/openpilot/common/util.h" declline="78" declcolumn="13"/>
      </memberdef>
      <memberdef kind="function" id="util_8h_1acc127df8adf18d6ef96b4d10256cd954" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::string</type>
        <definition>std::string util::dir_name</definition>
        <argsstring>(std::string const &amp;path)</argsstring>
        <name>dir_name</name>
        <param>
          <type>std::string const &amp;</type>
          <declname>path</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/tmp/openpilot/common/util.h" line="79" column="13" declfile="/tmp/openpilot/common/util.h" declline="79" declcolumn="13"/>
      </memberdef>
      <memberdef kind="function" id="util_8h_1a4174e38010040c9f5914f816c30e849b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool util::starts_with</definition>
        <argsstring>(const std::string &amp;s1, const std::string &amp;s2)</argsstring>
        <name>starts_with</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>s1</declname>
        </param>
        <param>
          <type>const std::string &amp;</type>
          <declname>s2</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/tmp/openpilot/common/util.h" line="80" column="6" declfile="/tmp/openpilot/common/util.h" declline="80" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="util_8h_1a50706f20322c278f237dcb4010c9283e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool util::ends_with</definition>
        <argsstring>(const std::string &amp;s1, const std::string &amp;s2)</argsstring>
        <name>ends_with</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>s1</declname>
        </param>
        <param>
          <type>const std::string &amp;</type>
          <declname>s2</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/tmp/openpilot/common/util.h" line="81" column="6" declfile="/tmp/openpilot/common/util.h" declline="81" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="util_8h_1a3ccef4f3256469bf293473d71e47d5f1" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int util::random_int</definition>
        <argsstring>(int min, int max)</argsstring>
        <name>random_int</name>
        <param>
          <type>int</type>
          <declname>min</declname>
        </param>
        <param>
          <type>int</type>
          <declname>max</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/tmp/openpilot/common/util.h" line="84" column="5" declfile="/tmp/openpilot/common/util.h" declline="84" declcolumn="5"/>
      </memberdef>
      <memberdef kind="function" id="util_8h_1a7b4d61515298596b89e9516cba8b44b3" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::string</type>
        <definition>std::string util::random_string</definition>
        <argsstring>(std::string::size_type length)</argsstring>
        <name>random_string</name>
        <param>
          <type>std::string::size_type</type>
          <declname>length</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/tmp/openpilot/common/util.h" line="85" column="13" declfile="/tmp/openpilot/common/util.h" declline="85" declcolumn="13"/>
      </memberdef>
      <memberdef kind="function" id="util_8h_1ade10396eedd041c79d88e535258bdd3b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::string</type>
        <definition>std::string util::read_file</definition>
        <argsstring>(const std::string &amp;fn)</argsstring>
        <name>read_file</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>fn</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/tmp/openpilot/common/util.h" line="88" column="13" declfile="/tmp/openpilot/common/util.h" declline="88" declcolumn="13"/>
      </memberdef>
      <memberdef kind="function" id="util_8h_1a5c41a1b482b7e00a9f0477f6f1075949" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::map&lt; std::string, std::string &gt;</type>
        <definition>std::map&lt;std::string, std::string&gt; util::read_files_in_dir</definition>
        <argsstring>(const std::string &amp;path)</argsstring>
        <name>read_files_in_dir</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>path</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/tmp/openpilot/common/util.h" line="89" column="10" declfile="/tmp/openpilot/common/util.h" declline="89" declcolumn="10"/>
      </memberdef>
      <memberdef kind="function" id="util_8h_1a0501793e10fefa92b9ba8490acb80e1f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int util::write_file</definition>
        <argsstring>(const char *path, const void *data, size_t size, int flags=O_WRONLY, mode_t mode=0664)</argsstring>
        <name>write_file</name>
        <param>
          <type>const char *</type>
          <declname>path</declname>
        </param>
        <param>
          <type>const void *</type>
          <declname>data</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>size</declname>
        </param>
        <param>
          <type>int</type>
          <declname>flags</declname>
          <defval>O_WRONLY</defval>
        </param>
        <param>
          <type>mode_t</type>
          <declname>mode</declname>
          <defval>0664</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/tmp/openpilot/common/util.h" line="90" column="5" declfile="/tmp/openpilot/common/util.h" declline="90" declcolumn="5"/>
      </memberdef>
      <memberdef kind="function" id="util_8h_1a53f0161971461c3cce983fae6539b75c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>FILE *</type>
        <definition>FILE* util::safe_fopen</definition>
        <argsstring>(const char *filename, const char *mode)</argsstring>
        <name>safe_fopen</name>
        <param>
          <type>const char *</type>
          <declname>filename</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>mode</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/tmp/openpilot/common/util.h" line="92" column="6" declfile="/tmp/openpilot/common/util.h" declline="92" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="util_8h_1a4b95985eaf835160e8a63593f1f239f6" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>size_t</type>
        <definition>size_t util::safe_fwrite</definition>
        <argsstring>(const void *ptr, size_t size, size_t count, FILE *stream)</argsstring>
        <name>safe_fwrite</name>
        <param>
          <type>const void *</type>
          <declname>ptr</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>size</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>count</declname>
        </param>
        <param>
          <type>FILE *</type>
          <declname>stream</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/tmp/openpilot/common/util.h" line="93" column="8" declfile="/tmp/openpilot/common/util.h" declline="93" declcolumn="8"/>
      </memberdef>
      <memberdef kind="function" id="util_8h_1ace342d3571f8d5750eb652f1b34141a1" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int util::safe_fflush</definition>
        <argsstring>(FILE *stream)</argsstring>
        <name>safe_fflush</name>
        <param>
          <type>FILE *</type>
          <declname>stream</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/tmp/openpilot/common/util.h" line="94" column="5" declfile="/tmp/openpilot/common/util.h" declline="94" declcolumn="5"/>
      </memberdef>
      <memberdef kind="function" id="util_8h_1a6915903a6f237bf080199bc7d86e501b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int util::safe_ioctl</definition>
        <argsstring>(int fd, unsigned long request, void *argp)</argsstring>
        <name>safe_ioctl</name>
        <param>
          <type>int</type>
          <declname>fd</declname>
        </param>
        <param>
          <type>unsigned long</type>
          <declname>request</declname>
        </param>
        <param>
          <type>void *</type>
          <declname>argp</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/tmp/openpilot/common/util.h" line="95" column="5" declfile="/tmp/openpilot/common/util.h" declline="95" declcolumn="5"/>
      </memberdef>
      <memberdef kind="function" id="util_8h_1ad0f77d1af6eb3044c57fc79d4d507e09" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::string</type>
        <definition>std::string util::readlink</definition>
        <argsstring>(const std::string &amp;path)</argsstring>
        <name>readlink</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>path</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/tmp/openpilot/common/util.h" line="97" column="13" declfile="/tmp/openpilot/common/util.h" declline="97" declcolumn="13"/>
      </memberdef>
      <memberdef kind="function" id="util_8h_1aee53b9fbf48b788302dfb15b3336bf74" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool util::file_exists</definition>
        <argsstring>(const std::string &amp;fn)</argsstring>
        <name>file_exists</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>fn</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/tmp/openpilot/common/util.h" line="98" column="6" declfile="/tmp/openpilot/common/util.h" declline="98" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="util_8h_1ab92bd4c259161f7f53fea0c13ee33289" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool util::create_directories</definition>
        <argsstring>(const std::string &amp;dir, mode_t mode)</argsstring>
        <name>create_directories</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>dir</declname>
        </param>
        <param>
          <type>mode_t</type>
          <declname>mode</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/tmp/openpilot/common/util.h" line="99" column="6" declfile="/tmp/openpilot/common/util.h" declline="99" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="util_8h_1a6bf7f11317f2959e14f13b4b3d3d73f5" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::string</type>
        <definition>std::string util::check_output</definition>
        <argsstring>(const std::string &amp;command)</argsstring>
        <name>check_output</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>command</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/tmp/openpilot/common/util.h" line="101" column="13" declfile="/tmp/openpilot/common/util.h" declline="101" declcolumn="13"/>
      </memberdef>
      <memberdef kind="function" id="util_8h_1a9ce6da27c81c0ec839659f3788371228" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void util::sleep_for</definition>
        <argsstring>(const int milliseconds)</argsstring>
        <name>sleep_for</name>
        <param>
          <type>const int</type>
          <declname>milliseconds</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/tmp/openpilot/common/util.h" line="103" column="13" bodyfile="/tmp/openpilot/common/util.h" bodystart="103" bodyend="107"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <location file="/tmp/openpilot/common/util.h" line="42" column="14"/>
  </compounddef>
</doxygen>
