<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.17">
  <compounddef id="classcabana_1_1_msg" kind="class" language="C++" prot="public">
    <compoundname>cabana::Msg</compoundname>
      <sectiondef kind="public-attrib">
      <memberdef kind="variable" id="classcabana_1_1_msg_1af20f1813320b33b29c5fd3117a6d9298" prot="public" static="no" mutable="no">
        <type>uint32_t</type>
        <definition>uint32_t cabana::Msg::address</definition>
        <argsstring></argsstring>
        <name>address</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/tmp/openpilot/tools/cabana/dbc/dbc.h" line="106" column="12" bodyfile="/tmp/openpilot/tools/cabana/dbc/dbc.h" bodystart="106" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classcabana_1_1_msg_1a86029e8f59d91b1896c60d6775bcc1d5" prot="public" static="no" mutable="no">
        <type>QString</type>
        <definition>QString cabana::Msg::name</definition>
        <argsstring></argsstring>
        <name>name</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/tmp/openpilot/tools/cabana/dbc/dbc.h" line="107" column="11" bodyfile="/tmp/openpilot/tools/cabana/dbc/dbc.h" bodystart="107" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classcabana_1_1_msg_1ab464e7455ef1e13b1a2899686f45c3c2" prot="public" static="no" mutable="no">
        <type>uint32_t</type>
        <definition>uint32_t cabana::Msg::size</definition>
        <argsstring></argsstring>
        <name>size</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/tmp/openpilot/tools/cabana/dbc/dbc.h" line="108" column="12" bodyfile="/tmp/openpilot/tools/cabana/dbc/dbc.h" bodystart="108" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classcabana_1_1_msg_1af92a63cd6f5d604fa6a7b6381d729c99" prot="public" static="no" mutable="no">
        <type>QString</type>
        <definition>QString cabana::Msg::comment</definition>
        <argsstring></argsstring>
        <name>comment</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/tmp/openpilot/tools/cabana/dbc/dbc.h" line="109" column="11" bodyfile="/tmp/openpilot/tools/cabana/dbc/dbc.h" bodystart="109" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classcabana_1_1_msg_1a9dc42d6c43ff16c893f5eb0c1eeef546" prot="public" static="no" mutable="no">
        <type>QString</type>
        <definition>QString cabana::Msg::transmitter</definition>
        <argsstring></argsstring>
        <name>transmitter</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/tmp/openpilot/tools/cabana/dbc/dbc.h" line="110" column="11" bodyfile="/tmp/openpilot/tools/cabana/dbc/dbc.h" bodystart="110" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classcabana_1_1_msg_1aacedef8aae50c83272d7209b88478f08" prot="public" static="no" mutable="no">
        <type>std::vector&lt; <ref refid="classcabana_1_1_signal" kindref="compound">cabana::Signal</ref> * &gt;</type>
        <definition>std::vector&lt;cabana::Signal *&gt; cabana::Msg::sigs</definition>
        <argsstring></argsstring>
        <name>sigs</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/tmp/openpilot/tools/cabana/dbc/dbc.h" line="111" column="15" bodyfile="/tmp/openpilot/tools/cabana/dbc/dbc.h" bodystart="111" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classcabana_1_1_msg_1a0e826cd69c43ebe9146ac8750c995bf2" prot="public" static="no" mutable="no">
        <type>std::vector&lt; uint8_t &gt;</type>
        <definition>std::vector&lt;uint8_t&gt; cabana::Msg::mask</definition>
        <argsstring></argsstring>
        <name>mask</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/tmp/openpilot/tools/cabana/dbc/dbc.h" line="113" column="15" bodyfile="/tmp/openpilot/tools/cabana/dbc/dbc.h" bodystart="113" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classcabana_1_1_msg_1a0922a1a61e71ccb94dc8966cb76bc539" prot="public" static="no" mutable="no">
        <type><ref refid="classcabana_1_1_signal" kindref="compound">cabana::Signal</ref> *</type>
        <definition>cabana::Signal* cabana::Msg::multiplexor</definition>
        <argsstring></argsstring>
        <name>multiplexor</name>
        <initializer>= nullptr</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/tmp/openpilot/tools/cabana/dbc/dbc.h" line="114" column="18" bodyfile="/tmp/openpilot/tools/cabana/dbc/dbc.h" bodystart="114" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="classcabana_1_1_msg_1ae26b491d9e4d6eb7ff430f6182c850e8" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>cabana::Msg::Msg</definition>
        <argsstring>()=default</argsstring>
        <name>Msg</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/tmp/openpilot/tools/cabana/dbc/dbc.h" line="93" column="3"/>
      </memberdef>
      <memberdef kind="function" id="classcabana_1_1_msg_1a78f6f7dad8d8f8fbdd7bf9de6d6be16d" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type></type>
        <definition>cabana::Msg::Msg</definition>
        <argsstring>(const Msg &amp;other)</argsstring>
        <name>Msg</name>
        <param>
          <type>const <ref refid="classcabana_1_1_msg" kindref="compound">Msg</ref> &amp;</type>
          <declname>other</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/tmp/openpilot/tools/cabana/dbc/dbc.h" line="94" column="3" bodyfile="/tmp/openpilot/tools/cabana/dbc/dbc.h" bodystart="94" bodyend="94"/>
      </memberdef>
      <memberdef kind="function" id="classcabana_1_1_msg_1a7efec5c96cd8553babf2582056ebaad5" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>cabana::Msg::~Msg</definition>
        <argsstring>()</argsstring>
        <name>~Msg</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/tmp/openpilot/tools/cabana/dbc/dbc.h" line="95" column="3"/>
      </memberdef>
      <memberdef kind="function" id="classcabana_1_1_msg_1ac6353429b8d6e43f78e60881a03ce23e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classcabana_1_1_signal" kindref="compound">cabana::Signal</ref> *</type>
        <definition>cabana::Signal* cabana::Msg::addSignal</definition>
        <argsstring>(const cabana::Signal &amp;sig)</argsstring>
        <name>addSignal</name>
        <param>
          <type>const <ref refid="classcabana_1_1_signal" kindref="compound">cabana::Signal</ref> &amp;</type>
          <declname>sig</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/tmp/openpilot/tools/cabana/dbc/dbc.h" line="96" column="18"/>
      </memberdef>
      <memberdef kind="function" id="classcabana_1_1_msg_1a30656540065936d3d19f55c1c1ebb5a3" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classcabana_1_1_signal" kindref="compound">cabana::Signal</ref> *</type>
        <definition>cabana::Signal* cabana::Msg::updateSignal</definition>
        <argsstring>(const QString &amp;sig_name, const cabana::Signal &amp;sig)</argsstring>
        <name>updateSignal</name>
        <param>
          <type>const QString &amp;</type>
          <declname>sig_name</declname>
        </param>
        <param>
          <type>const <ref refid="classcabana_1_1_signal" kindref="compound">cabana::Signal</ref> &amp;</type>
          <declname>sig</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/tmp/openpilot/tools/cabana/dbc/dbc.h" line="97" column="18"/>
      </memberdef>
      <memberdef kind="function" id="classcabana_1_1_msg_1a3e93c08df4c0a0fe574368eb0fde2188" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void cabana::Msg::removeSignal</definition>
        <argsstring>(const QString &amp;sig_name)</argsstring>
        <name>removeSignal</name>
        <param>
          <type>const QString &amp;</type>
          <declname>sig_name</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/tmp/openpilot/tools/cabana/dbc/dbc.h" line="98" column="8"/>
      </memberdef>
      <memberdef kind="function" id="classcabana_1_1_msg_1a521af73ccb9416c91158c176b2b79194" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classcabana_1_1_msg" kindref="compound">Msg</ref> &amp;</type>
        <definition>Msg&amp; cabana::Msg::operator=</definition>
        <argsstring>(const Msg &amp;other)</argsstring>
        <name>operator=</name>
        <param>
          <type>const <ref refid="classcabana_1_1_msg" kindref="compound">Msg</ref> &amp;</type>
          <declname>other</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/tmp/openpilot/tools/cabana/dbc/dbc.h" line="99" column="7"/>
      </memberdef>
      <memberdef kind="function" id="classcabana_1_1_msg_1a9eaade7a956bef52a03c44aeca09c545" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int cabana::Msg::indexOf</definition>
        <argsstring>(const cabana::Signal *sig) const</argsstring>
        <name>indexOf</name>
        <param>
          <type>const <ref refid="classcabana_1_1_signal" kindref="compound">cabana::Signal</ref> *</type>
          <declname>sig</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/tmp/openpilot/tools/cabana/dbc/dbc.h" line="100" column="7"/>
      </memberdef>
      <memberdef kind="function" id="classcabana_1_1_msg_1aa2b559bc5e228dc495e5533384bf2970" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classcabana_1_1_signal" kindref="compound">cabana::Signal</ref> *</type>
        <definition>cabana::Signal* cabana::Msg::sig</definition>
        <argsstring>(const QString &amp;sig_name) const</argsstring>
        <name>sig</name>
        <param>
          <type>const QString &amp;</type>
          <declname>sig_name</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/tmp/openpilot/tools/cabana/dbc/dbc.h" line="101" column="18"/>
      </memberdef>
      <memberdef kind="function" id="classcabana_1_1_msg_1a62a4b6e8e08460f4de267b146e4b56f4" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>QString</type>
        <definition>QString cabana::Msg::newSignalName</definition>
        <argsstring>()</argsstring>
        <name>newSignalName</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/tmp/openpilot/tools/cabana/dbc/dbc.h" line="102" column="11"/>
      </memberdef>
      <memberdef kind="function" id="classcabana_1_1_msg_1a8733acca72c6d7797b0eedd7b5d73e33" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void cabana::Msg::update</definition>
        <argsstring>()</argsstring>
        <name>update</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/tmp/openpilot/tools/cabana/dbc/dbc.h" line="103" column="8"/>
      </memberdef>
      <memberdef kind="function" id="classcabana_1_1_msg_1a3839c047ca6424e52d27fda008756d73" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>const std::vector&lt; <ref refid="classcabana_1_1_signal" kindref="compound">cabana::Signal</ref> * &gt; &amp;</type>
        <definition>const std::vector&lt;cabana::Signal *&gt;&amp; cabana::Msg::getSignals</definition>
        <argsstring>() const</argsstring>
        <name>getSignals</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/tmp/openpilot/tools/cabana/dbc/dbc.h" line="104" column="28" bodyfile="/tmp/openpilot/tools/cabana/dbc/dbc.h" bodystart="104" bodyend="104"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <collaborationgraph>
      <node id="1">
        <label>cabana::Msg</label>
        <link refid="classcabana_1_1_msg"/>
        <childnode refid="2" relation="usage">
          <edgelabel>multiplexor</edgelabel>
        </childnode>
      </node>
      <node id="2">
        <label>cabana::Signal</label>
        <link refid="classcabana_1_1_signal"/>
        <childnode refid="2" relation="usage">
          <edgelabel>multiplexor</edgelabel>
        </childnode>
      </node>
    </collaborationgraph>
    <location file="/tmp/openpilot/tools/cabana/dbc/dbc.h" line="91" column="10" bodyfile="/tmp/openpilot/tools/cabana/dbc/dbc.h" bodystart="91" bodyend="115"/>
    <listofallmembers>
      <member refid="classcabana_1_1_msg_1af20f1813320b33b29c5fd3117a6d9298" prot="public" virt="non-virtual"><scope>cabana::Msg</scope><name>address</name></member>
      <member refid="classcabana_1_1_msg_1ac6353429b8d6e43f78e60881a03ce23e" prot="public" virt="non-virtual"><scope>cabana::Msg</scope><name>addSignal</name></member>
      <member refid="classcabana_1_1_msg_1af92a63cd6f5d604fa6a7b6381d729c99" prot="public" virt="non-virtual"><scope>cabana::Msg</scope><name>comment</name></member>
      <member refid="classcabana_1_1_msg_1a3839c047ca6424e52d27fda008756d73" prot="public" virt="non-virtual"><scope>cabana::Msg</scope><name>getSignals</name></member>
      <member refid="classcabana_1_1_msg_1a9eaade7a956bef52a03c44aeca09c545" prot="public" virt="non-virtual"><scope>cabana::Msg</scope><name>indexOf</name></member>
      <member refid="classcabana_1_1_msg_1a0e826cd69c43ebe9146ac8750c995bf2" prot="public" virt="non-virtual"><scope>cabana::Msg</scope><name>mask</name></member>
      <member refid="classcabana_1_1_msg_1ae26b491d9e4d6eb7ff430f6182c850e8" prot="public" virt="non-virtual"><scope>cabana::Msg</scope><name>Msg</name></member>
      <member refid="classcabana_1_1_msg_1a78f6f7dad8d8f8fbdd7bf9de6d6be16d" prot="public" virt="non-virtual"><scope>cabana::Msg</scope><name>Msg</name></member>
      <member refid="classcabana_1_1_msg_1a0922a1a61e71ccb94dc8966cb76bc539" prot="public" virt="non-virtual"><scope>cabana::Msg</scope><name>multiplexor</name></member>
      <member refid="classcabana_1_1_msg_1a86029e8f59d91b1896c60d6775bcc1d5" prot="public" virt="non-virtual"><scope>cabana::Msg</scope><name>name</name></member>
      <member refid="classcabana_1_1_msg_1a62a4b6e8e08460f4de267b146e4b56f4" prot="public" virt="non-virtual"><scope>cabana::Msg</scope><name>newSignalName</name></member>
      <member refid="classcabana_1_1_msg_1a521af73ccb9416c91158c176b2b79194" prot="public" virt="non-virtual"><scope>cabana::Msg</scope><name>operator=</name></member>
      <member refid="classcabana_1_1_msg_1a3e93c08df4c0a0fe574368eb0fde2188" prot="public" virt="non-virtual"><scope>cabana::Msg</scope><name>removeSignal</name></member>
      <member refid="classcabana_1_1_msg_1aa2b559bc5e228dc495e5533384bf2970" prot="public" virt="non-virtual"><scope>cabana::Msg</scope><name>sig</name></member>
      <member refid="classcabana_1_1_msg_1aacedef8aae50c83272d7209b88478f08" prot="public" virt="non-virtual"><scope>cabana::Msg</scope><name>sigs</name></member>
      <member refid="classcabana_1_1_msg_1ab464e7455ef1e13b1a2899686f45c3c2" prot="public" virt="non-virtual"><scope>cabana::Msg</scope><name>size</name></member>
      <member refid="classcabana_1_1_msg_1a9dc42d6c43ff16c893f5eb0c1eeef546" prot="public" virt="non-virtual"><scope>cabana::Msg</scope><name>transmitter</name></member>
      <member refid="classcabana_1_1_msg_1a8733acca72c6d7797b0eedd7b5d73e33" prot="public" virt="non-virtual"><scope>cabana::Msg</scope><name>update</name></member>
      <member refid="classcabana_1_1_msg_1a30656540065936d3d19f55c1c1ebb5a3" prot="public" virt="non-virtual"><scope>cabana::Msg</scope><name>updateSignal</name></member>
      <member refid="classcabana_1_1_msg_1a7efec5c96cd8553babf2582056ebaad5" prot="public" virt="non-virtual"><scope>cabana::Msg</scope><name>~Msg</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
