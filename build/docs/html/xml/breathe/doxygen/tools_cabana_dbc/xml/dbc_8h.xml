<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.17">
  <compounddef id="dbc_8h" kind="file" language="C++">
    <compoundname>dbc.h</compoundname>
    <includes local="no">limits</includes>
    <includes local="no">string</includes>
    <includes local="no">utility</includes>
    <includes local="no">vector</includes>
    <includes local="no">QColor</includes>
    <includes local="no">QList</includes>
    <includes local="no">QMetaType</includes>
    <includes local="no">QString</includes>
    <includes local="yes">opendbc/can/common_dbc.h</includes>
    <includedby refid="dbcfile_8h" local="yes">/tmp/openpilot/tools/cabana/dbc/dbcfile.h</includedby>
    <incdepgraph>
      <node id="2">
        <label>limits</label>
      </node>
      <node id="10">
        <label>opendbc/can/common_dbc.h</label>
      </node>
      <node id="7">
        <label>QList</label>
      </node>
      <node id="8">
        <label>QMetaType</label>
      </node>
      <node id="3">
        <label>string</label>
      </node>
      <node id="5">
        <label>vector</label>
      </node>
      <node id="4">
        <label>utility</label>
      </node>
      <node id="9">
        <label>QString</label>
      </node>
      <node id="6">
        <label>QColor</label>
      </node>
      <node id="1">
        <label>/tmp/openpilot/tools/cabana/dbc/dbc.h</label>
        <link refid="dbc_8h"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="6" relation="include">
        </childnode>
        <childnode refid="7" relation="include">
        </childnode>
        <childnode refid="8" relation="include">
        </childnode>
        <childnode refid="9" relation="include">
        </childnode>
        <childnode refid="10" relation="include">
        </childnode>
      </node>
    </incdepgraph>
    <invincdepgraph>
      <node id="3">
        <label>/tmp/openpilot/tools/cabana/dbc/dbcmanager.h</label>
        <link refid="dbcmanager_8h_source"/>
      </node>
      <node id="1">
        <label>/tmp/openpilot/tools/cabana/dbc/dbc.h</label>
        <link refid="dbc_8h"/>
        <childnode refid="2" relation="include">
        </childnode>
      </node>
      <node id="2">
        <label>/tmp/openpilot/tools/cabana/dbc/dbcfile.h</label>
        <link refid="dbcfile_8h_source"/>
        <childnode refid="3" relation="include">
        </childnode>
      </node>
    </invincdepgraph>
    <innerclass refid="struct_message_id" prot="public">MessageId</innerclass>
    <innerclass refid="structstd_1_1hash_3_01_message_id_01_4" prot="public">std::hash&lt; MessageId &gt;</innerclass>
    <innerclass refid="classcabana_1_1_signal" prot="public">cabana::Signal</innerclass>
    <innerclass refid="classcabana_1_1_msg" prot="public">cabana::Msg</innerclass>
    <innernamespace refid="namespacecabana">cabana</innernamespace>
      <sectiondef kind="typedef">
      <memberdef kind="typedef" id="dbc_8h_1acaf2ba13c20ffbbc4e3ce7d821612552" prot="public" static="no">
        <type>QList&lt; std::pair&lt; double, QString &gt; &gt;</type>
        <definition>typedef QList&lt;std::pair&lt;double, QString&gt; &gt; ValueDescription</definition>
        <argsstring></argsstring>
        <name>ValueDescription</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/tmp/openpilot/tools/cabana/dbc/dbc.h" line="51" column="15" bodyfile="/tmp/openpilot/tools/cabana/dbc/dbc.h" bodystart="51" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="var">
      <memberdef kind="variable" id="dbc_8h_1a30118f156b63078bb6e45019edac4096" prot="public" static="no" mutable="no">
        <type>const QString</type>
        <definition>const QString UNTITLED</definition>
        <argsstring></argsstring>
        <name>UNTITLED</name>
        <initializer>= &quot;untitled&quot;</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/tmp/openpilot/tools/cabana/dbc/dbc.h" line="15" column="15" bodyfile="/tmp/openpilot/tools/cabana/dbc/dbc.h" bodystart="15" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="dbc_8h_1ab89ed880ddd0eb9ca7025cddbaad6366" prot="public" static="no" mutable="no">
        <type>const QString</type>
        <definition>const QString DEFAULT_NODE_NAME</definition>
        <argsstring></argsstring>
        <name>DEFAULT_NODE_NAME</name>
        <initializer>= &quot;XXX&quot;</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/tmp/openpilot/tools/cabana/dbc/dbc.h" line="16" column="15" bodyfile="/tmp/openpilot/tools/cabana/dbc/dbc.h" bodystart="16" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="func">
      <memberdef kind="function" id="dbc_8h_1a11d43e548015df2cccf4aff0fd854903" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>uint</type>
        <definition>uint qHash</definition>
        <argsstring>(const MessageId &amp;item)</argsstring>
        <name>qHash</name>
        <param>
          <type>const <ref refid="struct_message_id" kindref="compound">MessageId</ref> &amp;</type>
          <declname>item</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/tmp/openpilot/tools/cabana/dbc/dbc.h" line="43" column="6" declfile="/tmp/openpilot/tools/cabana/dbc/dbc.h" declline="43" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="dbc_8h_1a664559f5ab136abae00e0f8916ee68f1" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>Q_DECLARE_METATYPE</definition>
        <argsstring>(MessageId)</argsstring>
        <name>Q_DECLARE_METATYPE</name>
        <param>
          <type><ref refid="struct_message_id" kindref="compound">MessageId</ref></type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/tmp/openpilot/tools/cabana/dbc/dbc.h" line="44" column="1" declfile="/tmp/openpilot/tools/cabana/dbc/dbc.h" declline="44" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="dbc_8h_1aedc17f5f0bfc4afca168d2166e8bd1ac" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>double</type>
        <definition>double get_raw_value</definition>
        <argsstring>(const uint8_t *data, size_t data_size, const cabana::Signal &amp;sig)</argsstring>
        <name>get_raw_value</name>
        <param>
          <type>const uint8_t *</type>
          <declname>data</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>data_size</declname>
        </param>
        <param>
          <type>const <ref refid="classcabana_1_1_signal" kindref="compound">cabana::Signal</ref> &amp;</type>
          <declname>sig</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/tmp/openpilot/tools/cabana/dbc/dbc.h" line="120" column="8" declfile="/tmp/openpilot/tools/cabana/dbc/dbc.h" declline="120" declcolumn="8"/>
      </memberdef>
      <memberdef kind="function" id="dbc_8h_1ae5e550205676ad340f5be742f066f9ae" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void updateMsbLsb</definition>
        <argsstring>(cabana::Signal &amp;s)</argsstring>
        <name>updateMsbLsb</name>
        <param>
          <type><ref refid="classcabana_1_1_signal" kindref="compound">cabana::Signal</ref> &amp;</type>
          <declname>s</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/tmp/openpilot/tools/cabana/dbc/dbc.h" line="121" column="6" declfile="/tmp/openpilot/tools/cabana/dbc/dbc.h" declline="121" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="dbc_8h_1a9ee4d2dfe313d632b54742a5d3bacb4d" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>int</type>
        <definition>int flipBitPos</definition>
        <argsstring>(int start_bit)</argsstring>
        <name>flipBitPos</name>
        <param>
          <type>int</type>
          <declname>start_bit</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/tmp/openpilot/tools/cabana/dbc/dbc.h" line="122" column="12" bodyfile="/tmp/openpilot/tools/cabana/dbc/dbc.h" bodystart="122" bodyend="122"/>
      </memberdef>
      <memberdef kind="function" id="dbc_8h_1a9256789b534e10a9565903cd8744be9d" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>std::vector&lt; std::string &gt;</type>
        <definition>std::vector&lt;std::string&gt; allDBCNames</definition>
        <argsstring>()</argsstring>
        <name>allDBCNames</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/tmp/openpilot/tools/cabana/dbc/dbc.h" line="123" column="20" bodyfile="/tmp/openpilot/tools/cabana/dbc/dbc.h" bodystart="123" bodyend="123"/>
      </memberdef>
      <memberdef kind="function" id="dbc_8h_1a8cd9f48a855dfa770da54b87ceb29393" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>QString</type>
        <definition>QString doubleToString</definition>
        <argsstring>(double value)</argsstring>
        <name>doubleToString</name>
        <param>
          <type>double</type>
          <declname>value</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/tmp/openpilot/tools/cabana/dbc/dbc.h" line="124" column="16" bodyfile="/tmp/openpilot/tools/cabana/dbc/dbc.h" bodystart="124" bodyend="124"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="preprocessor">#pragma<sp/>once</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2"><highlight class="normal"></highlight></codeline>
<codeline lineno="3"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;limits&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;string&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;utility&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;vector&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7"><highlight class="normal"></highlight></codeline>
<codeline lineno="8"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;QColor&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="9"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;QList&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="10"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;QMetaType&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="11"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;QString&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="12"><highlight class="normal"></highlight></codeline>
<codeline lineno="13"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;opendbc/can/common_dbc.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="14"><highlight class="normal"></highlight></codeline>
<codeline lineno="15"><highlight class="normal"></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>QString<sp/>UNTITLED<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;untitled&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="16"><highlight class="normal"></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>QString<sp/>DEFAULT_NODE_NAME<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;XXX&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="17"><highlight class="normal"></highlight></codeline>
<codeline lineno="18" refid="struct_message_id" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="struct_message_id" kindref="compound">MessageId</ref><sp/>{</highlight></codeline>
<codeline lineno="19"><highlight class="normal"><sp/><sp/>uint8_t<sp/>source<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="20"><highlight class="normal"><sp/><sp/>uint32_t<sp/>address<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="21"><highlight class="normal"></highlight></codeline>
<codeline lineno="22"><highlight class="normal"><sp/><sp/>QString<sp/>toString()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="23"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>QString(</highlight><highlight class="stringliteral">&quot;%1:%2&quot;</highlight><highlight class="normal">).arg(source).arg(address,<sp/>1,<sp/>16);</highlight></codeline>
<codeline lineno="24"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="25"><highlight class="normal"></highlight></codeline>
<codeline lineno="26"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>operator==(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="struct_message_id" kindref="compound">MessageId</ref><sp/>&amp;other)</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="27"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>source<sp/>==<sp/>other.source<sp/>&amp;&amp;<sp/>address<sp/>==<sp/>other.address;</highlight></codeline>
<codeline lineno="28"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="29"><highlight class="normal"></highlight></codeline>
<codeline lineno="30"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>operator!=(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="struct_message_id" kindref="compound">MessageId</ref><sp/>&amp;other)</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="31"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>!(*</highlight><highlight class="keyword">this</highlight><highlight class="normal"><sp/>==<sp/>other);</highlight></codeline>
<codeline lineno="32"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="33"><highlight class="normal"></highlight></codeline>
<codeline lineno="34"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>operator&lt;(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="struct_message_id" kindref="compound">MessageId</ref><sp/>&amp;other)</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="35"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>std::pair{source,<sp/>address}<sp/>&lt;<sp/>std::pair{other.source,<sp/>other.address};</highlight></codeline>
<codeline lineno="36"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="37"><highlight class="normal"></highlight></codeline>
<codeline lineno="38"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>operator&gt;(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="struct_message_id" kindref="compound">MessageId</ref><sp/>&amp;other)</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="39"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>std::pair{source,<sp/>address}<sp/>&gt;<sp/>std::pair{other.source,<sp/>other.address};</highlight></codeline>
<codeline lineno="40"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="41"><highlight class="normal">};</highlight></codeline>
<codeline lineno="42"><highlight class="normal"></highlight></codeline>
<codeline lineno="43"><highlight class="normal">uint<sp/>qHash(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="struct_message_id" kindref="compound">MessageId</ref><sp/>&amp;item);</highlight></codeline>
<codeline lineno="44"><highlight class="normal">Q_DECLARE_METATYPE(<ref refid="struct_message_id" kindref="compound">MessageId</ref>);</highlight></codeline>
<codeline lineno="45"><highlight class="normal"></highlight></codeline>
<codeline lineno="46"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;&gt;</highlight></codeline>
<codeline lineno="47" refid="structstd_1_1hash_3_01_message_id_01_4" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">std::hash&lt;<ref refid="struct_message_id" kindref="compound">MessageId</ref>&gt;<sp/>{</highlight></codeline>
<codeline lineno="48"><highlight class="normal"><sp/><sp/>std::size_t<sp/>operator()(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="struct_message_id" kindref="compound">MessageId</ref><sp/>&amp;k)<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>noexcept<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>qHash(k);<sp/>}</highlight></codeline>
<codeline lineno="49"><highlight class="normal">};</highlight></codeline>
<codeline lineno="50"><highlight class="normal"></highlight></codeline>
<codeline lineno="51"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/>QList&lt;std::pair&lt;double,<sp/>QString&gt;&gt;<sp/>ValueDescription;</highlight></codeline>
<codeline lineno="52"><highlight class="normal"></highlight></codeline>
<codeline lineno="53"><highlight class="normal"></highlight><highlight class="keyword">namespace<sp/></highlight><highlight class="normal">cabana<sp/>{</highlight></codeline>
<codeline lineno="54"><highlight class="normal"></highlight></codeline>
<codeline lineno="55" refid="classcabana_1_1_signal" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal"><ref refid="classcabana_1_1_signal" kindref="compound">Signal</ref><sp/>{</highlight></codeline>
<codeline lineno="56"><highlight class="normal"></highlight><highlight class="keyword">public</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="57"><highlight class="normal"><sp/><sp/><ref refid="classcabana_1_1_signal" kindref="compound">Signal</ref>()<sp/>=<sp/></highlight><highlight class="keywordflow">default</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="58"><highlight class="normal"><sp/><sp/><ref refid="classcabana_1_1_signal" kindref="compound">Signal</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classcabana_1_1_signal" kindref="compound">Signal</ref><sp/>&amp;other)<sp/>=<sp/></highlight><highlight class="keywordflow">default</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="59"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>update();</highlight></codeline>
<codeline lineno="60"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>getValue(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>uint8_t<sp/>*data,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>data_size,<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>*val)<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="61"><highlight class="normal"><sp/><sp/>QString<sp/>formatValue(</highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>value)<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="62"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>operator==(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classcabana_1_1_signal" kindref="compound">cabana::Signal</ref><sp/>&amp;other)<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="63"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>operator!=(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classcabana_1_1_signal" kindref="compound">cabana::Signal</ref><sp/>&amp;other)</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>!(*</highlight><highlight class="keyword">this</highlight><highlight class="normal"><sp/>==<sp/>other);<sp/>}</highlight></codeline>
<codeline lineno="64"><highlight class="normal"></highlight></codeline>
<codeline lineno="65"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">enum<sp/>class</highlight><highlight class="normal"><sp/>Type<sp/>{</highlight></codeline>
<codeline lineno="66"><highlight class="normal"><sp/><sp/><sp/><sp/>Normal<sp/>=<sp/>0,</highlight></codeline>
<codeline lineno="67"><highlight class="normal"><sp/><sp/><sp/><sp/>Multiplexed,</highlight></codeline>
<codeline lineno="68"><highlight class="normal"><sp/><sp/><sp/><sp/>Multiplexor</highlight></codeline>
<codeline lineno="69"><highlight class="normal"><sp/><sp/>};</highlight></codeline>
<codeline lineno="70"><highlight class="normal"></highlight></codeline>
<codeline lineno="71"><highlight class="normal"><sp/><sp/>Type<sp/>type<sp/>=<sp/>Type::Normal;</highlight></codeline>
<codeline lineno="72"><highlight class="normal"><sp/><sp/>QString<sp/>name;</highlight></codeline>
<codeline lineno="73"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>start_bit,<sp/>msb,<sp/>lsb,<sp/>size;</highlight></codeline>
<codeline lineno="74"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>factor<sp/>=<sp/>1.0;</highlight></codeline>
<codeline lineno="75"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>offset<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="76"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>is_signed;</highlight></codeline>
<codeline lineno="77"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>is_little_endian;</highlight></codeline>
<codeline lineno="78"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>min,<sp/>max;</highlight></codeline>
<codeline lineno="79"><highlight class="normal"><sp/><sp/>QString<sp/>unit;</highlight></codeline>
<codeline lineno="80"><highlight class="normal"><sp/><sp/>QString<sp/>comment;</highlight></codeline>
<codeline lineno="81"><highlight class="normal"><sp/><sp/>QString<sp/>receiver_name;</highlight></codeline>
<codeline lineno="82"><highlight class="normal"><sp/><sp/>ValueDescription<sp/>val_desc;</highlight></codeline>
<codeline lineno="83"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>precision<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="84"><highlight class="normal"><sp/><sp/>QColor<sp/>color;</highlight></codeline>
<codeline lineno="85"><highlight class="normal"></highlight></codeline>
<codeline lineno="86"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Multiplexed</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="87"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>multiplex_value<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="88"><highlight class="normal"><sp/><sp/><ref refid="classcabana_1_1_signal" kindref="compound">Signal</ref><sp/>*multiplexor<sp/>=<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="89"><highlight class="normal">};</highlight></codeline>
<codeline lineno="90"><highlight class="normal"></highlight></codeline>
<codeline lineno="91" refid="classcabana_1_1_msg" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal"><ref refid="classcabana_1_1_msg" kindref="compound">Msg</ref><sp/>{</highlight></codeline>
<codeline lineno="92"><highlight class="normal"></highlight><highlight class="keyword">public</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="93"><highlight class="normal"><sp/><sp/><ref refid="classcabana_1_1_msg" kindref="compound">Msg</ref>()<sp/>=<sp/></highlight><highlight class="keywordflow">default</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="94"><highlight class="normal"><sp/><sp/><ref refid="classcabana_1_1_msg" kindref="compound">Msg</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classcabana_1_1_msg" kindref="compound">Msg</ref><sp/>&amp;other)<sp/>{<sp/>*</highlight><highlight class="keyword">this</highlight><highlight class="normal"><sp/>=<sp/>other;<sp/>}</highlight></codeline>
<codeline lineno="95"><highlight class="normal"><sp/><sp/>~<ref refid="classcabana_1_1_msg" kindref="compound">Msg</ref>();</highlight></codeline>
<codeline lineno="96"><highlight class="normal"><sp/><sp/><ref refid="classcabana_1_1_signal" kindref="compound">cabana::Signal</ref><sp/>*addSignal(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classcabana_1_1_signal" kindref="compound">cabana::Signal</ref><sp/>&amp;sig);</highlight></codeline>
<codeline lineno="97"><highlight class="normal"><sp/><sp/><ref refid="classcabana_1_1_signal" kindref="compound">cabana::Signal</ref><sp/>*updateSignal(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>QString<sp/>&amp;sig_name,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classcabana_1_1_signal" kindref="compound">cabana::Signal</ref><sp/>&amp;sig);</highlight></codeline>
<codeline lineno="98"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>removeSignal(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>QString<sp/>&amp;sig_name);</highlight></codeline>
<codeline lineno="99"><highlight class="normal"><sp/><sp/><ref refid="classcabana_1_1_msg" kindref="compound">Msg</ref><sp/>&amp;operator=(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classcabana_1_1_msg" kindref="compound">Msg</ref><sp/>&amp;other);</highlight></codeline>
<codeline lineno="100"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>indexOf(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classcabana_1_1_signal" kindref="compound">cabana::Signal</ref><sp/>*sig)<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="101"><highlight class="normal"><sp/><sp/><ref refid="classcabana_1_1_signal" kindref="compound">cabana::Signal</ref><sp/>*sig(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>QString<sp/>&amp;sig_name)<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="102"><highlight class="normal"><sp/><sp/>QString<sp/>newSignalName();</highlight></codeline>
<codeline lineno="103"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>update();</highlight></codeline>
<codeline lineno="104"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::vector&lt;cabana::Signal<sp/>*&gt;<sp/>&amp;getSignals()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>sigs;<sp/>}</highlight></codeline>
<codeline lineno="105"><highlight class="normal"></highlight></codeline>
<codeline lineno="106"><highlight class="normal"><sp/><sp/>uint32_t<sp/>address;</highlight></codeline>
<codeline lineno="107"><highlight class="normal"><sp/><sp/>QString<sp/>name;</highlight></codeline>
<codeline lineno="108"><highlight class="normal"><sp/><sp/>uint32_t<sp/>size;</highlight></codeline>
<codeline lineno="109"><highlight class="normal"><sp/><sp/>QString<sp/>comment;</highlight></codeline>
<codeline lineno="110"><highlight class="normal"><sp/><sp/>QString<sp/>transmitter;</highlight></codeline>
<codeline lineno="111"><highlight class="normal"><sp/><sp/>std::vector&lt;cabana::Signal<sp/>*&gt;<sp/>sigs;</highlight></codeline>
<codeline lineno="112"><highlight class="normal"></highlight></codeline>
<codeline lineno="113"><highlight class="normal"><sp/><sp/>std::vector&lt;uint8_t&gt;<sp/>mask;</highlight></codeline>
<codeline lineno="114"><highlight class="normal"><sp/><sp/><ref refid="classcabana_1_1_signal" kindref="compound">cabana::Signal</ref><sp/>*multiplexor<sp/>=<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="115"><highlight class="normal">};</highlight></codeline>
<codeline lineno="116"><highlight class="normal"></highlight></codeline>
<codeline lineno="117"><highlight class="normal">}<sp/><sp/></highlight><highlight class="comment">//<sp/>namespace<sp/>cabana</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="118"><highlight class="normal"></highlight></codeline>
<codeline lineno="119"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Helper<sp/>functions</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="120"><highlight class="normal"></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>get_raw_value(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>uint8_t<sp/>*data,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>data_size,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classcabana_1_1_signal" kindref="compound">cabana::Signal</ref><sp/>&amp;sig);</highlight></codeline>
<codeline lineno="121"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>updateMsbLsb(<ref refid="classcabana_1_1_signal" kindref="compound">cabana::Signal</ref><sp/>&amp;s);</highlight></codeline>
<codeline lineno="122"><highlight class="normal"></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>flipBitPos(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>start_bit)<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>8<sp/>*<sp/>(start_bit<sp/>/<sp/>8)<sp/>+<sp/>7<sp/>-<sp/>start_bit<sp/>%<sp/>8;<sp/>}</highlight></codeline>
<codeline lineno="123"><highlight class="normal"></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/>std::vector&lt;std::string&gt;<sp/>allDBCNames()<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>get_dbc_names();<sp/>}</highlight></codeline>
<codeline lineno="124"><highlight class="normal"></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/>QString<sp/>doubleToString(</highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>value)<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>QString::number(value,<sp/></highlight><highlight class="charliteral">&apos;g&apos;</highlight><highlight class="normal">,<sp/>std::numeric_limits&lt;double&gt;::digits10);<sp/>}</highlight></codeline>
    </programlisting>
    <location file="/tmp/openpilot/tools/cabana/dbc/dbc.h"/>
  </compounddef>
</doxygen>
