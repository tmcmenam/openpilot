<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.17">
  <compounddef id="logger_8h" kind="file" language="C++">
    <compoundname>logger.h</compoundname>
    <includes local="no">pthread.h</includes>
    <includes local="no">cassert</includes>
    <includes local="no">cstdint</includes>
    <includes local="no">cstdio</includes>
    <includes local="no">memory</includes>
    <includes local="no">string</includes>
    <includes local="no">capnp/serialize.h</includes>
    <includes local="no">kj/array.h</includes>
    <includes local="yes">cereal/messaging/messaging.h</includes>
    <includes local="yes">common/util.h</includes>
    <includes local="yes">common/swaglog.h</includes>
    <includes local="yes">system/hardware/hw.h</includes>
    <includedby refid="loggerd_8h" local="yes">/tmp/openpilot/system/loggerd/loggerd.h</includedby>
    <incdepgraph>
      <node id="4">
        <label>cstdint</label>
      </node>
      <node id="9">
        <label>kj/array.h</label>
      </node>
      <node id="8">
        <label>capnp/serialize.h</label>
      </node>
      <node id="3">
        <label>cassert</label>
      </node>
      <node id="7">
        <label>string</label>
      </node>
      <node id="11">
        <label>common/util.h</label>
      </node>
      <node id="12">
        <label>common/swaglog.h</label>
      </node>
      <node id="10">
        <label>cereal/messaging/messaging.h</label>
      </node>
      <node id="2">
        <label>pthread.h</label>
      </node>
      <node id="5">
        <label>cstdio</label>
      </node>
      <node id="13">
        <label>system/hardware/hw.h</label>
      </node>
      <node id="1">
        <label>/tmp/openpilot/system/loggerd/logger.h</label>
        <link refid="logger_8h"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="6" relation="include">
        </childnode>
        <childnode refid="7" relation="include">
        </childnode>
        <childnode refid="8" relation="include">
        </childnode>
        <childnode refid="9" relation="include">
        </childnode>
        <childnode refid="10" relation="include">
        </childnode>
        <childnode refid="11" relation="include">
        </childnode>
        <childnode refid="12" relation="include">
        </childnode>
        <childnode refid="13" relation="include">
        </childnode>
      </node>
      <node id="6">
        <label>memory</label>
      </node>
    </incdepgraph>
    <invincdepgraph>
      <node id="2">
        <label>/tmp/openpilot/system/loggerd/loggerd.h</label>
        <link refid="loggerd_8h_source"/>
      </node>
      <node id="1">
        <label>/tmp/openpilot/system/loggerd/logger.h</label>
        <link refid="logger_8h"/>
        <childnode refid="2" relation="include">
        </childnode>
      </node>
    </invincdepgraph>
    <innerclass refid="class_raw_file" prot="public">RawFile</innerclass>
    <innerclass refid="struct_logger_handle" prot="public">LoggerHandle</innerclass>
    <innerclass refid="struct_logger_state" prot="public">LoggerState</innerclass>
      <sectiondef kind="define">
      <memberdef kind="define" id="logger_8h_1a182955c82621a451ca975ae92d4d4a12" prot="public" static="no">
        <name>LOGGER_MAX_HANDLES</name>
        <initializer>16</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/tmp/openpilot/system/loggerd/logger.h" line="19" column="9" bodyfile="/tmp/openpilot/system/loggerd/logger.h" bodystart="19" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="typedef">
      <memberdef kind="typedef" id="logger_8h_1ad6773aa0a9f14cdee351455ab280affb" prot="public" static="no">
        <type>cereal::Sentinel::SentinelType</type>
        <definition>typedef cereal::Sentinel::SentinelType SentinelType</definition>
        <argsstring></argsstring>
        <name>SentinelType</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/tmp/openpilot/system/loggerd/logger.h" line="42" column="40" bodyfile="/tmp/openpilot/system/loggerd/logger.h" bodystart="42" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="logger_8h_1a7bcab378b94dc005c9ec33ed43aa7b3b" prot="public" static="no">
        <type>struct <ref refid="struct_logger_handle" kindref="compound">LoggerHandle</ref></type>
        <definition>typedef struct LoggerHandle LoggerHandle</definition>
        <argsstring></argsstring>
        <name>LoggerHandle</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/tmp/openpilot/system/loggerd/logger.h" line="54" column="14"/>
      </memberdef>
      <memberdef kind="typedef" id="logger_8h_1af62d8dafd3f598c031413768b0179606" prot="public" static="no">
        <type>struct <ref refid="struct_logger_state" kindref="compound">LoggerState</ref></type>
        <definition>typedef struct LoggerState LoggerState</definition>
        <argsstring></argsstring>
        <name>LoggerState</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/tmp/openpilot/system/loggerd/logger.h" line="66" column="13"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="func">
      <memberdef kind="function" id="logger_8h_1af40ffdb33b836faae6976ad163be1fad" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>kj::Array&lt; capnp::word &gt;</type>
        <definition>kj::Array&lt;capnp::word&gt; logger_build_init_data</definition>
        <argsstring>()</argsstring>
        <name>logger_build_init_data</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/tmp/openpilot/system/loggerd/logger.h" line="68" column="11" declfile="/tmp/openpilot/system/loggerd/logger.h" declline="68" declcolumn="11"/>
      </memberdef>
      <memberdef kind="function" id="logger_8h_1ac3b799a88394ef771050a70911e7b59d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::string</type>
        <definition>std::string logger_get_route_name</definition>
        <argsstring>()</argsstring>
        <name>logger_get_route_name</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/tmp/openpilot/system/loggerd/logger.h" line="69" column="13" declfile="/tmp/openpilot/system/loggerd/logger.h" declline="69" declcolumn="13"/>
      </memberdef>
      <memberdef kind="function" id="logger_8h_1a63da93893711e5ecb617acfe72182796" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void logger_init</definition>
        <argsstring>(LoggerState *s, bool has_qlog)</argsstring>
        <name>logger_init</name>
        <param>
          <type><ref refid="struct_logger_state" kindref="compound">LoggerState</ref> *</type>
          <declname>s</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>has_qlog</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/tmp/openpilot/system/loggerd/logger.h" line="70" column="6" declfile="/tmp/openpilot/system/loggerd/logger.h" declline="70" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="logger_8h_1a099cc418eeeae3bbeb7223dc9269da80" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int logger_next</definition>
        <argsstring>(LoggerState *s, const char *root_path, char *out_segment_path, size_t out_segment_path_len, int *out_part)</argsstring>
        <name>logger_next</name>
        <param>
          <type><ref refid="struct_logger_state" kindref="compound">LoggerState</ref> *</type>
          <declname>s</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>root_path</declname>
        </param>
        <param>
          <type>char *</type>
          <declname>out_segment_path</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>out_segment_path_len</declname>
        </param>
        <param>
          <type>int *</type>
          <declname>out_part</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/tmp/openpilot/system/loggerd/logger.h" line="71" column="5" declfile="/tmp/openpilot/system/loggerd/logger.h" declline="71" declcolumn="5"/>
      </memberdef>
      <memberdef kind="function" id="logger_8h_1af59d9c9ccd2c09011e9db65ef96b08e7" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="struct_logger_handle" kindref="compound">LoggerHandle</ref> *</type>
        <definition>LoggerHandle* logger_get_handle</definition>
        <argsstring>(LoggerState *s)</argsstring>
        <name>logger_get_handle</name>
        <param>
          <type><ref refid="struct_logger_state" kindref="compound">LoggerState</ref> *</type>
          <declname>s</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/tmp/openpilot/system/loggerd/logger.h" line="74" column="14" declfile="/tmp/openpilot/system/loggerd/logger.h" declline="74" declcolumn="14"/>
      </memberdef>
      <memberdef kind="function" id="logger_8h_1a22cf7466de2ac7688ff4e2629b470af1" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void logger_close</definition>
        <argsstring>(LoggerState *s, ExitHandler *exit_handler=nullptr)</argsstring>
        <name>logger_close</name>
        <param>
          <type><ref refid="struct_logger_state" kindref="compound">LoggerState</ref> *</type>
          <declname>s</declname>
        </param>
        <param>
          <type>ExitHandler *</type>
          <declname>exit_handler</declname>
          <defval>nullptr</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/tmp/openpilot/system/loggerd/logger.h" line="75" column="6" declfile="/tmp/openpilot/system/loggerd/logger.h" declline="75" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="logger_8h_1a8273c1b66f23fdd39b3a35b113d81a2a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void logger_log</definition>
        <argsstring>(LoggerState *s, uint8_t *data, size_t data_size, bool in_qlog)</argsstring>
        <name>logger_log</name>
        <param>
          <type><ref refid="struct_logger_state" kindref="compound">LoggerState</ref> *</type>
          <declname>s</declname>
        </param>
        <param>
          <type>uint8_t *</type>
          <declname>data</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>data_size</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>in_qlog</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/tmp/openpilot/system/loggerd/logger.h" line="76" column="6" declfile="/tmp/openpilot/system/loggerd/logger.h" declline="76" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="logger_8h_1a3fb14d26e4d437ea9538ecd46c9f16f4" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void lh_log</definition>
        <argsstring>(LoggerHandle *h, uint8_t *data, size_t data_size, bool in_qlog)</argsstring>
        <name>lh_log</name>
        <param>
          <type><ref refid="struct_logger_handle" kindref="compound">LoggerHandle</ref> *</type>
          <declname>h</declname>
        </param>
        <param>
          <type>uint8_t *</type>
          <declname>data</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>data_size</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>in_qlog</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/tmp/openpilot/system/loggerd/logger.h" line="78" column="6" declfile="/tmp/openpilot/system/loggerd/logger.h" declline="78" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="logger_8h_1a9f6cf2cf32a3de7323fc293645df95ac" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void lh_close</definition>
        <argsstring>(LoggerHandle *h)</argsstring>
        <name>lh_close</name>
        <param>
          <type><ref refid="struct_logger_handle" kindref="compound">LoggerHandle</ref> *</type>
          <declname>h</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/tmp/openpilot/system/loggerd/logger.h" line="79" column="6" declfile="/tmp/openpilot/system/loggerd/logger.h" declline="79" declcolumn="6"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="preprocessor">#pragma<sp/>once</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2"><highlight class="normal"></highlight></codeline>
<codeline lineno="3"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;pthread.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4"><highlight class="normal"></highlight></codeline>
<codeline lineno="5"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;cassert&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;cstdint&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;cstdio&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="8"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;memory&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="9"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;string&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="10"><highlight class="normal"></highlight></codeline>
<codeline lineno="11"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;capnp/serialize.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="12"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;kj/array.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="13"><highlight class="normal"></highlight></codeline>
<codeline lineno="14"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;cereal/messaging/messaging.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="15"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;common/util.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="16"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;common/swaglog.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="17"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;system/hardware/hw.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="18"><highlight class="normal"></highlight></codeline>
<codeline lineno="19"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>LOGGER_MAX_HANDLES<sp/>16</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="20"><highlight class="normal"></highlight></codeline>
<codeline lineno="21" refid="class_raw_file" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal"><ref refid="class_raw_file" kindref="compound">RawFile</ref><sp/>{</highlight></codeline>
<codeline lineno="22"><highlight class="normal"><sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="23"><highlight class="normal"><sp/><sp/><ref refid="class_raw_file" kindref="compound">RawFile</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>path)<sp/>{</highlight></codeline>
<codeline lineno="24"><highlight class="normal"><sp/><sp/><sp/><sp/>file<sp/>=<sp/>util::safe_fopen(path,<sp/></highlight><highlight class="stringliteral">&quot;wb&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="25"><highlight class="normal"><sp/><sp/><sp/><sp/>assert(file<sp/>!=<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="26"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="27"><highlight class="normal"><sp/><sp/>~<ref refid="class_raw_file" kindref="compound">RawFile</ref>()<sp/>{</highlight></codeline>
<codeline lineno="28"><highlight class="normal"><sp/><sp/><sp/><sp/>util::safe_fflush(file);</highlight></codeline>
<codeline lineno="29"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>err<sp/>=<sp/>fclose(file);</highlight></codeline>
<codeline lineno="30"><highlight class="normal"><sp/><sp/><sp/><sp/>assert(err<sp/>==<sp/>0);</highlight></codeline>
<codeline lineno="31"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="32"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>write(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">*<sp/>data,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>size)<sp/>{</highlight></codeline>
<codeline lineno="33"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>written<sp/>=<sp/>util::safe_fwrite(data,<sp/>1,<sp/>size,<sp/>file);</highlight></codeline>
<codeline lineno="34"><highlight class="normal"><sp/><sp/><sp/><sp/>assert(written<sp/>==<sp/>size);</highlight></codeline>
<codeline lineno="35"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="36"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>write(kj::ArrayPtr&lt;capnp::byte&gt;<sp/>array)<sp/>{<sp/>write(array.begin(),<sp/>array.size());<sp/>}</highlight></codeline>
<codeline lineno="37"><highlight class="normal"></highlight></codeline>
<codeline lineno="38"><highlight class="normal"><sp/></highlight><highlight class="keyword">private</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="39"><highlight class="normal"><sp/><sp/>FILE*<sp/>file<sp/>=<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="40"><highlight class="normal">};</highlight></codeline>
<codeline lineno="41"><highlight class="normal"></highlight></codeline>
<codeline lineno="42"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/>cereal::Sentinel::SentinelType<sp/>SentinelType;</highlight></codeline>
<codeline lineno="43"><highlight class="normal"></highlight></codeline>
<codeline lineno="44" refid="struct_logger_handle" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="struct_logger_handle" kindref="compound">LoggerHandle</ref><sp/>{</highlight></codeline>
<codeline lineno="45"><highlight class="normal"><sp/><sp/>pthread_mutex_t<sp/>lock;</highlight></codeline>
<codeline lineno="46"><highlight class="normal"><sp/><sp/>SentinelType<sp/>end_sentinel_type;</highlight></codeline>
<codeline lineno="47"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>exit_signal;</highlight></codeline>
<codeline lineno="48"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>refcnt;</highlight></codeline>
<codeline lineno="49"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>segment_path[4096];</highlight></codeline>
<codeline lineno="50"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>log_path[4096];</highlight></codeline>
<codeline lineno="51"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>qlog_path[4096];</highlight></codeline>
<codeline lineno="52"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>lock_path[4096];</highlight></codeline>
<codeline lineno="53"><highlight class="normal"><sp/><sp/>std::unique_ptr&lt;RawFile&gt;<sp/>log,<sp/>q_log;</highlight></codeline>
<codeline lineno="54"><highlight class="normal">}<sp/><ref refid="struct_logger_handle" kindref="compound">LoggerHandle</ref>;</highlight></codeline>
<codeline lineno="55"><highlight class="normal"></highlight></codeline>
<codeline lineno="56" refid="struct_logger_state" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="struct_logger_state" kindref="compound">LoggerState</ref><sp/>{</highlight></codeline>
<codeline lineno="57"><highlight class="normal"><sp/><sp/>pthread_mutex_t<sp/>lock;</highlight></codeline>
<codeline lineno="58"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>part;</highlight></codeline>
<codeline lineno="59"><highlight class="normal"><sp/><sp/>kj::Array&lt;capnp::word&gt;<sp/>init_data;</highlight></codeline>
<codeline lineno="60"><highlight class="normal"><sp/><sp/>std::string<sp/>route_name;</highlight></codeline>
<codeline lineno="61"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>log_name[64];</highlight></codeline>
<codeline lineno="62"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>has_qlog;</highlight></codeline>
<codeline lineno="63"><highlight class="normal"></highlight></codeline>
<codeline lineno="64"><highlight class="normal"><sp/><sp/><ref refid="struct_logger_handle" kindref="compound">LoggerHandle</ref><sp/>handles[LOGGER_MAX_HANDLES];</highlight></codeline>
<codeline lineno="65"><highlight class="normal"><sp/><sp/><ref refid="struct_logger_handle" kindref="compound">LoggerHandle</ref>*<sp/>cur_handle;</highlight></codeline>
<codeline lineno="66"><highlight class="normal">}<sp/><ref refid="struct_logger_state" kindref="compound">LoggerState</ref>;</highlight></codeline>
<codeline lineno="67"><highlight class="normal"></highlight></codeline>
<codeline lineno="68"><highlight class="normal">kj::Array&lt;capnp::word&gt;<sp/>logger_build_init_data();</highlight></codeline>
<codeline lineno="69"><highlight class="normal">std::string<sp/>logger_get_route_name();</highlight></codeline>
<codeline lineno="70"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>logger_init(<ref refid="struct_logger_state" kindref="compound">LoggerState</ref><sp/>*s,<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>has_qlog);</highlight></codeline>
<codeline lineno="71"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>logger_next(<ref refid="struct_logger_state" kindref="compound">LoggerState</ref><sp/>*s,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>root_path,</highlight></codeline>
<codeline lineno="72"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>out_segment_path,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>out_segment_path_len,</highlight></codeline>
<codeline lineno="73"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal">*<sp/>out_part);</highlight></codeline>
<codeline lineno="74"><highlight class="normal"><ref refid="struct_logger_handle" kindref="compound">LoggerHandle</ref>*<sp/>logger_get_handle(<ref refid="struct_logger_state" kindref="compound">LoggerState</ref><sp/>*s);</highlight></codeline>
<codeline lineno="75"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>logger_close(<ref refid="struct_logger_state" kindref="compound">LoggerState</ref><sp/>*s,<sp/>ExitHandler<sp/>*exit_handler=</highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="76"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>logger_log(<ref refid="struct_logger_state" kindref="compound">LoggerState</ref><sp/>*s,<sp/>uint8_t*<sp/>data,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>data_size,<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>in_qlog);</highlight></codeline>
<codeline lineno="77"><highlight class="normal"></highlight></codeline>
<codeline lineno="78"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>lh_log(<ref refid="struct_logger_handle" kindref="compound">LoggerHandle</ref>*<sp/>h,<sp/>uint8_t*<sp/>data,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>data_size,<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>in_qlog);</highlight></codeline>
<codeline lineno="79"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>lh_close(<ref refid="struct_logger_handle" kindref="compound">LoggerHandle</ref>*<sp/>h);</highlight></codeline>
    </programlisting>
    <location file="/tmp/openpilot/system/loggerd/logger.h"/>
  </compounddef>
</doxygen>
