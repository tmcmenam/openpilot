<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.17">
  <compounddef id="panda_8h" kind="file" language="C++">
    <compoundname>panda.h</compoundname>
    <includes local="no">cstdint</includes>
    <includes local="no">ctime</includes>
    <includes local="no">functional</includes>
    <includes local="no">list</includes>
    <includes local="no">memory</includes>
    <includes local="no">optional</includes>
    <includes local="no">string</includes>
    <includes local="no">vector</includes>
    <includes local="yes">cereal/gen/cpp/car.capnp.h</includes>
    <includes local="yes">cereal/gen/cpp/log.capnp.h</includes>
    <includes local="yes">panda/board/health.h</includes>
    <includes local="yes">panda/board/can_definitions.h</includes>
    <includes refid="panda__comms_8h" local="yes">selfdrive/boardd/panda_comms.h</includes>
    <includedby refid="boardd_8h" local="yes">/tmp/openpilot/selfdrive/boardd/boardd.h</includedby>
    <incdepgraph>
      <node id="5">
        <label>list</label>
      </node>
      <node id="18">
        <label>libusb-1.0/libusb.h</label>
      </node>
      <node id="15">
        <label>atomic</label>
      </node>
      <node id="4">
        <label>functional</label>
      </node>
      <node id="10">
        <label>cereal/gen/cpp/car.capnp.h</label>
      </node>
      <node id="1">
        <label>/tmp/openpilot/selfdrive/boardd/panda.h</label>
        <link refid="panda_8h"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="6" relation="include">
        </childnode>
        <childnode refid="7" relation="include">
        </childnode>
        <childnode refid="8" relation="include">
        </childnode>
        <childnode refid="9" relation="include">
        </childnode>
        <childnode refid="10" relation="include">
        </childnode>
        <childnode refid="11" relation="include">
        </childnode>
        <childnode refid="12" relation="include">
        </childnode>
        <childnode refid="13" relation="include">
        </childnode>
        <childnode refid="14" relation="include">
        </childnode>
      </node>
      <node id="2">
        <label>cstdint</label>
      </node>
      <node id="13">
        <label>panda/board/can_definitions.h</label>
      </node>
      <node id="12">
        <label>panda/board/health.h</label>
      </node>
      <node id="8">
        <label>string</label>
      </node>
      <node id="3">
        <label>ctime</label>
      </node>
      <node id="7">
        <label>optional</label>
      </node>
      <node id="9">
        <label>vector</label>
      </node>
      <node id="14">
        <label>selfdrive/boardd/panda_comms.h</label>
        <link refid="panda__comms_8h_source"/>
        <childnode refid="15" relation="include">
        </childnode>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="16" relation="include">
        </childnode>
        <childnode refid="8" relation="include">
        </childnode>
        <childnode refid="9" relation="include">
        </childnode>
        <childnode refid="17" relation="include">
        </childnode>
        <childnode refid="18" relation="include">
        </childnode>
      </node>
      <node id="17">
        <label>linux/spi/spidev.h</label>
      </node>
      <node id="16">
        <label>mutex</label>
      </node>
      <node id="11">
        <label>cereal/gen/cpp/log.capnp.h</label>
      </node>
      <node id="6">
        <label>memory</label>
      </node>
    </incdepgraph>
    <invincdepgraph>
      <node id="2">
        <label>/tmp/openpilot/selfdrive/boardd/boardd.h</label>
        <link refid="boardd_8h_source"/>
      </node>
      <node id="1">
        <label>/tmp/openpilot/selfdrive/boardd/panda.h</label>
        <link refid="panda_8h"/>
        <childnode refid="2" relation="include">
        </childnode>
      </node>
    </invincdepgraph>
    <innerclass refid="structcan__frame" prot="public">can_frame</innerclass>
    <innerclass refid="class_panda" prot="public">Panda</innerclass>
      <sectiondef kind="define">
      <memberdef kind="define" id="panda_8h_1abc9fcdc83a30eb19c5fd92a5a5d469df" prot="public" static="no">
        <name>USB_TX_SOFT_LIMIT</name>
        <initializer>(0x100U)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/tmp/openpilot/selfdrive/boardd/panda.h" line="18" column="9" bodyfile="/tmp/openpilot/selfdrive/boardd/panda.h" bodystart="18" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="panda_8h_1a901924f8db5381bd167af4c1c28830b8" prot="public" static="no">
        <name>USBPACKET_MAX_SIZE</name>
        <initializer>(0x40)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/tmp/openpilot/selfdrive/boardd/panda.h" line="19" column="9" bodyfile="/tmp/openpilot/selfdrive/boardd/panda.h" bodystart="19" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="panda_8h_1ab05e00e8cea9db60202e746d95818997" prot="public" static="no">
        <name>RECV_SIZE</name>
        <initializer>(0x4000U)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/tmp/openpilot/selfdrive/boardd/panda.h" line="21" column="9" bodyfile="/tmp/openpilot/selfdrive/boardd/panda.h" bodystart="21" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="panda_8h_1a271bd57012f649b34179fb051260486d" prot="public" static="no">
        <name>CAN_REJECTED_BUS_OFFSET</name>
        <initializer>0xC0U</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/tmp/openpilot/selfdrive/boardd/panda.h" line="23" column="9" bodyfile="/tmp/openpilot/selfdrive/boardd/panda.h" bodystart="23" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="panda_8h_1ac026a35da89912ab8a4f9d2c2444d44a" prot="public" static="no">
        <name>CAN_RETURNED_BUS_OFFSET</name>
        <initializer>0x80U</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/tmp/openpilot/selfdrive/boardd/panda.h" line="24" column="9" bodyfile="/tmp/openpilot/selfdrive/boardd/panda.h" bodystart="24" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="func">
      <memberdef kind="function" id="panda_8h_1a863df6a7fa9625c58367ca48b0194718" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>struct</type>
        <definition>struct __attribute__</definition>
        <argsstring>((packed)) can_header</argsstring>
        <name>__attribute__</name>
        <param>
          <type>(packed)</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/tmp/openpilot/selfdrive/boardd/panda.h" line="1" column="0" bodyfile="/tmp/openpilot/selfdrive/boardd/panda.h" bodystart="26" bodyend="35"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="preprocessor">#pragma<sp/>once</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2"><highlight class="normal"></highlight></codeline>
<codeline lineno="3"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;cstdint&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;ctime&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;functional&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;list&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;memory&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="8"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;optional&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="9"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;string&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="10"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;vector&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="11"><highlight class="normal"></highlight></codeline>
<codeline lineno="12"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;cereal/gen/cpp/car.capnp.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="13"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;cereal/gen/cpp/log.capnp.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="14"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;panda/board/health.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="15"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;panda/board/can_definitions.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="16"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;selfdrive/boardd/panda_comms.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="17"><highlight class="normal"></highlight></codeline>
<codeline lineno="18"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>USB_TX_SOFT_LIMIT<sp/><sp/><sp/>(0x100U)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="19"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>USBPACKET_MAX_SIZE<sp/><sp/>(0x40)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="20"><highlight class="normal"></highlight></codeline>
<codeline lineno="21"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>RECV_SIZE<sp/>(0x4000U)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="22"><highlight class="normal"></highlight></codeline>
<codeline lineno="23"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>CAN_REJECTED_BUS_OFFSET<sp/><sp/><sp/>0xC0U</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="24"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>CAN_RETURNED_BUS_OFFSET<sp/>0x80U</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="25"><highlight class="normal"></highlight></codeline>
<codeline lineno="26"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">__attribute__((packed))<sp/>can_header<sp/>{</highlight></codeline>
<codeline lineno="27"><highlight class="normal"><sp/><sp/>uint8_t<sp/>reserved<sp/>:<sp/>1;</highlight></codeline>
<codeline lineno="28"><highlight class="normal"><sp/><sp/>uint8_t<sp/>bus<sp/>:<sp/>3;</highlight></codeline>
<codeline lineno="29"><highlight class="normal"><sp/><sp/>uint8_t<sp/>data_len_code<sp/>:<sp/>4;</highlight></codeline>
<codeline lineno="30"><highlight class="normal"><sp/><sp/>uint8_t<sp/>rejected<sp/>:<sp/>1;</highlight></codeline>
<codeline lineno="31"><highlight class="normal"><sp/><sp/>uint8_t<sp/>returned<sp/>:<sp/>1;</highlight></codeline>
<codeline lineno="32"><highlight class="normal"><sp/><sp/>uint8_t<sp/>extended<sp/>:<sp/>1;</highlight></codeline>
<codeline lineno="33"><highlight class="normal"><sp/><sp/>uint32_t<sp/>addr<sp/>:<sp/>29;</highlight></codeline>
<codeline lineno="34"><highlight class="normal"><sp/><sp/>uint8_t<sp/>checksum<sp/>:<sp/>8;</highlight></codeline>
<codeline lineno="35"><highlight class="normal">};</highlight></codeline>
<codeline lineno="36"><highlight class="normal"></highlight></codeline>
<codeline lineno="37" refid="structcan__frame" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structcan__frame" kindref="compound">can_frame</ref><sp/>{</highlight></codeline>
<codeline lineno="38"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>address;</highlight></codeline>
<codeline lineno="39"><highlight class="normal"><sp/><sp/>std::string<sp/>dat;</highlight></codeline>
<codeline lineno="40"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>busTime;</highlight></codeline>
<codeline lineno="41"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>src;</highlight></codeline>
<codeline lineno="42"><highlight class="normal">};</highlight></codeline>
<codeline lineno="43"><highlight class="normal"></highlight></codeline>
<codeline lineno="44"><highlight class="normal"></highlight></codeline>
<codeline lineno="45" refid="class_panda" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal"><ref refid="class_panda" kindref="compound">Panda</ref><sp/>{</highlight></codeline>
<codeline lineno="46"><highlight class="normal"></highlight><highlight class="keyword">private</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="47"><highlight class="normal"><sp/><sp/>std::unique_ptr&lt;PandaCommsHandle&gt;<sp/>handle;</highlight></codeline>
<codeline lineno="48"><highlight class="normal"></highlight></codeline>
<codeline lineno="49"><highlight class="normal"></highlight><highlight class="keyword">public</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="50"><highlight class="normal"><sp/><sp/><ref refid="class_panda" kindref="compound">Panda</ref>(std::string<sp/>serial=</highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal">,<sp/>uint32_t<sp/>bus_offset=0);</highlight></codeline>
<codeline lineno="51"><highlight class="normal"></highlight></codeline>
<codeline lineno="52"><highlight class="normal"><sp/><sp/>cereal::PandaState::PandaType<sp/>hw_type<sp/>=<sp/>cereal::PandaState::PandaType::UNKNOWN;</highlight></codeline>
<codeline lineno="53"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>has_rtc<sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="54"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>uint32_t<sp/>bus_offset;</highlight></codeline>
<codeline lineno="55"><highlight class="normal"></highlight></codeline>
<codeline lineno="56"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>connected();</highlight></codeline>
<codeline lineno="57"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>comms_healthy();</highlight></codeline>
<codeline lineno="58"><highlight class="normal"><sp/><sp/>std::string<sp/>hw_serial();</highlight></codeline>
<codeline lineno="59"><highlight class="normal"></highlight></codeline>
<codeline lineno="60"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Static<sp/>functions</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="61"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>std::vector&lt;std::string&gt;<sp/>list(</highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>usb_only=</highlight><highlight class="keyword">false</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="62"><highlight class="normal"></highlight></codeline>
<codeline lineno="63"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Panda<sp/>functionality</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="64"><highlight class="normal"><sp/><sp/>cereal::PandaState::PandaType<sp/>get_hw_type();</highlight></codeline>
<codeline lineno="65"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>set_safety_model(cereal::CarParams::SafetyModel<sp/>safety_model,<sp/>uint16_t<sp/>safety_param=0U);</highlight></codeline>
<codeline lineno="66"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>set_alternative_experience(uint16_t<sp/>alternative_experience);</highlight></codeline>
<codeline lineno="67"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>set_rtc(</highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/>tm<sp/>sys_time);</highlight></codeline>
<codeline lineno="68"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">tm<sp/>get_rtc();</highlight></codeline>
<codeline lineno="69"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>set_fan_speed(uint16_t<sp/>fan_speed);</highlight></codeline>
<codeline lineno="70"><highlight class="normal"><sp/><sp/>uint16_t<sp/>get_fan_speed();</highlight></codeline>
<codeline lineno="71"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>set_ir_pwr(uint16_t<sp/>ir_pwr);</highlight></codeline>
<codeline lineno="72"><highlight class="normal"><sp/><sp/>std::optional&lt;health_t&gt;<sp/>get_state();</highlight></codeline>
<codeline lineno="73"><highlight class="normal"><sp/><sp/>std::optional&lt;can_health_t&gt;<sp/>get_can_state(uint16_t<sp/>can_number);</highlight></codeline>
<codeline lineno="74"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>set_loopback(</highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>loopback);</highlight></codeline>
<codeline lineno="75"><highlight class="normal"><sp/><sp/>std::optional&lt;std::vector&lt;uint8_t&gt;&gt;<sp/>get_firmware_version();</highlight></codeline>
<codeline lineno="76"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>up_to_date();</highlight></codeline>
<codeline lineno="77"><highlight class="normal"><sp/><sp/>std::optional&lt;std::string&gt;<sp/>get_serial();</highlight></codeline>
<codeline lineno="78"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>set_power_saving(</highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>power_saving);</highlight></codeline>
<codeline lineno="79"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>enable_deepsleep();</highlight></codeline>
<codeline lineno="80"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>send_heartbeat(</highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>engaged);</highlight></codeline>
<codeline lineno="81"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>set_can_speed_kbps(uint16_t<sp/>bus,<sp/>uint16_t<sp/>speed);</highlight></codeline>
<codeline lineno="82"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>set_data_speed_kbps(uint16_t<sp/>bus,<sp/>uint16_t<sp/>speed);</highlight></codeline>
<codeline lineno="83"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>set_canfd_non_iso(uint16_t<sp/>bus,<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>non_iso);</highlight></codeline>
<codeline lineno="84"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>can_send(capnp::List&lt;cereal::CanData&gt;::Reader<sp/>can_data_list);</highlight></codeline>
<codeline lineno="85"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>can_receive(std::vector&lt;can_frame&gt;&amp;<sp/>out_vec);</highlight></codeline>
<codeline lineno="86"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>can_reset_communications();</highlight></codeline>
<codeline lineno="87"><highlight class="normal"></highlight></codeline>
<codeline lineno="88"><highlight class="normal"></highlight><highlight class="keyword">protected</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="89"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>for<sp/>unit<sp/>tests</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="90"><highlight class="normal"><sp/><sp/>uint8_t<sp/>receive_buffer[RECV_SIZE<sp/>+<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(can_header)<sp/>+<sp/>64];</highlight></codeline>
<codeline lineno="91"><highlight class="normal"><sp/><sp/>uint32_t<sp/>receive_buffer_size<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="92"><highlight class="normal"></highlight></codeline>
<codeline lineno="93"><highlight class="normal"><sp/><sp/><ref refid="class_panda" kindref="compound">Panda</ref>(uint32_t<sp/>bus_offset)<sp/>:<sp/>bus_offset(bus_offset)<sp/>{}</highlight></codeline>
<codeline lineno="94"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>pack_can_buffer(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>capnp::List&lt;cereal::CanData&gt;::Reader<sp/>&amp;can_data_list,</highlight></codeline>
<codeline lineno="95"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::function&lt;</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">(uint8_t<sp/>*,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal">)&gt;<sp/>write_func);</highlight></codeline>
<codeline lineno="96"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>unpack_can_buffer(uint8_t<sp/>*data,<sp/>uint32_t<sp/>&amp;size,<sp/>std::vector&lt;can_frame&gt;<sp/>&amp;out_vec);</highlight></codeline>
<codeline lineno="97"><highlight class="normal"><sp/><sp/>uint8_t<sp/>calculate_checksum(uint8_t<sp/>*data,<sp/>uint32_t<sp/>len);</highlight></codeline>
<codeline lineno="98"><highlight class="normal">};</highlight></codeline>
    </programlisting>
    <location file="/tmp/openpilot/selfdrive/boardd/panda.h"/>
  </compounddef>
</doxygen>
