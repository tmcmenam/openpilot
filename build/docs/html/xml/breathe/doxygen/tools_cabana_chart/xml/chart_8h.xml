<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.17">
  <compounddef id="chart_8h" kind="file" language="C++">
    <compoundname>chart.h</compoundname>
    <includes local="no">tuple</includes>
    <includes local="no">utility</includes>
    <includes local="no">QMenu</includes>
    <includes local="no">QGraphicsPixmapItem</includes>
    <includes local="no">QGraphicsProxyWidget</includes>
    <includes local="no">QtCharts/QChartView</includes>
    <includes local="no">QtCharts/QLegendMarker</includes>
    <includes local="no">QtCharts/QLineSeries</includes>
    <includes local="no">QtCharts/QScatterSeries</includes>
    <includes local="no">QtCharts/QValueAxis</includes>
    <includes refid="tiplabel_8h" local="yes">tools/cabana/chart/tiplabel.h</includes>
    <includes local="yes">tools/cabana/dbc/dbcmanager.h</includes>
    <includes local="yes">tools/cabana/streams/abstractstream.h</includes>
    <incdepgraph>
      <node id="6">
        <label>QGraphicsProxyWidget</label>
      </node>
      <node id="12">
        <label>tools/cabana/chart/tiplabel.h</label>
        <link refid="tiplabel_8h_source"/>
        <childnode refid="13" relation="include">
        </childnode>
      </node>
      <node id="4">
        <label>QMenu</label>
      </node>
      <node id="9">
        <label>QtCharts/QLineSeries</label>
      </node>
      <node id="1">
        <label>/tmp/openpilot/tools/cabana/chart/chart.h</label>
        <link refid="chart_8h"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="6" relation="include">
        </childnode>
        <childnode refid="7" relation="include">
        </childnode>
        <childnode refid="8" relation="include">
        </childnode>
        <childnode refid="9" relation="include">
        </childnode>
        <childnode refid="10" relation="include">
        </childnode>
        <childnode refid="11" relation="include">
        </childnode>
        <childnode refid="12" relation="include">
        </childnode>
        <childnode refid="14" relation="include">
        </childnode>
        <childnode refid="15" relation="include">
        </childnode>
      </node>
      <node id="8">
        <label>QtCharts/QLegendMarker</label>
      </node>
      <node id="14">
        <label>tools/cabana/dbc/dbcmanager.h</label>
      </node>
      <node id="15">
        <label>tools/cabana/streams/abstractstream.h</label>
      </node>
      <node id="2">
        <label>tuple</label>
      </node>
      <node id="3">
        <label>utility</label>
      </node>
      <node id="10">
        <label>QtCharts/QScatterSeries</label>
      </node>
      <node id="5">
        <label>QGraphicsPixmapItem</label>
      </node>
      <node id="13">
        <label>QLabel</label>
      </node>
      <node id="7">
        <label>QtCharts/QChartView</label>
      </node>
      <node id="11">
        <label>QtCharts/QValueAxis</label>
      </node>
    </incdepgraph>
    <innerclass refid="class_chart_view" prot="public">ChartView</innerclass>
    <innerclass refid="struct_chart_view_1_1_sig_item" prot="public">ChartView::SigItem</innerclass>
    <innernamespace refid="namespace_qt_charts">QtCharts</innernamespace>
      <sectiondef kind="enum">
      <memberdef kind="enum" id="chart_8h_1ae4fba9f783dd3824ba57bbe33bffa62f" prot="public" static="no" strong="yes">
        <type></type>
        <name>SeriesType</name>
        <enumvalue id="chart_8h_1ae4fba9f783dd3824ba57bbe33bffa62fa4803e6b9e63dabf04de980788d6a13c4" prot="public">
          <name>Line</name>
          <initializer>= 0</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="chart_8h_1ae4fba9f783dd3824ba57bbe33bffa62fad617725a15dea037dd5b5b3be7a33ea7" prot="public">
          <name>StepLine</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="chart_8h_1ae4fba9f783dd3824ba57bbe33bffa62fa09870720ca8134284e4e305ac6ce5f19" prot="public">
          <name>Scatter</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/tmp/openpilot/tools/cabana/chart/chart.h" line="20" column="22" bodyfile="/tmp/openpilot/tools/cabana/chart/chart.h" bodystart="20" bodyend="24"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="preprocessor">#pragma<sp/>once</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2"><highlight class="normal"></highlight></codeline>
<codeline lineno="3"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;tuple&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;utility&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5"><highlight class="normal"></highlight></codeline>
<codeline lineno="6"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;QMenu&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;QGraphicsPixmapItem&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="8"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;QGraphicsProxyWidget&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="9"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;QtCharts/QChartView&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="10"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;QtCharts/QLegendMarker&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="11"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;QtCharts/QLineSeries&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="12"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;QtCharts/QScatterSeries&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="13"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;QtCharts/QValueAxis&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="14"><highlight class="normal"></highlight><highlight class="keyword">using<sp/>namespace<sp/></highlight><highlight class="normal">QtCharts;</highlight></codeline>
<codeline lineno="15"><highlight class="normal"></highlight></codeline>
<codeline lineno="16"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;tools/cabana/chart/tiplabel.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="17"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;tools/cabana/dbc/dbcmanager.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="18"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;tools/cabana/streams/abstractstream.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="19"><highlight class="normal"></highlight></codeline>
<codeline lineno="20"><highlight class="normal"></highlight><highlight class="keyword">enum<sp/>class</highlight><highlight class="normal"><sp/>SeriesType<sp/>{</highlight></codeline>
<codeline lineno="21"><highlight class="normal"><sp/><sp/>Line<sp/>=<sp/>0,</highlight></codeline>
<codeline lineno="22"><highlight class="normal"><sp/><sp/>StepLine,</highlight></codeline>
<codeline lineno="23"><highlight class="normal"><sp/><sp/>Scatter</highlight></codeline>
<codeline lineno="24"><highlight class="normal">};</highlight></codeline>
<codeline lineno="25"><highlight class="normal"></highlight></codeline>
<codeline lineno="26"><highlight class="normal"></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal"><ref refid="class_charts_widget" kindref="compound">ChartsWidget</ref>;</highlight></codeline>
<codeline lineno="27" refid="class_chart_view" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal"><ref refid="class_chart_view" kindref="compound">ChartView</ref><sp/>:<sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal"><sp/>QChartView<sp/>{</highlight></codeline>
<codeline lineno="28"><highlight class="normal"><sp/><sp/>Q_OBJECT</highlight></codeline>
<codeline lineno="29"><highlight class="normal"></highlight></codeline>
<codeline lineno="30"><highlight class="normal"></highlight><highlight class="keyword">public</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="31"><highlight class="normal"><sp/><sp/><ref refid="class_chart_view" kindref="compound">ChartView</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::pair&lt;double,<sp/>double&gt;<sp/>&amp;x_range,<sp/><ref refid="class_charts_widget" kindref="compound">ChartsWidget</ref><sp/>*parent<sp/>=<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="32"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>addSignal(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>MessageId<sp/>&amp;msg_id,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>cabana::Signal<sp/>*sig);</highlight></codeline>
<codeline lineno="33"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>hasSignal(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>MessageId<sp/>&amp;msg_id,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>cabana::Signal<sp/>*sig)<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="34"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>updateSeries(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>cabana::Signal<sp/>*sig<sp/>=<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">,<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>clear<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="35"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>updatePlot(</highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>cur,<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>min,<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>max);</highlight></codeline>
<codeline lineno="36"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>setSeriesType(SeriesType<sp/>type);</highlight></codeline>
<codeline lineno="37"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>updatePlotArea(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>left,<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>force<sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="38"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>showTip(</highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>sec);</highlight></codeline>
<codeline lineno="39"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>hideTip();</highlight></codeline>
<codeline lineno="40"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>startAnimation();</highlight></codeline>
<codeline lineno="41"><highlight class="normal"></highlight></codeline>
<codeline lineno="42" refid="struct_chart_view_1_1_sig_item" refkind="compound"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="struct_chart_view_1_1_sig_item" kindref="compound">SigItem</ref><sp/>{</highlight></codeline>
<codeline lineno="43"><highlight class="normal"><sp/><sp/><sp/><sp/>MessageId<sp/>msg_id;</highlight></codeline>
<codeline lineno="44"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>cabana::Signal<sp/>*sig<sp/>=<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="45"><highlight class="normal"><sp/><sp/><sp/><sp/>QXYSeries<sp/>*series<sp/>=<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="46"><highlight class="normal"><sp/><sp/><sp/><sp/>QVector&lt;QPointF&gt;<sp/>vals;</highlight></codeline>
<codeline lineno="47"><highlight class="normal"><sp/><sp/><sp/><sp/>QVector&lt;QPointF&gt;<sp/>step_vals;</highlight></codeline>
<codeline lineno="48"><highlight class="normal"><sp/><sp/><sp/><sp/>uint64_t<sp/>last_value_mono_time<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="49"><highlight class="normal"><sp/><sp/><sp/><sp/>QPointF<sp/>track_pt{};</highlight></codeline>
<codeline lineno="50"><highlight class="normal"><sp/><sp/><sp/><sp/>SegmentTree<sp/>segment_tree;</highlight></codeline>
<codeline lineno="51"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>min<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="52"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>max<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="53"><highlight class="normal"><sp/><sp/>};</highlight></codeline>
<codeline lineno="54"><highlight class="normal"></highlight></codeline>
<codeline lineno="55"><highlight class="normal">signals:</highlight></codeline>
<codeline lineno="56"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>axisYLabelWidthChanged(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>w);</highlight></codeline>
<codeline lineno="57"><highlight class="normal"></highlight></codeline>
<codeline lineno="58"><highlight class="normal"></highlight><highlight class="keyword">private</highlight><highlight class="normal"><sp/>slots:</highlight></codeline>
<codeline lineno="59"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>signalUpdated(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>cabana::Signal<sp/>*sig);</highlight></codeline>
<codeline lineno="60"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>manageSignals();</highlight></codeline>
<codeline lineno="61"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>handleMarkerClicked();</highlight></codeline>
<codeline lineno="62"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>msgUpdated(MessageId<sp/></highlight><highlight class="keywordtype">id</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="63"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>msgRemoved(MessageId<sp/></highlight><highlight class="keywordtype">id</highlight><highlight class="normal">)<sp/>{<sp/>removeIf([=](</highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>&amp;s)<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>s.msg_id.address<sp/>==<sp/></highlight><highlight class="keywordtype">id</highlight><highlight class="normal">.address<sp/>&amp;&amp;<sp/>!dbc()-&gt;msg(</highlight><highlight class="keywordtype">id</highlight><highlight class="normal">);<sp/>});<sp/>}</highlight></codeline>
<codeline lineno="64"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>signalRemoved(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>cabana::Signal<sp/>*sig)<sp/>{<sp/>removeIf([=](</highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>&amp;s)<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>s.sig<sp/>==<sp/>sig;<sp/>});<sp/>}</highlight></codeline>
<codeline lineno="65"><highlight class="normal"></highlight></codeline>
<codeline lineno="66"><highlight class="normal"></highlight><highlight class="keyword">private</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="67"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>createToolButtons();</highlight></codeline>
<codeline lineno="68"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>addSeries(QXYSeries<sp/>*series);</highlight></codeline>
<codeline lineno="69"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>contextMenuEvent(QContextMenuEvent<sp/>*event)<sp/></highlight><highlight class="keyword">override</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="70"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>mousePressEvent(QMouseEvent<sp/>*event)<sp/></highlight><highlight class="keyword">override</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="71"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>mouseReleaseEvent(QMouseEvent<sp/>*event)<sp/></highlight><highlight class="keyword">override</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="72"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>mouseMoveEvent(QMouseEvent<sp/>*ev)<sp/></highlight><highlight class="keyword">override</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="73"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>dragEnterEvent(QDragEnterEvent<sp/>*event)<sp/></highlight><highlight class="keyword">override</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="74"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>dragLeaveEvent(QDragLeaveEvent<sp/>*event)</highlight><highlight class="keyword"><sp/>override<sp/></highlight><highlight class="normal">{<sp/>drawDropIndicator(</highlight><highlight class="keyword">false</highlight><highlight class="normal">);<sp/>}</highlight></codeline>
<codeline lineno="75"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>dragMoveEvent(QDragMoveEvent<sp/>*event)<sp/></highlight><highlight class="keyword">override</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="76"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>dropEvent(QDropEvent<sp/>*event)<sp/></highlight><highlight class="keyword">override</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="77"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>leaveEvent(QEvent<sp/>*event)<sp/></highlight><highlight class="keyword">override</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="78"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>resizeEvent(QResizeEvent<sp/>*event)<sp/></highlight><highlight class="keyword">override</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="79"><highlight class="normal"><sp/><sp/>QSize<sp/>sizeHint()<sp/></highlight><highlight class="keyword">const<sp/>override</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="80"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>updateAxisY();</highlight></codeline>
<codeline lineno="81"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>updateTitle();</highlight></codeline>
<codeline lineno="82"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>resetChartCache();</highlight></codeline>
<codeline lineno="83"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>setTheme(QChart::ChartTheme<sp/>theme);</highlight></codeline>
<codeline lineno="84"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>paintEvent(QPaintEvent<sp/>*event)<sp/></highlight><highlight class="keyword">override</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="85"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>drawForeground(QPainter<sp/>*painter,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>QRectF<sp/>&amp;rect)<sp/></highlight><highlight class="keyword">override</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="86"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>drawBackground(QPainter<sp/>*painter,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>QRectF<sp/>&amp;rect)<sp/></highlight><highlight class="keyword">override</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="87"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>drawDropIndicator(</highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>draw)<sp/>{<sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(std::exchange(can_drop,<sp/>draw)<sp/>!=<sp/>can_drop)<sp/>viewport()-&gt;update();<sp/>}</highlight></codeline>
<codeline lineno="88"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>drawSignalValue(QPainter<sp/>*painter);</highlight></codeline>
<codeline lineno="89"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>drawTimeline(QPainter<sp/>*painter);</highlight></codeline>
<codeline lineno="90"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>drawRubberBandTimeRange(QPainter<sp/>*painter);</highlight></codeline>
<codeline lineno="91"><highlight class="normal"><sp/><sp/>std::tuple&lt;double,<sp/>double,<sp/>int&gt;<sp/>getNiceAxisNumbers(qreal<sp/>min,<sp/>qreal<sp/>max,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>tick_count);</highlight></codeline>
<codeline lineno="92"><highlight class="normal"><sp/><sp/>qreal<sp/>niceNumber(qreal<sp/>x,<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>ceiling);</highlight></codeline>
<codeline lineno="93"><highlight class="normal"><sp/><sp/>QXYSeries<sp/>*createSeries(SeriesType<sp/>type,<sp/>QColor<sp/>color);</highlight></codeline>
<codeline lineno="94"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>setSeriesColor(QXYSeries<sp/>*,<sp/>QColor<sp/>color);</highlight></codeline>
<codeline lineno="95"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>updateSeriesPoints();</highlight></codeline>
<codeline lineno="96"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>removeIf(std::function&lt;</highlight><highlight class="keywordtype">bool</highlight><highlight class="normal">(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>SigItem<sp/>&amp;)&gt;<sp/>predicate);</highlight></codeline>
<codeline lineno="97"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>clearTrackPoints()<sp/>{<sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>&amp;s<sp/>:<sp/>sigs)<sp/>s.track_pt<sp/>=<sp/>{};<sp/>}</highlight></codeline>
<codeline lineno="98"><highlight class="normal"></highlight></codeline>
<codeline lineno="99"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>y_label_width<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="100"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>align_to<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="101"><highlight class="normal"><sp/><sp/>QValueAxis<sp/>*axis_x;</highlight></codeline>
<codeline lineno="102"><highlight class="normal"><sp/><sp/>QValueAxis<sp/>*axis_y;</highlight></codeline>
<codeline lineno="103"><highlight class="normal"><sp/><sp/>QMenu<sp/>*menu;</highlight></codeline>
<codeline lineno="104"><highlight class="normal"><sp/><sp/>QAction<sp/>*split_chart_act;</highlight></codeline>
<codeline lineno="105"><highlight class="normal"><sp/><sp/>QAction<sp/>*close_act;</highlight></codeline>
<codeline lineno="106"><highlight class="normal"><sp/><sp/>QGraphicsPixmapItem<sp/>*move_icon;</highlight></codeline>
<codeline lineno="107"><highlight class="normal"><sp/><sp/>QGraphicsProxyWidget<sp/>*close_btn_proxy;</highlight></codeline>
<codeline lineno="108"><highlight class="normal"><sp/><sp/>QGraphicsProxyWidget<sp/>*manage_btn_proxy;</highlight></codeline>
<codeline lineno="109"><highlight class="normal"><sp/><sp/><ref refid="class_tip_label" kindref="compound">TipLabel</ref><sp/>tip_label;</highlight></codeline>
<codeline lineno="110"><highlight class="normal"><sp/><sp/>QList&lt;SigItem&gt;<sp/>sigs;</highlight></codeline>
<codeline lineno="111"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>cur_sec<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="112"><highlight class="normal"><sp/><sp/>SeriesType<sp/>series_type<sp/>=<sp/>SeriesType::Line;</highlight></codeline>
<codeline lineno="113"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>is_scrubbing<sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="114"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>resume_after_scrub<sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="115"><highlight class="normal"><sp/><sp/>QPixmap<sp/>chart_pixmap;</highlight></codeline>
<codeline lineno="116"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>can_drop<sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="117"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>tooltip_x<sp/>=<sp/>-1;</highlight></codeline>
<codeline lineno="118"><highlight class="normal"><sp/><sp/>QFont<sp/>signal_value_font;</highlight></codeline>
<codeline lineno="119"><highlight class="normal"><sp/><sp/><ref refid="class_charts_widget" kindref="compound">ChartsWidget</ref><sp/>*charts_widget;</highlight></codeline>
<codeline lineno="120"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">friend</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal"><ref refid="class_charts_widget" kindref="compound">ChartsWidget</ref>;</highlight></codeline>
<codeline lineno="121"><highlight class="normal">};</highlight></codeline>
    </programlisting>
    <location file="/tmp/openpilot/tools/cabana/chart/chart.h"/>
  </compounddef>
</doxygen>
