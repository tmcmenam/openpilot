<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.17">
  <compounddef id="ekf__sym_8h" kind="file" language="C++">
    <compoundname>ekf_sym.h</compoundname>
    <includes local="no">iostream</includes>
    <includes local="no">cassert</includes>
    <includes local="no">string</includes>
    <includes local="no">vector</includes>
    <includes local="no">deque</includes>
    <includes local="no">unordered_map</includes>
    <includes local="no">map</includes>
    <includes local="no">cmath</includes>
    <includes local="no">optional</includes>
    <includes local="no">eigen3/Eigen/Dense</includes>
    <includes refid="common__ekf_8h" local="yes">common_ekf.h</includes>
    <incdepgraph>
      <node id="9">
        <label>cmath</label>
      </node>
      <node id="3">
        <label>cassert</label>
      </node>
      <node id="11">
        <label>eigen3/Eigen/Dense</label>
      </node>
      <node id="4">
        <label>string</label>
      </node>
      <node id="12">
        <label>common_ekf.h</label>
        <link refid="common__ekf_8h_source"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="6" relation="include">
        </childnode>
        <childnode refid="7" relation="include">
        </childnode>
        <childnode refid="8" relation="include">
        </childnode>
        <childnode refid="9" relation="include">
        </childnode>
        <childnode refid="11" relation="include">
        </childnode>
      </node>
      <node id="8">
        <label>map</label>
      </node>
      <node id="10">
        <label>optional</label>
      </node>
      <node id="5">
        <label>vector</label>
      </node>
      <node id="2">
        <label>iostream</label>
      </node>
      <node id="1">
        <label>/tmp/openpilot/rednose_repo/rednose/helpers/ekf_sym.h</label>
        <link refid="ekf__sym_8h"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="6" relation="include">
        </childnode>
        <childnode refid="7" relation="include">
        </childnode>
        <childnode refid="8" relation="include">
        </childnode>
        <childnode refid="9" relation="include">
        </childnode>
        <childnode refid="10" relation="include">
        </childnode>
        <childnode refid="11" relation="include">
        </childnode>
        <childnode refid="12" relation="include">
        </childnode>
      </node>
      <node id="6">
        <label>deque</label>
      </node>
      <node id="7">
        <label>unordered_map</label>
      </node>
    </incdepgraph>
    <innerclass refid="struct_e_k_f_s_1_1_observation" prot="public">EKFS::Observation</innerclass>
    <innerclass refid="struct_e_k_f_s_1_1_estimate" prot="public">EKFS::Estimate</innerclass>
    <innerclass refid="class_e_k_f_s_1_1_e_k_f_sym" prot="public">EKFS::EKFSym</innerclass>
    <innernamespace refid="namespace_e_k_f_s">EKFS</innernamespace>
      <sectiondef kind="define">
      <memberdef kind="define" id="ekf__sym_8h_1a57538666062f3523134770b71397bca5" prot="public" static="no">
        <name>REWIND_TO_KEEP</name>
        <initializer>512</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/tmp/openpilot/rednose_repo/rednose/helpers/ekf_sym.h" line="17" column="9" bodyfile="/tmp/openpilot/rednose_repo/rednose/helpers/ekf_sym.h" bodystart="17" bodyend="-1"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="preprocessor">#pragma<sp/>once</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2"><highlight class="normal"></highlight></codeline>
<codeline lineno="3"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;iostream&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;cassert&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;string&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;vector&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;deque&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="8"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;unordered_map&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="9"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;map&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="10"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;cmath&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="11"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;optional&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="12"><highlight class="normal"></highlight></codeline>
<codeline lineno="13"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;eigen3/Eigen/Dense&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="14"><highlight class="normal"></highlight></codeline>
<codeline lineno="15"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;common_ekf.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="16"><highlight class="normal"></highlight></codeline>
<codeline lineno="17"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>REWIND_TO_KEEP<sp/>512</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="18"><highlight class="normal"></highlight></codeline>
<codeline lineno="19"><highlight class="normal"></highlight><highlight class="keyword">namespace<sp/></highlight><highlight class="normal">EKFS<sp/>{</highlight></codeline>
<codeline lineno="20"><highlight class="normal"></highlight></codeline>
<codeline lineno="21"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/>Eigen::Matrix&lt;double,<sp/>Eigen::Dynamic,<sp/>Eigen::Dynamic,<sp/>Eigen::RowMajor&gt;<sp/>MatrixXdr;</highlight></codeline>
<codeline lineno="22"><highlight class="normal"></highlight></codeline>
<codeline lineno="23" refid="struct_e_k_f_s_1_1_observation" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="struct_e_k_f_s_1_1_observation" kindref="compound">Observation</ref><sp/>{</highlight></codeline>
<codeline lineno="24"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>t;</highlight></codeline>
<codeline lineno="25"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>kind;</highlight></codeline>
<codeline lineno="26"><highlight class="normal"><sp/><sp/>std::vector&lt;Eigen::VectorXd&gt;<sp/>z;</highlight></codeline>
<codeline lineno="27"><highlight class="normal"><sp/><sp/>std::vector&lt;MatrixXdr&gt;<sp/>R;</highlight></codeline>
<codeline lineno="28"><highlight class="normal"><sp/><sp/>std::vector&lt;std::vector&lt;double&gt;&gt;<sp/>extra_args;</highlight></codeline>
<codeline lineno="29"><highlight class="normal">}<sp/><ref refid="struct_e_k_f_s_1_1_observation" kindref="compound">Observation</ref>;</highlight></codeline>
<codeline lineno="30"><highlight class="normal"></highlight></codeline>
<codeline lineno="31" refid="struct_e_k_f_s_1_1_estimate" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="struct_e_k_f_s_1_1_estimate" kindref="compound">Estimate</ref><sp/>{</highlight></codeline>
<codeline lineno="32"><highlight class="normal"><sp/><sp/>Eigen::VectorXd<sp/>xk1;</highlight></codeline>
<codeline lineno="33"><highlight class="normal"><sp/><sp/>Eigen::VectorXd<sp/>xk;</highlight></codeline>
<codeline lineno="34"><highlight class="normal"><sp/><sp/>MatrixXdr<sp/>Pk1;</highlight></codeline>
<codeline lineno="35"><highlight class="normal"><sp/><sp/>MatrixXdr<sp/>Pk;</highlight></codeline>
<codeline lineno="36"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>t;</highlight></codeline>
<codeline lineno="37"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>kind;</highlight></codeline>
<codeline lineno="38"><highlight class="normal"><sp/><sp/>std::vector&lt;Eigen::VectorXd&gt;<sp/>y;</highlight></codeline>
<codeline lineno="39"><highlight class="normal"><sp/><sp/>std::vector&lt;Eigen::VectorXd&gt;<sp/>z;</highlight></codeline>
<codeline lineno="40"><highlight class="normal"><sp/><sp/>std::vector&lt;std::vector&lt;double&gt;&gt;<sp/>extra_args;</highlight></codeline>
<codeline lineno="41"><highlight class="normal">}<sp/><ref refid="struct_e_k_f_s_1_1_estimate" kindref="compound">Estimate</ref>;</highlight></codeline>
<codeline lineno="42"><highlight class="normal"></highlight></codeline>
<codeline lineno="43" refid="class_e_k_f_s_1_1_e_k_f_sym" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal"><ref refid="class_e_k_f_s_1_1_e_k_f_sym" kindref="compound">EKFSym</ref><sp/>{</highlight></codeline>
<codeline lineno="44"><highlight class="normal"></highlight><highlight class="keyword">public</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="45"><highlight class="normal"><sp/><sp/><ref refid="class_e_k_f_s_1_1_e_k_f_sym" kindref="compound">EKFSym</ref>(std::string<sp/>name,<sp/>Eigen::Map&lt;MatrixXdr&gt;<sp/>Q,<sp/>Eigen::Map&lt;Eigen::VectorXd&gt;<sp/>x_initial,</highlight></codeline>
<codeline lineno="46"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>Eigen::Map&lt;MatrixXdr&gt;<sp/>P_initial,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>dim_main,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>dim_main_err,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>N<sp/>=<sp/>0,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>dim_augment<sp/>=<sp/>0,</highlight></codeline>
<codeline lineno="47"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>dim_augment_err<sp/>=<sp/>0,<sp/>std::vector&lt;int&gt;<sp/>maha_test_kinds<sp/>=<sp/>std::vector&lt;int&gt;(),</highlight></codeline>
<codeline lineno="48"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>std::vector&lt;int&gt;<sp/>quaternion_idxs<sp/>=<sp/>std::vector&lt;int&gt;(),</highlight></codeline>
<codeline lineno="49"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>std::vector&lt;std::string&gt;<sp/>global_vars<sp/>=<sp/>std::vector&lt;std::string&gt;(),<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>max_rewind_age<sp/>=<sp/>1.0);</highlight></codeline>
<codeline lineno="50"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>init_state(Eigen::Map&lt;Eigen::VectorXd&gt;<sp/>state,<sp/>Eigen::Map&lt;MatrixXdr&gt;<sp/>covs,<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>filter_time);</highlight></codeline>
<codeline lineno="51"><highlight class="normal"></highlight></codeline>
<codeline lineno="52"><highlight class="normal"><sp/><sp/>Eigen::VectorXd<sp/>state();</highlight></codeline>
<codeline lineno="53"><highlight class="normal"><sp/><sp/>MatrixXdr<sp/>covs();</highlight></codeline>
<codeline lineno="54"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>set_filter_time(</highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>t);</highlight></codeline>
<codeline lineno="55"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>get_filter_time();</highlight></codeline>
<codeline lineno="56"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>normalize_quaternions();</highlight></codeline>
<codeline lineno="57"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>normalize_slice(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>slice_start,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>slice_end_ex);</highlight></codeline>
<codeline lineno="58"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>set_global(std::string<sp/>global_var,<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>val);</highlight></codeline>
<codeline lineno="59"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>reset_rewind();</highlight></codeline>
<codeline lineno="60"><highlight class="normal"></highlight></codeline>
<codeline lineno="61"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>predict(</highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>t);</highlight></codeline>
<codeline lineno="62"><highlight class="normal"><sp/><sp/>std::optional&lt;Estimate&gt;<sp/>predict_and_update_batch(</highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>t,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>kind,<sp/>std::vector&lt;Eigen::Map&lt;Eigen::VectorXd&gt;&gt;<sp/>z,</highlight></codeline>
<codeline lineno="63"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>std::vector&lt;Eigen::Map&lt;MatrixXdr&gt;&gt;<sp/>R,<sp/>std::vector&lt;std::vector&lt;double&gt;&gt;<sp/>extra_args<sp/>=<sp/>{{}},<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>augment<sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="64"><highlight class="normal"></highlight></codeline>
<codeline lineno="65"><highlight class="normal"><sp/><sp/>extra_routine_t<sp/>get_extra_routine(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string&amp;<sp/>routine);</highlight></codeline>
<codeline lineno="66"><highlight class="normal"></highlight></codeline>
<codeline lineno="67"><highlight class="normal"></highlight><highlight class="keyword">private</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="68"><highlight class="normal"><sp/><sp/>std::deque&lt;Observation&gt;<sp/>rewind(</highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>t);</highlight></codeline>
<codeline lineno="69"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>checkpoint(<ref refid="struct_e_k_f_s_1_1_observation" kindref="compound">Observation</ref>&amp;<sp/>obs);</highlight></codeline>
<codeline lineno="70"><highlight class="normal"></highlight></codeline>
<codeline lineno="71"><highlight class="normal"><sp/><sp/><ref refid="struct_e_k_f_s_1_1_estimate" kindref="compound">Estimate</ref><sp/>predict_and_update_batch(<ref refid="struct_e_k_f_s_1_1_observation" kindref="compound">Observation</ref>&amp;<sp/>obs,<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>augment);</highlight></codeline>
<codeline lineno="72"><highlight class="normal"><sp/><sp/>Eigen::VectorXd<sp/>update(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>kind,<sp/>Eigen::VectorXd<sp/>z,<sp/>MatrixXdr<sp/>R,<sp/>std::vector&lt;double&gt;<sp/>extra_args);</highlight></codeline>
<codeline lineno="73"><highlight class="normal"></highlight></codeline>
<codeline lineno="74"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>stuct<sp/>with<sp/>linked<sp/>sympy<sp/>generated<sp/>functions</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="75"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="struct_e_k_f" kindref="compound">EKF</ref><sp/>*ekf<sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="76"><highlight class="normal"></highlight></codeline>
<codeline lineno="77"><highlight class="normal"><sp/><sp/>Eigen::VectorXd<sp/>x;<sp/><sp/></highlight><highlight class="comment">//<sp/>state</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="78"><highlight class="normal"><sp/><sp/>MatrixXdr<sp/>P;<sp/><sp/></highlight><highlight class="comment">//<sp/>covs</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="79"><highlight class="normal"></highlight></codeline>
<codeline lineno="80"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>msckf;</highlight></codeline>
<codeline lineno="81"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>N;</highlight></codeline>
<codeline lineno="82"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>dim_augment;</highlight></codeline>
<codeline lineno="83"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>dim_augment_err;</highlight></codeline>
<codeline lineno="84"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>dim_main;</highlight></codeline>
<codeline lineno="85"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>dim_main_err;</highlight></codeline>
<codeline lineno="86"><highlight class="normal"></highlight></codeline>
<codeline lineno="87"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>state</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="88"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>dim_x;</highlight></codeline>
<codeline lineno="89"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>dim_err;</highlight></codeline>
<codeline lineno="90"><highlight class="normal"></highlight></codeline>
<codeline lineno="91"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>filter_time;</highlight></codeline>
<codeline lineno="92"><highlight class="normal"></highlight></codeline>
<codeline lineno="93"><highlight class="normal"><sp/><sp/>std::vector&lt;int&gt;<sp/>maha_test_kinds;</highlight></codeline>
<codeline lineno="94"><highlight class="normal"><sp/><sp/>std::vector&lt;int&gt;<sp/>quaternion_idxs;</highlight></codeline>
<codeline lineno="95"><highlight class="normal"></highlight></codeline>
<codeline lineno="96"><highlight class="normal"><sp/><sp/>std::vector&lt;std::string&gt;<sp/>global_vars;</highlight></codeline>
<codeline lineno="97"><highlight class="normal"></highlight></codeline>
<codeline lineno="98"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>process<sp/>noise</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="99"><highlight class="normal"><sp/><sp/>MatrixXdr<sp/>Q;</highlight></codeline>
<codeline lineno="100"><highlight class="normal"></highlight></codeline>
<codeline lineno="101"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>rewind<sp/>stuff</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="102"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>max_rewind_age;</highlight></codeline>
<codeline lineno="103"><highlight class="normal"><sp/><sp/>std::deque&lt;double&gt;<sp/>rewind_t;</highlight></codeline>
<codeline lineno="104"><highlight class="normal"><sp/><sp/>std::deque&lt;std::pair&lt;Eigen::VectorXd,<sp/>MatrixXdr&gt;&gt;<sp/>rewind_states;</highlight></codeline>
<codeline lineno="105"><highlight class="normal"><sp/><sp/>std::deque&lt;Observation&gt;<sp/>rewind_obscache;</highlight></codeline>
<codeline lineno="106"><highlight class="normal"></highlight></codeline>
<codeline lineno="107"><highlight class="normal"><sp/><sp/>Eigen::VectorXd<sp/>augment_times;</highlight></codeline>
<codeline lineno="108"><highlight class="normal"></highlight></codeline>
<codeline lineno="109"><highlight class="normal"><sp/><sp/>std::vector&lt;int&gt;<sp/>feature_track_kinds;</highlight></codeline>
<codeline lineno="110"><highlight class="normal">};</highlight></codeline>
<codeline lineno="111"><highlight class="normal"></highlight></codeline>
<codeline lineno="112"><highlight class="normal">}</highlight></codeline>
    </programlisting>
    <location file="/tmp/openpilot/rednose_repo/rednose/helpers/ekf_sym.h"/>
  </compounddef>
</doxygen>
