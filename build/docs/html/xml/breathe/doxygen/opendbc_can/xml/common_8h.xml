<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.17">
  <compounddef id="common_8h" kind="file" language="C++">
    <compoundname>common.h</compoundname>
    <includes local="no">map</includes>
    <includes local="no">string</includes>
    <includes local="no">utility</includes>
    <includes local="no">unordered_map</includes>
    <includes local="no">vector</includes>
    <includes local="no">capnp/dynamic.h</includes>
    <includes local="no">capnp/serialize.h</includes>
    <includes local="yes">cereal/gen/cpp/log.capnp.h</includes>
    <includes local="yes">opendbc/can/common_dbc.h</includes>
    <incdepgraph>
      <node id="10">
        <label>opendbc/can/common_dbc.h</label>
      </node>
      <node id="8">
        <label>capnp/serialize.h</label>
      </node>
      <node id="3">
        <label>string</label>
      </node>
      <node id="2">
        <label>map</label>
      </node>
      <node id="7">
        <label>capnp/dynamic.h</label>
      </node>
      <node id="1">
        <label>/tmp/openpilot/opendbc/can/common.h</label>
        <link refid="common_8h"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="6" relation="include">
        </childnode>
        <childnode refid="7" relation="include">
        </childnode>
        <childnode refid="8" relation="include">
        </childnode>
        <childnode refid="9" relation="include">
        </childnode>
        <childnode refid="10" relation="include">
        </childnode>
      </node>
      <node id="6">
        <label>vector</label>
      </node>
      <node id="4">
        <label>utility</label>
      </node>
      <node id="5">
        <label>unordered_map</label>
      </node>
      <node id="9">
        <label>cereal/gen/cpp/log.capnp.h</label>
      </node>
    </incdepgraph>
    <innerclass refid="class_message_state" prot="public">MessageState</innerclass>
    <innerclass refid="class_c_a_n_parser" prot="public">CANParser</innerclass>
    <innerclass refid="class_c_a_n_packer" prot="public">CANPacker</innerclass>
      <sectiondef kind="define">
      <memberdef kind="define" id="common_8h_1ae1103fea1e1b3c41ca3322d5389f7162" prot="public" static="no">
        <name>INFO</name>
        <initializer>printf</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/tmp/openpilot/opendbc/can/common.h" line="18" column="9" bodyfile="/tmp/openpilot/opendbc/can/common.h" bodystart="18" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="common_8h_1a271d8f7f52be750e5c744a394ec71344" prot="public" static="no">
        <name>WARN</name>
        <initializer>printf</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/tmp/openpilot/opendbc/can/common.h" line="19" column="9" bodyfile="/tmp/openpilot/opendbc/can/common.h" bodystart="19" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="common_8h_1a96dd473db0b3d10bd43390cdacb00120" prot="public" static="no">
        <name>DEBUG</name>
        <param><defname>...</defname></param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/tmp/openpilot/opendbc/can/common.h" line="20" column="9" bodyfile="/tmp/openpilot/opendbc/can/common.h" bodystart="20" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="common_8h_1aa6a84ee6c8cc54b3b5ba6da06e4aa9ee" prot="public" static="no">
        <name>MAX_BAD_COUNTER</name>
        <initializer>5</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/tmp/openpilot/opendbc/can/common.h" line="23" column="9" bodyfile="/tmp/openpilot/opendbc/can/common.h" bodystart="23" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="common_8h_1a233765bf8d213e4a3d483c18869e4f5a" prot="public" static="no">
        <name>CAN_INVALID_CNT</name>
        <initializer>5</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/tmp/openpilot/opendbc/can/common.h" line="24" column="9" bodyfile="/tmp/openpilot/opendbc/can/common.h" bodystart="24" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="func">
      <memberdef kind="function" id="common_8h_1aca5f729986b6ec6ffc7fdcf8138a4dd8" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void init_crc_lookup_tables</definition>
        <argsstring>()</argsstring>
        <name>init_crc_lookup_tables</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/tmp/openpilot/opendbc/can/common.h" line="26" column="6" declfile="/tmp/openpilot/opendbc/can/common.h" declline="26" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="common_8h_1aecf65d8d85cdfd597d72caf33fb3fa7f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>unsigned int</type>
        <definition>unsigned int honda_checksum</definition>
        <argsstring>(uint32_t address, const Signal &amp;sig, const std::vector&lt; uint8_t &gt; &amp;d)</argsstring>
        <name>honda_checksum</name>
        <param>
          <type>uint32_t</type>
          <declname>address</declname>
        </param>
        <param>
          <type>const Signal &amp;</type>
          <declname>sig</declname>
        </param>
        <param>
          <type>const std::vector&lt; uint8_t &gt; &amp;</type>
          <declname>d</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/tmp/openpilot/opendbc/can/common.h" line="29" column="14" declfile="/tmp/openpilot/opendbc/can/common.h" declline="29" declcolumn="14"/>
      </memberdef>
      <memberdef kind="function" id="common_8h_1a93424f2335db7c53045dfb84dfb70498" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>unsigned int</type>
        <definition>unsigned int toyota_checksum</definition>
        <argsstring>(uint32_t address, const Signal &amp;sig, const std::vector&lt; uint8_t &gt; &amp;d)</argsstring>
        <name>toyota_checksum</name>
        <param>
          <type>uint32_t</type>
          <declname>address</declname>
        </param>
        <param>
          <type>const Signal &amp;</type>
          <declname>sig</declname>
        </param>
        <param>
          <type>const std::vector&lt; uint8_t &gt; &amp;</type>
          <declname>d</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/tmp/openpilot/opendbc/can/common.h" line="30" column="14" declfile="/tmp/openpilot/opendbc/can/common.h" declline="30" declcolumn="14"/>
      </memberdef>
      <memberdef kind="function" id="common_8h_1a8c3656da56e359874af16f79fcac0b99" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>unsigned int</type>
        <definition>unsigned int subaru_checksum</definition>
        <argsstring>(uint32_t address, const Signal &amp;sig, const std::vector&lt; uint8_t &gt; &amp;d)</argsstring>
        <name>subaru_checksum</name>
        <param>
          <type>uint32_t</type>
          <declname>address</declname>
        </param>
        <param>
          <type>const Signal &amp;</type>
          <declname>sig</declname>
        </param>
        <param>
          <type>const std::vector&lt; uint8_t &gt; &amp;</type>
          <declname>d</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/tmp/openpilot/opendbc/can/common.h" line="31" column="14" declfile="/tmp/openpilot/opendbc/can/common.h" declline="31" declcolumn="14"/>
      </memberdef>
      <memberdef kind="function" id="common_8h_1a2756cf1ad65281fe43f557b0db6c7255" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>unsigned int</type>
        <definition>unsigned int chrysler_checksum</definition>
        <argsstring>(uint32_t address, const Signal &amp;sig, const std::vector&lt; uint8_t &gt; &amp;d)</argsstring>
        <name>chrysler_checksum</name>
        <param>
          <type>uint32_t</type>
          <declname>address</declname>
        </param>
        <param>
          <type>const Signal &amp;</type>
          <declname>sig</declname>
        </param>
        <param>
          <type>const std::vector&lt; uint8_t &gt; &amp;</type>
          <declname>d</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/tmp/openpilot/opendbc/can/common.h" line="32" column="14" declfile="/tmp/openpilot/opendbc/can/common.h" declline="32" declcolumn="14"/>
      </memberdef>
      <memberdef kind="function" id="common_8h_1a2d20362adeae62b3687638ec981dc7e2" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>unsigned int</type>
        <definition>unsigned int volkswagen_mqb_checksum</definition>
        <argsstring>(uint32_t address, const Signal &amp;sig, const std::vector&lt; uint8_t &gt; &amp;d)</argsstring>
        <name>volkswagen_mqb_checksum</name>
        <param>
          <type>uint32_t</type>
          <declname>address</declname>
        </param>
        <param>
          <type>const Signal &amp;</type>
          <declname>sig</declname>
        </param>
        <param>
          <type>const std::vector&lt; uint8_t &gt; &amp;</type>
          <declname>d</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/tmp/openpilot/opendbc/can/common.h" line="33" column="14" declfile="/tmp/openpilot/opendbc/can/common.h" declline="33" declcolumn="14"/>
      </memberdef>
      <memberdef kind="function" id="common_8h_1a8a5c381f456db3a4b77d9fd4d6010203" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>unsigned int</type>
        <definition>unsigned int xor_checksum</definition>
        <argsstring>(uint32_t address, const Signal &amp;sig, const std::vector&lt; uint8_t &gt; &amp;d)</argsstring>
        <name>xor_checksum</name>
        <param>
          <type>uint32_t</type>
          <declname>address</declname>
        </param>
        <param>
          <type>const Signal &amp;</type>
          <declname>sig</declname>
        </param>
        <param>
          <type>const std::vector&lt; uint8_t &gt; &amp;</type>
          <declname>d</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/tmp/openpilot/opendbc/can/common.h" line="34" column="14" declfile="/tmp/openpilot/opendbc/can/common.h" declline="34" declcolumn="14"/>
      </memberdef>
      <memberdef kind="function" id="common_8h_1a1c9fe6026b0c0f591d1e58597af8f141" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>unsigned int</type>
        <definition>unsigned int hkg_can_fd_checksum</definition>
        <argsstring>(uint32_t address, const Signal &amp;sig, const std::vector&lt; uint8_t &gt; &amp;d)</argsstring>
        <name>hkg_can_fd_checksum</name>
        <param>
          <type>uint32_t</type>
          <declname>address</declname>
        </param>
        <param>
          <type>const Signal &amp;</type>
          <declname>sig</declname>
        </param>
        <param>
          <type>const std::vector&lt; uint8_t &gt; &amp;</type>
          <declname>d</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/tmp/openpilot/opendbc/can/common.h" line="35" column="14" declfile="/tmp/openpilot/opendbc/can/common.h" declline="35" declcolumn="14"/>
      </memberdef>
      <memberdef kind="function" id="common_8h_1a13ec7dc52e617e7de07239da19deb822" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>unsigned int</type>
        <definition>unsigned int pedal_checksum</definition>
        <argsstring>(uint32_t address, const Signal &amp;sig, const std::vector&lt; uint8_t &gt; &amp;d)</argsstring>
        <name>pedal_checksum</name>
        <param>
          <type>uint32_t</type>
          <declname>address</declname>
        </param>
        <param>
          <type>const Signal &amp;</type>
          <declname>sig</declname>
        </param>
        <param>
          <type>const std::vector&lt; uint8_t &gt; &amp;</type>
          <declname>d</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/tmp/openpilot/opendbc/can/common.h" line="36" column="14" declfile="/tmp/openpilot/opendbc/can/common.h" declline="36" declcolumn="14"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="preprocessor">#pragma<sp/>once</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2"><highlight class="normal"></highlight></codeline>
<codeline lineno="3"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;map&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;string&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;utility&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;unordered_map&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;vector&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="8"><highlight class="normal"></highlight></codeline>
<codeline lineno="9"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;capnp/dynamic.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="10"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;capnp/serialize.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="11"><highlight class="normal"></highlight></codeline>
<codeline lineno="12"><highlight class="normal"></highlight><highlight class="preprocessor">#ifndef<sp/>DYNAMIC_CAPNP</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="13"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;cereal/gen/cpp/log.capnp.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="14"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="15"><highlight class="normal"></highlight></codeline>
<codeline lineno="16"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;opendbc/can/common_dbc.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="17"><highlight class="normal"></highlight></codeline>
<codeline lineno="18"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>INFO<sp/>printf</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="19"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>WARN<sp/>printf</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="20"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>DEBUG(...)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="21"><highlight class="normal"></highlight><highlight class="comment">//#define<sp/>DEBUG<sp/>printf</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="22"><highlight class="normal"></highlight></codeline>
<codeline lineno="23"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>MAX_BAD_COUNTER<sp/>5</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="24"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>CAN_INVALID_CNT<sp/>5</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="25"><highlight class="normal"></highlight></codeline>
<codeline lineno="26"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>init_crc_lookup_tables();</highlight></codeline>
<codeline lineno="27"><highlight class="normal"></highlight></codeline>
<codeline lineno="28"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Car<sp/>specific<sp/>functions</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="29"><highlight class="normal"></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>honda_checksum(uint32_t<sp/>address,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Signal<sp/>&amp;sig,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::vector&lt;uint8_t&gt;<sp/>&amp;d);</highlight></codeline>
<codeline lineno="30"><highlight class="normal"></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>toyota_checksum(uint32_t<sp/>address,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Signal<sp/>&amp;sig,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::vector&lt;uint8_t&gt;<sp/>&amp;d);</highlight></codeline>
<codeline lineno="31"><highlight class="normal"></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>subaru_checksum(uint32_t<sp/>address,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Signal<sp/>&amp;sig,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::vector&lt;uint8_t&gt;<sp/>&amp;d);</highlight></codeline>
<codeline lineno="32"><highlight class="normal"></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>chrysler_checksum(uint32_t<sp/>address,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Signal<sp/>&amp;sig,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::vector&lt;uint8_t&gt;<sp/>&amp;d);</highlight></codeline>
<codeline lineno="33"><highlight class="normal"></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>volkswagen_mqb_checksum(uint32_t<sp/>address,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Signal<sp/>&amp;sig,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::vector&lt;uint8_t&gt;<sp/>&amp;d);</highlight></codeline>
<codeline lineno="34"><highlight class="normal"></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>xor_checksum(uint32_t<sp/>address,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Signal<sp/>&amp;sig,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::vector&lt;uint8_t&gt;<sp/>&amp;d);</highlight></codeline>
<codeline lineno="35"><highlight class="normal"></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>hkg_can_fd_checksum(uint32_t<sp/>address,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Signal<sp/>&amp;sig,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::vector&lt;uint8_t&gt;<sp/>&amp;d);</highlight></codeline>
<codeline lineno="36"><highlight class="normal"></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>pedal_checksum(uint32_t<sp/>address,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Signal<sp/>&amp;sig,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::vector&lt;uint8_t&gt;<sp/>&amp;d);</highlight></codeline>
<codeline lineno="37"><highlight class="normal"></highlight></codeline>
<codeline lineno="38" refid="class_message_state" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal"><ref refid="class_message_state" kindref="compound">MessageState</ref><sp/>{</highlight></codeline>
<codeline lineno="39"><highlight class="normal"></highlight><highlight class="keyword">public</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="40"><highlight class="normal"><sp/><sp/>std::string<sp/>name;</highlight></codeline>
<codeline lineno="41"><highlight class="normal"><sp/><sp/>uint32_t<sp/>address;</highlight></codeline>
<codeline lineno="42"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>size;</highlight></codeline>
<codeline lineno="43"><highlight class="normal"></highlight></codeline>
<codeline lineno="44"><highlight class="normal"><sp/><sp/>std::vector&lt;Signal&gt;<sp/>parse_sigs;</highlight></codeline>
<codeline lineno="45"><highlight class="normal"><sp/><sp/>std::vector&lt;double&gt;<sp/>vals;</highlight></codeline>
<codeline lineno="46"><highlight class="normal"><sp/><sp/>std::vector&lt;std::vector&lt;double&gt;&gt;<sp/>all_vals;</highlight></codeline>
<codeline lineno="47"><highlight class="normal"></highlight></codeline>
<codeline lineno="48"><highlight class="normal"><sp/><sp/>uint64_t<sp/>last_seen_nanos;</highlight></codeline>
<codeline lineno="49"><highlight class="normal"><sp/><sp/>uint64_t<sp/>check_threshold;</highlight></codeline>
<codeline lineno="50"><highlight class="normal"></highlight></codeline>
<codeline lineno="51"><highlight class="normal"><sp/><sp/>uint8_t<sp/>counter;</highlight></codeline>
<codeline lineno="52"><highlight class="normal"><sp/><sp/>uint8_t<sp/>counter_fail;</highlight></codeline>
<codeline lineno="53"><highlight class="normal"></highlight></codeline>
<codeline lineno="54"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>ignore_checksum<sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="55"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>ignore_counter<sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="56"><highlight class="normal"></highlight></codeline>
<codeline lineno="57"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>parse(uint64_t<sp/>sec,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::vector&lt;uint8_t&gt;<sp/>&amp;dat);</highlight></codeline>
<codeline lineno="58"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>update_counter_generic(int64_t<sp/>v,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>cnt_size);</highlight></codeline>
<codeline lineno="59"><highlight class="normal">};</highlight></codeline>
<codeline lineno="60"><highlight class="normal"></highlight></codeline>
<codeline lineno="61" refid="class_c_a_n_parser" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal"><ref refid="class_c_a_n_parser" kindref="compound">CANParser</ref><sp/>{</highlight></codeline>
<codeline lineno="62"><highlight class="normal"></highlight><highlight class="keyword">private</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="63"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>bus;</highlight></codeline>
<codeline lineno="64"><highlight class="normal"><sp/><sp/>kj::Array&lt;capnp::word&gt;<sp/>aligned_buf;</highlight></codeline>
<codeline lineno="65"><highlight class="normal"></highlight></codeline>
<codeline lineno="66"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>DBC<sp/>*dbc<sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="67"><highlight class="normal"><sp/><sp/>std::unordered_map&lt;uint32_t,<sp/>MessageState&gt;<sp/>message_states;</highlight></codeline>
<codeline lineno="68"><highlight class="normal"></highlight></codeline>
<codeline lineno="69"><highlight class="normal"></highlight><highlight class="keyword">public</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="70"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>can_valid<sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="71"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>bus_timeout<sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="72"><highlight class="normal"><sp/><sp/>uint64_t<sp/>first_sec<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="73"><highlight class="normal"><sp/><sp/>uint64_t<sp/>last_sec<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="74"><highlight class="normal"><sp/><sp/>uint64_t<sp/>last_nonempty_sec<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="75"><highlight class="normal"><sp/><sp/>uint64_t<sp/>bus_timeout_threshold<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="76"><highlight class="normal"><sp/><sp/>uint64_t<sp/>can_invalid_cnt<sp/>=<sp/>CAN_INVALID_CNT;</highlight></codeline>
<codeline lineno="77"><highlight class="normal"></highlight></codeline>
<codeline lineno="78"><highlight class="normal"><sp/><sp/><ref refid="class_c_a_n_parser" kindref="compound">CANParser</ref>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>abus,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string&amp;<sp/>dbc_name,</highlight></codeline>
<codeline lineno="79"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::vector&lt;std::pair&lt;uint32_t,<sp/>int&gt;&gt;<sp/>&amp;messages);</highlight></codeline>
<codeline lineno="80"><highlight class="normal"><sp/><sp/><ref refid="class_c_a_n_parser" kindref="compound">CANParser</ref>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>abus,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string&amp;<sp/>dbc_name,<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>ignore_checksum,<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>ignore_counter);</highlight></codeline>
<codeline lineno="81"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/>#ifndef<sp/>DYNAMIC_CAPNP</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="82"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>update_string(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string<sp/>&amp;data,<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>sendcan);</highlight></codeline>
<codeline lineno="83"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>update_strings(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::vector&lt;std::string&gt;<sp/>&amp;data,<sp/>std::vector&lt;SignalValue&gt;<sp/>&amp;vals,<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>sendcan);</highlight></codeline>
<codeline lineno="84"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>UpdateCans(uint64_t<sp/>sec,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>capnp::List&lt;cereal::CanData&gt;::Reader&amp;<sp/>cans);</highlight></codeline>
<codeline lineno="85"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/>#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="86"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>UpdateCans(uint64_t<sp/>sec,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>capnp::DynamicStruct::Reader&amp;<sp/>cans);</highlight></codeline>
<codeline lineno="87"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>UpdateValid(uint64_t<sp/>sec);</highlight></codeline>
<codeline lineno="88"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>query_latest(std::vector&lt;SignalValue&gt;<sp/>&amp;vals,<sp/>uint64_t<sp/>last_ts<sp/>=<sp/>0);</highlight></codeline>
<codeline lineno="89"><highlight class="normal">};</highlight></codeline>
<codeline lineno="90"><highlight class="normal"></highlight></codeline>
<codeline lineno="91" refid="class_c_a_n_packer" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal"><ref refid="class_c_a_n_packer" kindref="compound">CANPacker</ref><sp/>{</highlight></codeline>
<codeline lineno="92"><highlight class="normal"></highlight><highlight class="keyword">private</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="93"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>DBC<sp/>*dbc<sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="94"><highlight class="normal"><sp/><sp/>std::map&lt;std::pair&lt;uint32_t,<sp/>std::string&gt;,<sp/>Signal&gt;<sp/>signal_lookup;</highlight></codeline>
<codeline lineno="95"><highlight class="normal"><sp/><sp/>std::map&lt;uint32_t,<sp/>Msg&gt;<sp/>message_lookup;</highlight></codeline>
<codeline lineno="96"><highlight class="normal"><sp/><sp/>std::map&lt;uint32_t,<sp/>uint32_t&gt;<sp/>counters;</highlight></codeline>
<codeline lineno="97"><highlight class="normal"></highlight></codeline>
<codeline lineno="98"><highlight class="normal"></highlight><highlight class="keyword">public</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="99"><highlight class="normal"><sp/><sp/><ref refid="class_c_a_n_packer" kindref="compound">CANPacker</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string&amp;<sp/>dbc_name);</highlight></codeline>
<codeline lineno="100"><highlight class="normal"><sp/><sp/>std::vector&lt;uint8_t&gt;<sp/>pack(uint32_t<sp/>address,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::vector&lt;SignalPackValue&gt;<sp/>&amp;values);</highlight></codeline>
<codeline lineno="101"><highlight class="normal"><sp/><sp/>Msg*<sp/>lookup_message(uint32_t<sp/>address);</highlight></codeline>
<codeline lineno="102"><highlight class="normal">};</highlight></codeline>
    </programlisting>
    <location file="/tmp/openpilot/opendbc/can/common.h"/>
  </compounddef>
</doxygen>
