<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.17">
  <compounddef id="abstractstream_8h" kind="file" language="C++">
    <compoundname>abstractstream.h</compoundname>
    <includes local="no">array</includes>
    <includes local="no">atomic</includes>
    <includes local="no">deque</includes>
    <includes local="no">memory</includes>
    <includes local="no">tuple</includes>
    <includes local="no">unordered_map</includes>
    <includes local="no">vector</includes>
    <includes local="no">QColor</includes>
    <includes local="no">QHash</includes>
    <includes local="yes">common/timing.h</includes>
    <includes local="yes">tools/cabana/dbc/dbcmanager.h</includes>
    <includes local="yes">tools/cabana/settings.h</includes>
    <includes local="yes">tools/cabana/util.h</includes>
    <includes local="yes">tools/replay/replay.h</includes>
    <includedby refid="livestream_8h" local="yes">/tmp/openpilot/tools/cabana/streams/livestream.h</includedby>
    <includedby refid="replaystream_8h" local="yes">/tmp/openpilot/tools/cabana/streams/replaystream.h</includedby>
    <incdepgraph>
      <node id="3">
        <label>atomic</label>
      </node>
      <node id="1">
        <label>/tmp/openpilot/tools/cabana/streams/abstractstream.h</label>
        <link refid="abstractstream_8h"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="6" relation="include">
        </childnode>
        <childnode refid="7" relation="include">
        </childnode>
        <childnode refid="8" relation="include">
        </childnode>
        <childnode refid="9" relation="include">
        </childnode>
        <childnode refid="10" relation="include">
        </childnode>
        <childnode refid="11" relation="include">
        </childnode>
        <childnode refid="12" relation="include">
        </childnode>
        <childnode refid="13" relation="include">
        </childnode>
        <childnode refid="14" relation="include">
        </childnode>
        <childnode refid="15" relation="include">
        </childnode>
      </node>
      <node id="13">
        <label>tools/cabana/settings.h</label>
      </node>
      <node id="12">
        <label>tools/cabana/dbc/dbcmanager.h</label>
      </node>
      <node id="6">
        <label>tuple</label>
      </node>
      <node id="8">
        <label>vector</label>
      </node>
      <node id="2">
        <label>array</label>
      </node>
      <node id="15">
        <label>tools/replay/replay.h</label>
      </node>
      <node id="9">
        <label>QColor</label>
      </node>
      <node id="11">
        <label>common/timing.h</label>
      </node>
      <node id="4">
        <label>deque</label>
      </node>
      <node id="7">
        <label>unordered_map</label>
      </node>
      <node id="10">
        <label>QHash</label>
      </node>
      <node id="14">
        <label>tools/cabana/util.h</label>
      </node>
      <node id="5">
        <label>memory</label>
      </node>
    </incdepgraph>
    <invincdepgraph>
      <node id="1">
        <label>/tmp/openpilot/tools/cabana/streams/abstractstream.h</label>
        <link refid="abstractstream_8h"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="6" relation="include">
        </childnode>
      </node>
      <node id="5">
        <label>/tmp/openpilot/tools/cabana/streams/socketcanstream.h</label>
        <link refid="socketcanstream_8h_source"/>
      </node>
      <node id="6">
        <label>/tmp/openpilot/tools/cabana/streams/replaystream.h</label>
        <link refid="replaystream_8h_source"/>
      </node>
      <node id="3">
        <label>/tmp/openpilot/tools/cabana/streams/devicestream.h</label>
        <link refid="devicestream_8h_source"/>
      </node>
      <node id="4">
        <label>/tmp/openpilot/tools/cabana/streams/pandastream.h</label>
        <link refid="pandastream_8h_source"/>
      </node>
      <node id="2">
        <label>/tmp/openpilot/tools/cabana/streams/livestream.h</label>
        <link refid="livestream_8h_source"/>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="5" relation="include">
        </childnode>
      </node>
    </invincdepgraph>
    <innerclass refid="struct_can_data" prot="public">CanData</innerclass>
    <innerclass refid="struct_can_event" prot="public">CanEvent</innerclass>
    <innerclass refid="struct_compare_can_event" prot="public">CompareCanEvent</innerclass>
    <innerclass refid="struct_bus_config" prot="public">BusConfig</innerclass>
    <innerclass refid="class_abstract_stream" prot="public">AbstractStream</innerclass>
    <innerclass refid="class_abstract_open_stream_widget" prot="public">AbstractOpenStreamWidget</innerclass>
    <innerclass refid="class_dummy_stream" prot="public">DummyStream</innerclass>
    <innerclass refid="class_stream_notifier" prot="public">StreamNotifier</innerclass>
      <sectiondef kind="var">
      <memberdef kind="variable" id="abstractstream_8h_1a8e1c9ba9fee5f60eefe569897e597364" prot="public" static="no" mutable="no">
        <type><ref refid="class_abstract_stream" kindref="compound">AbstractStream</ref> *</type>
        <definition>AbstractStream* can</definition>
        <argsstring></argsstring>
        <name>can</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/tmp/openpilot/tools/cabana/streams/abstractstream.h" line="144" column="23" declfile="/tmp/openpilot/tools/cabana/streams/abstractstream.h" declline="144" declcolumn="23"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="preprocessor">#pragma<sp/>once</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2"><highlight class="normal"></highlight></codeline>
<codeline lineno="3"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;array&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;atomic&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;deque&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;memory&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;tuple&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="8"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;unordered_map&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="9"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;vector&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="10"><highlight class="normal"></highlight></codeline>
<codeline lineno="11"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;QColor&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="12"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;QHash&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="13"><highlight class="normal"></highlight></codeline>
<codeline lineno="14"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;common/timing.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="15"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;tools/cabana/dbc/dbcmanager.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="16"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;tools/cabana/settings.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="17"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;tools/cabana/util.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="18"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;tools/replay/replay.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="19"><highlight class="normal"></highlight></codeline>
<codeline lineno="20" refid="struct_can_data" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="struct_can_data" kindref="compound">CanData</ref><sp/>{</highlight></codeline>
<codeline lineno="21"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>compute(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>MessageId<sp/>&amp;msg_id,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*dat,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>size,<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>current_sec,</highlight></codeline>
<codeline lineno="22"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>playback_speed,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::vector&lt;uint8_t&gt;<sp/>*mask<sp/>=<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">,<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>in_freq<sp/>=<sp/>0);</highlight></codeline>
<codeline lineno="23"><highlight class="normal"></highlight></codeline>
<codeline lineno="24"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>ts<sp/>=<sp/>0.;</highlight></codeline>
<codeline lineno="25"><highlight class="normal"><sp/><sp/>uint32_t<sp/>count<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="26"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>freq<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="27"><highlight class="normal"><sp/><sp/>QByteArray<sp/>dat;</highlight></codeline>
<codeline lineno="28"><highlight class="normal"><sp/><sp/>QVector&lt;QColor&gt;<sp/>colors;</highlight></codeline>
<codeline lineno="29"><highlight class="normal"><sp/><sp/>std::vector&lt;double&gt;<sp/>last_change_t;</highlight></codeline>
<codeline lineno="30"><highlight class="normal"><sp/><sp/>std::vector&lt;std::array&lt;uint32_t,<sp/>8&gt;&gt;<sp/>bit_change_counts;</highlight></codeline>
<codeline lineno="31"><highlight class="normal"><sp/><sp/>std::vector&lt;int&gt;<sp/>last_delta;</highlight></codeline>
<codeline lineno="32"><highlight class="normal"><sp/><sp/>std::vector&lt;int&gt;<sp/>same_delta_counter;</highlight></codeline>
<codeline lineno="33"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>last_freq_update_ts<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="34"><highlight class="normal">};</highlight></codeline>
<codeline lineno="35"><highlight class="normal"></highlight></codeline>
<codeline lineno="36" refid="struct_can_event" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="struct_can_event" kindref="compound">CanEvent</ref><sp/>{</highlight></codeline>
<codeline lineno="37"><highlight class="normal"><sp/><sp/>uint8_t<sp/>src;</highlight></codeline>
<codeline lineno="38"><highlight class="normal"><sp/><sp/>uint32_t<sp/>address;</highlight></codeline>
<codeline lineno="39"><highlight class="normal"><sp/><sp/>uint64_t<sp/>mono_time;</highlight></codeline>
<codeline lineno="40"><highlight class="normal"><sp/><sp/>uint8_t<sp/>size;</highlight></codeline>
<codeline lineno="41"><highlight class="normal"><sp/><sp/>uint8_t<sp/>dat[];</highlight></codeline>
<codeline lineno="42"><highlight class="normal">};</highlight></codeline>
<codeline lineno="43"><highlight class="normal"></highlight></codeline>
<codeline lineno="44" refid="struct_compare_can_event" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="struct_compare_can_event" kindref="compound">CompareCanEvent</ref><sp/>{</highlight></codeline>
<codeline lineno="45"><highlight class="normal"><sp/><sp/>constexpr<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>operator()(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="struct_can_event" kindref="compound">CanEvent</ref><sp/>*</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>e,<sp/>uint64_t<sp/>ts)</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>e-&gt;mono_time<sp/>&lt;<sp/>ts;<sp/>}</highlight></codeline>
<codeline lineno="46"><highlight class="normal"><sp/><sp/>constexpr<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>operator()(uint64_t<sp/>ts,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="struct_can_event" kindref="compound">CanEvent</ref><sp/>*</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>e)</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ts<sp/>&lt;<sp/>e-&gt;mono_time;<sp/>}</highlight></codeline>
<codeline lineno="47"><highlight class="normal">};</highlight></codeline>
<codeline lineno="48"><highlight class="normal"></highlight></codeline>
<codeline lineno="49" refid="struct_bus_config" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="struct_bus_config" kindref="compound">BusConfig</ref><sp/>{</highlight></codeline>
<codeline lineno="50"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>can_speed_kbps<sp/>=<sp/>500;</highlight></codeline>
<codeline lineno="51"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>data_speed_kbps<sp/>=<sp/>2000;</highlight></codeline>
<codeline lineno="52"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>can_fd<sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="53"><highlight class="normal">};</highlight></codeline>
<codeline lineno="54"><highlight class="normal"></highlight></codeline>
<codeline lineno="55" refid="class_abstract_stream" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal"><ref refid="class_abstract_stream" kindref="compound">AbstractStream</ref><sp/>:<sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal"><sp/>QObject<sp/>{</highlight></codeline>
<codeline lineno="56"><highlight class="normal"><sp/><sp/>Q_OBJECT</highlight></codeline>
<codeline lineno="57"><highlight class="normal"></highlight></codeline>
<codeline lineno="58"><highlight class="normal"></highlight><highlight class="keyword">public</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="59"><highlight class="normal"><sp/><sp/><ref refid="class_abstract_stream" kindref="compound">AbstractStream</ref>(QObject<sp/>*parent);</highlight></codeline>
<codeline lineno="60"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">virtual</highlight><highlight class="normal"><sp/>~<ref refid="class_abstract_stream" kindref="compound">AbstractStream</ref>()<sp/>{}</highlight></codeline>
<codeline lineno="61"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">virtual</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>start()<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="62"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>liveStreaming()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>route()<sp/>==<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">;<sp/>}</highlight></codeline>
<codeline lineno="63"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">virtual</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>seekTo(</highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>ts)<sp/>{}</highlight></codeline>
<codeline lineno="64"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">virtual</highlight><highlight class="normal"><sp/>QString<sp/>routeName()<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="65"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">virtual</highlight><highlight class="normal"><sp/>QString<sp/>carFingerprint()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal">;<sp/>}</highlight></codeline>
<codeline lineno="66"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">virtual</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>routeStartTime()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>0;<sp/>}</highlight></codeline>
<codeline lineno="67"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">virtual</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>currentSec()<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="68"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">virtual</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>totalSeconds()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>lastEventMonoTime()<sp/>/<sp/>1e9<sp/>-<sp/>routeStartTime();<sp/>}</highlight></codeline>
<codeline lineno="69"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="struct_can_data" kindref="compound">CanData</ref><sp/>&amp;lastMessage(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>MessageId<sp/>&amp;</highlight><highlight class="keywordtype">id</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="70"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">virtual</highlight><highlight class="normal"><sp/>VisionStreamType<sp/>visionStreamType()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>VISION_STREAM_ROAD;<sp/>}</highlight></codeline>
<codeline lineno="71"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">virtual</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Route<sp/>*route()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">;<sp/>}</highlight></codeline>
<codeline lineno="72"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">virtual</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>setSpeed(</highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>speed)<sp/>{}</highlight></codeline>
<codeline lineno="73"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">virtual</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>getSpeed()<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>1;<sp/>}</highlight></codeline>
<codeline lineno="74"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">virtual</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>isPaused()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;<sp/>}</highlight></codeline>
<codeline lineno="75"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">virtual</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>pause(</highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>pause)<sp/>{}</highlight></codeline>
<codeline lineno="76"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::vector&lt;const<sp/>CanEvent<sp/>*&gt;<sp/>&amp;allEvents()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>all_events_;<sp/>}</highlight></codeline>
<codeline lineno="77"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::vector&lt;const<sp/>CanEvent<sp/>*&gt;<sp/>&amp;events(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>MessageId<sp/>&amp;</highlight><highlight class="keywordtype">id</highlight><highlight class="normal">)<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="78"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">virtual</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::vector&lt;std::tuple&lt;double,<sp/>double,<sp/>TimelineType&gt;&gt;<sp/>getTimeline()<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>{};<sp/>}</highlight></codeline>
<codeline lineno="79"><highlight class="normal"></highlight></codeline>
<codeline lineno="80"><highlight class="normal">signals:</highlight></codeline>
<codeline lineno="81"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>paused();</highlight></codeline>
<codeline lineno="82"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>resume();</highlight></codeline>
<codeline lineno="83"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>seekedTo(</highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>sec);</highlight></codeline>
<codeline lineno="84"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>streamStarted();</highlight></codeline>
<codeline lineno="85"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>eventsMerged();</highlight></codeline>
<codeline lineno="86"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>updated();</highlight></codeline>
<codeline lineno="87"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>msgsReceived(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>QHash&lt;MessageId,<sp/>CanData&gt;<sp/>*new_msgs,<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>has_new_ids);</highlight></codeline>
<codeline lineno="88"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>sourcesUpdated(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>SourceSet<sp/>&amp;s);</highlight></codeline>
<codeline lineno="89"><highlight class="normal"></highlight></codeline>
<codeline lineno="90"><highlight class="normal"></highlight><highlight class="keyword">public</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="91"><highlight class="normal"><sp/><sp/>QHash&lt;MessageId,<sp/>CanData&gt;<sp/>last_msgs;</highlight></codeline>
<codeline lineno="92"><highlight class="normal"><sp/><sp/>SourceSet<sp/>sources;</highlight></codeline>
<codeline lineno="93"><highlight class="normal"></highlight></codeline>
<codeline lineno="94"><highlight class="normal"></highlight><highlight class="keyword">protected</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="95"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>mergeEvents(std::vector&lt;Event<sp/>*&gt;::const_iterator<sp/>first,<sp/>std::vector&lt;Event<sp/>*&gt;::const_iterator<sp/>last);</highlight></codeline>
<codeline lineno="96"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>postEvents();</highlight></codeline>
<codeline lineno="97"><highlight class="normal"><sp/><sp/>uint64_t<sp/>lastEventMonoTime()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>lastest_event_ts;<sp/>}</highlight></codeline>
<codeline lineno="98"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>updateEvent(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>MessageId<sp/>&amp;</highlight><highlight class="keywordtype">id</highlight><highlight class="normal">,<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>sec,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>uint8_t<sp/>*data,<sp/>uint8_t<sp/>size);</highlight></codeline>
<codeline lineno="99"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>updateMessages(QHash&lt;MessageId,<sp/>CanData&gt;<sp/>*);</highlight></codeline>
<codeline lineno="100"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>updateMasks();</highlight></codeline>
<codeline lineno="101"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>updateLastMsgsTo(</highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>sec);</highlight></codeline>
<codeline lineno="102"><highlight class="normal"></highlight></codeline>
<codeline lineno="103"><highlight class="normal"><sp/><sp/>uint64_t<sp/>lastest_event_ts<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="104"><highlight class="normal"><sp/><sp/>std::atomic&lt;bool&gt;<sp/>processing<sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="105"><highlight class="normal"><sp/><sp/>std::unique_ptr&lt;QHash&lt;MessageId,<sp/>CanData&gt;&gt;<sp/>new_msgs;</highlight></codeline>
<codeline lineno="106"><highlight class="normal"><sp/><sp/>QHash&lt;MessageId,<sp/>CanData&gt;<sp/>all_msgs;</highlight></codeline>
<codeline lineno="107"><highlight class="normal"><sp/><sp/>std::unordered_map&lt;MessageId,<sp/>std::vector&lt;const<sp/>CanEvent<sp/>*&gt;&gt;<sp/>events_;</highlight></codeline>
<codeline lineno="108"><highlight class="normal"><sp/><sp/>std::vector&lt;const<sp/>CanEvent<sp/>*&gt;<sp/>all_events_;</highlight></codeline>
<codeline lineno="109"><highlight class="normal"><sp/><sp/>std::unique_ptr&lt;MonotonicBuffer&gt;<sp/>event_buffer;</highlight></codeline>
<codeline lineno="110"><highlight class="normal"><sp/><sp/>std::mutex<sp/>mutex;</highlight></codeline>
<codeline lineno="111"><highlight class="normal"><sp/><sp/>std::unordered_map&lt;MessageId,<sp/>std::vector&lt;uint8_t&gt;&gt;<sp/>masks;</highlight></codeline>
<codeline lineno="112"><highlight class="normal">};</highlight></codeline>
<codeline lineno="113"><highlight class="normal"></highlight></codeline>
<codeline lineno="114" refid="class_abstract_open_stream_widget" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal"><ref refid="class_abstract_open_stream_widget" kindref="compound">AbstractOpenStreamWidget</ref><sp/>:<sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal"><sp/>QWidget<sp/>{</highlight></codeline>
<codeline lineno="115"><highlight class="normal"></highlight><highlight class="keyword">public</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="116"><highlight class="normal"><sp/><sp/><ref refid="class_abstract_open_stream_widget" kindref="compound">AbstractOpenStreamWidget</ref>(<ref refid="class_abstract_stream" kindref="compound">AbstractStream</ref><sp/>**stream,<sp/>QWidget<sp/>*parent<sp/>=<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">)<sp/>:<sp/>stream(stream),<sp/>QWidget(parent)<sp/>{}</highlight></codeline>
<codeline lineno="117"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">virtual</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>open()<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="118"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">virtual</highlight><highlight class="normal"><sp/>QString<sp/>title()<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="119"><highlight class="normal"></highlight></codeline>
<codeline lineno="120"><highlight class="normal"></highlight><highlight class="keyword">protected</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="121"><highlight class="normal"><sp/><sp/><ref refid="class_abstract_stream" kindref="compound">AbstractStream</ref><sp/>**stream<sp/>=<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="122"><highlight class="normal">};</highlight></codeline>
<codeline lineno="123"><highlight class="normal"></highlight></codeline>
<codeline lineno="124" refid="class_dummy_stream" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal"><ref refid="class_dummy_stream" kindref="compound">DummyStream</ref><sp/>:<sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal"><sp/><ref refid="class_abstract_stream" kindref="compound">AbstractStream</ref><sp/>{</highlight></codeline>
<codeline lineno="125"><highlight class="normal"><sp/><sp/>Q_OBJECT</highlight></codeline>
<codeline lineno="126"><highlight class="normal"></highlight><highlight class="keyword">public</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="127"><highlight class="normal"><sp/><sp/><ref refid="class_dummy_stream" kindref="compound">DummyStream</ref>(QObject<sp/>*parent)<sp/>:<sp/><ref refid="class_abstract_stream" kindref="compound">AbstractStream</ref>(parent)<sp/>{}</highlight></codeline>
<codeline lineno="128"><highlight class="normal"><sp/><sp/>QString<sp/>routeName()</highlight><highlight class="keyword"><sp/>const<sp/>override<sp/></highlight><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>tr(</highlight><highlight class="stringliteral">&quot;No<sp/>Stream&quot;</highlight><highlight class="normal">);<sp/>}</highlight></codeline>
<codeline lineno="129"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>start()</highlight><highlight class="keyword"><sp/>override<sp/></highlight><highlight class="normal">{<sp/>emit<sp/>streamStarted();<sp/>}</highlight></codeline>
<codeline lineno="130"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>currentSec()</highlight><highlight class="keyword"><sp/>const<sp/>override<sp/></highlight><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>0;<sp/>}</highlight></codeline>
<codeline lineno="131"><highlight class="normal">};</highlight></codeline>
<codeline lineno="132"><highlight class="normal"></highlight></codeline>
<codeline lineno="133" refid="class_stream_notifier" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal"><ref refid="class_stream_notifier" kindref="compound">StreamNotifier</ref><sp/>:<sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal"><sp/>QObject<sp/>{</highlight></codeline>
<codeline lineno="134"><highlight class="normal"><sp/><sp/>Q_OBJECT</highlight></codeline>
<codeline lineno="135"><highlight class="normal"></highlight><highlight class="keyword">public</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="136"><highlight class="normal"><sp/><sp/><ref refid="class_stream_notifier" kindref="compound">StreamNotifier</ref>(QObject<sp/>*parent<sp/>=<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">)<sp/>:<sp/>QObject(parent)<sp/>{}</highlight></codeline>
<codeline lineno="137"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/><ref refid="class_stream_notifier" kindref="compound">StreamNotifier</ref>*<sp/>instance();</highlight></codeline>
<codeline lineno="138"><highlight class="normal">signals:</highlight></codeline>
<codeline lineno="139"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>streamStarted();</highlight></codeline>
<codeline lineno="140"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>changingStream();</highlight></codeline>
<codeline lineno="141"><highlight class="normal">};</highlight></codeline>
<codeline lineno="142"><highlight class="normal"></highlight></codeline>
<codeline lineno="143"><highlight class="normal"></highlight><highlight class="comment">//<sp/>A<sp/>global<sp/>pointer<sp/>referring<sp/>to<sp/>the<sp/>unique<sp/>AbstractStream<sp/>object</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="144"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/><ref refid="class_abstract_stream" kindref="compound">AbstractStream</ref><sp/>*can;</highlight></codeline>
    </programlisting>
    <location file="/tmp/openpilot/tools/cabana/streams/abstractstream.h"/>
  </compounddef>
</doxygen>
